%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1907.w013.n001.352B.p12.352__01.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Дмитрий Калиниченко
%%CreationDate: 7/16/2019
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.3 x585 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">vectorpocket_v-2</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 23.0 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2019-07-16T15:42:52+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2019-07-16T15:42:53+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2019-07-16T15:42:53+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUr8s+&#xA;YrLzFosGr2SSR21w0qokwVXBhlaFqhWcfajNN+mLZlxmEuEppi1uxV2KuxVB6vq9jpFi99fOUt4y&#xA;oZlUsaseI2HuchOYiLLdgwSyy4Y81TTdQtdS0611G0Yva3kMdxbuQVJjlUOhodx8JybXKJiSD0RG&#xA;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&#xA;7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:35ecfc51-77f9-c846-9124-32da3129724c</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:35ecfc51-77f9-c846-9124-32da3129724c</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:21156372-cc41-af46-a6de-72939487f147</stRef:instanceID>
            <stRef:documentID>xmp.did:21156372-cc41-af46-a6de-72939487f147</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7f846d85-2490-ba43-8c3b-798314c9c2fe</stEvt:instanceID>
                  <stEvt:when>2017-08-31T17:33:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:21156372-cc41-af46-a6de-72939487f147</stEvt:instanceID>
                  <stEvt:when>2019-07-16T15:41:25+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:35ecfc51-77f9-c846-9124-32da3129724c</stEvt:instanceID>
                  <stEvt:when>2019-07-16T15:42:53+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Mobile</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=83 G=71 B=65</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>83</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>65</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=140 G=98 B=57</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>140</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>57</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=228 G=98 B=77</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>228</xmpG:red>
                           <xmpG:green>98</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=251 B=228</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>251</xmpG:green>
                           <xmpG:blue>228</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=86 G=73 B=99</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>86</xmpG:red>
                           <xmpG:green>73</xmpG:green>
                           <xmpG:blue>98</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.0</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
177.066 354.214 mo
177.076 353.119 li
184.767 353.119 li
184.711 363.424 li
153.754 363.424 li
153.754 353.119 li
164.812 353.119 li
164.821 354.214 li
174.84 354.214 li
177.066 354.214 li
cp
.490196 .176471 .270588 rgb
f
120.708 354.214 mo
123.881 354.214 li
142.263 354.214 li
142.281 353.119 li
153.754 353.119 li
153.754 363.424 li
111.204 363.424 li
111.278 353.119 li
120.698 353.119 li
120.708 354.214 li
cp
.894118 .384314 .301961 rgb
f
88.4155 353.119 mo
88.4893 363.424 li
48.9204 363.424 li
48.6719 353.119 li
57.7153 353.119 li
57.7339 354.214 li
60.9077 354.214 li
78.9951 354.214 li
79.0044 353.119 li
88.4155 353.119 li
cp
f
175.07 327.894 mo
174.84 354.214 li
164.821 354.214 li
164.812 353.119 li
164.601 327.894 li
175.07 327.894 li
cp
.27451 .219608 .301961 rgb
f
169.835 310.22 mo
171.362 315.06 li
164.49 315.06 li
164.435 308.344 li
169.835 310.22 li
cp
f
79.2251 327.894 mo
79.0044 353.119 li
78.9951 354.214 li
60.9077 354.214 li
60.5674 327.894 li
79.2251 327.894 li
cp
f
111.443 327.894 mo
111.278 353.119 li
111.204 363.424 li
91.6631 363.424 li
91.4243 327.894 li
111.443 327.894 li
cp
f
142.281 353.119 mo
142.263 354.214 li
123.881 354.214 li
123.642 327.894 li
142.604 327.894 li
142.281 353.119 li
cp
f
142.935 302.64 mo
142.769 315.06 li
123.522 315.06 li
123.44 305.639 li
133.118 306.347 li
134.958 301.526 li
142.925 302.64 li
142.935 302.64 li
cp
f
111.691 301.416 mo
111.563 315.06 li
91.3047 315.06 li
91.231 306.816 li
100.542 305.169 li
100.542 293.541 li
109.355 290.845 li
111.683 301.416 li
111.691 301.416 li
cp
f
79.418 306.816 mo
79.3447 315.06 li
60.4019 315.06 li
60.126 293.78 li
67.6606 293.78 li
67.6606 287.901 li
74.938 287.901 li
76.8237 306.107 li
79.418 306.816 li
cp
f
57.7153 353.119 mo
57.3936 327.894 li
60.5674 327.894 li
60.9077 354.214 li
57.7339 354.214 li
57.7153 353.119 li
cp
.639216 .52549 .545098 rgb
f
88.4155 353.119 mo
88.25 327.894 li
91.4243 327.894 li
91.6631 363.424 li
88.4893 363.424 li
88.4155 353.119 li
cp
f
123.642 327.894 mo
123.881 354.214 li
120.708 354.214 li
120.698 353.119 li
120.468 327.894 li
123.642 327.894 li
cp
f
118.923 295.362 mo
119.447 300.211 li
117.414 299.833 li
116.789 294.948 li
118.923 295.362 li
cp
f
123.44 305.639 mo
123.522 315.06 li
120.358 315.06 li
120.22 300.357 li
123.394 301.121 li
123.44 305.639 li
cp
f
91.231 306.816 mo
91.3047 315.06 li
88.1396 315.06 li
87.8638 284.607 li
91.0283 284.607 li
91.231 306.816 li
cp
f
102.068 276.042 mo
100.661 284.607 li
97.9653 284.607 li
99.2534 275.748 li
102.068 276.042 li
cp
f
97.6709 271.773 mo
96.8799 275.436 li
93.439 274.984 li
93.9727 271.773 li
97.6709 271.773 li
cp
f
90.8169 261.534 mo
90.9087 271.773 li
87.7441 271.773 li
87.6431 260.577 li
90.8169 261.534 li
cp
f
60.126 293.78 mo
60.4019 315.06 li
57.228 315.06 li
56.8325 284.607 li
60.0063 284.607 li
60.126 293.78 li
cp
f
59.4453 241.322 mo
59.8408 271.773 li
56.6665 271.773 li
56.271 234.817 li
59.4453 235.838 li
59.4453 241.322 li
cp
f
181.813 280.568 mo
180.351 292.547 li
178.032 292.768 li
179.643 280.863 li
181.813 280.568 li
cp
.890196 .803922 .760784 rgb
f
177.287 327.894 mo
177.076 353.119 li
177.066 354.214 li
174.84 354.214 li
175.07 327.894 li
177.287 327.894 li
cp
f
177.591 292.805 mo
177.397 315.06 li
175.18 315.06 li
175.364 293.017 li
177.591 292.805 li
cp
f
178.032 292.768 mo
180.351 292.547 li
181.813 280.568 li
185.181 280.329 li
184.767 353.119 li
177.076 353.119 li
177.287 327.894 li
175.07 327.894 li
164.601 327.894 li
164.812 353.119 li
153.754 353.119 li
153.754 270.228 li
158.979 270.228 li
160.147 300.211 li
164.371 301.121 li
164.435 308.344 li
164.49 315.06 li
171.362 315.06 li
175.18 315.06 li
177.397 315.06 li
177.591 292.805 li
178.032 292.768 li
cp
.639216 .52549 .545098 rgb
f
79.418 306.816 mo
79.6206 284.607 li
60.0063 284.607 li
56.8325 284.607 li
57.228 315.06 li
60.4019 315.06 li
79.3447 315.06 li
79.418 306.816 li
cp
120.22 300.357 mo
120.358 315.06 li
123.522 315.06 li
142.769 315.06 li
142.935 302.64 li
143.165 284.607 li
130.321 284.607 li
131.702 278.453 li
143.726 277.983 li
145.584 270.228 li
153.754 270.228 li
153.754 353.119 li
142.281 353.119 li
142.604 327.894 li
123.642 327.894 li
120.468 327.894 li
120.698 353.119 li
111.278 353.119 li
111.443 327.894 li
91.4243 327.894 li
88.25 327.894 li
88.4155 353.119 li
79.0044 353.119 li
79.2251 327.894 li
60.5674 327.894 li
57.3936 327.894 li
57.7153 353.119 li
48.6719 353.119 li
48.6626 353.119 li
46.2158 253.227 li
49.6104 252.122 li
48.7549 236.621 li
56.271 234.817 li
56.6665 271.773 li
59.8408 271.773 li
79.7402 271.773 li
79.8599 258.277 li
79.8599 258.231 li
87.6431 260.577 li
87.7441 271.773 li
90.9087 271.773 li
93.9727 271.773 li
93.439 274.984 li
96.8799 275.436 li
99.2534 275.748 li
97.9653 284.607 li
91.0283 284.607 li
87.8638 284.607 li
88.1396 315.06 li
91.3047 315.06 li
111.563 315.06 li
111.691 301.416 li
111.756 293.955 li
111.756 293.937 li
116.789 294.948 li
117.414 299.833 li
119.447 300.211 li
120.22 300.357 li
cp
.890196 .803922 .760784 rgb
f
79.418 306.816 mo
79.6206 284.607 li
60.0063 284.607 li
56.8325 284.607 li
57.228 315.06 li
60.4019 315.06 li
79.3447 315.06 li
79.418 306.816 li
cp
120.22 300.357 mo
120.358 315.06 li
123.522 315.06 li
142.769 315.06 li
142.935 302.64 li
143.165 284.607 li
130.321 284.607 li
131.702 278.453 li
143.726 277.983 li
145.584 270.228 li
153.754 270.228 li
153.754 353.119 li
142.281 353.119 li
142.604 327.894 li
123.642 327.894 li
120.468 327.894 li
120.698 353.119 li
111.278 353.119 li
111.443 327.894 li
91.4243 327.894 li
88.25 327.894 li
88.4155 353.119 li
79.0044 353.119 li
79.2251 327.894 li
60.5674 327.894 li
57.3936 327.894 li
57.7153 353.119 li
48.6719 353.119 li
48.6626 353.119 li
46.2158 253.227 li
49.6104 252.122 li
48.7549 236.621 li
56.271 234.817 li
56.6665 271.773 li
59.8408 271.773 li
79.7402 271.773 li
79.8599 258.277 li
79.8599 258.231 li
87.6431 260.577 li
87.7441 271.773 li
90.9087 271.773 li
93.9727 271.773 li
93.439 274.984 li
96.8799 275.436 li
99.2534 275.748 li
97.9653 284.607 li
91.0283 284.607 li
87.8638 284.607 li
88.1396 315.06 li
91.3047 315.06 li
111.563 315.06 li
111.691 301.416 li
111.756 293.955 li
111.756 293.937 li
116.789 294.948 li
117.414 299.833 li
119.447 300.211 li
120.22 300.357 li
cp
f
57.5874 343.077 mo
53.9521 343.077 li
53.9521 346.55 li
57.6318 346.55 li
57.5874 343.077 li
cp
.831373 .737255 .713726 rgb
f
57.1563 309.525 mo
53.1143 309.525 li
53.1143 312.454 li
57.1938 312.454 li
57.1563 309.525 li
cp
f
79.2192 328.549 mo
84.4487 328.549 li
84.4487 325.564 li
78.0898 325.564 li
78.0898 327.894 li
79.2251 327.894 li
79.2192 328.549 li
cp
f
55.5923 300.896 mo
48.1445 300.896 li
48.1445 304.39 li
55.5923 304.39 li
55.5923 300.896 li
cp
f
87.0254 295.838 mo
80.3403 295.838 li
80.3403 298.975 li
87.0254 298.975 li
87.0254 295.838 li
cp
f
46.6348 270.339 mo
48.0361 270.339 li
48.0361 267.106 li
46.5557 267.106 li
46.6348 270.339 li
cp
f
50.6201 293.975 mo
47.2139 293.975 li
47.292 297.154 li
50.6201 297.154 li
50.6201 293.975 li
cp
f
65.1938 315.06 mo
60.4019 315.06 li
58.2695 315.06 li
58.2695 317.334 li
65.1938 317.334 li
65.1938 315.06 li
cp
f
111.317 347.127 mo
117.223 347.127 li
117.223 343.817 li
111.338 343.817 li
111.317 347.127 li
cp
f
54.3105 251.231 mo
56.4468 251.231 li
56.415 248.263 li
54.3105 248.263 li
54.3105 251.231 li
cp
f
51.6133 283.109 mo
46.9478 283.109 li
47.0186 286.004 li
51.6133 286.004 li
51.6133 283.109 li
cp
f
91.9619 320.669 mo
84.7681 320.669 li
84.7681 324.044 li
91.9619 324.044 li
91.9619 320.669 li
cp
f
120.542 335.979 mo
117.201 335.979 li
117.201 339.121 li
120.571 339.121 li
120.542 335.979 li
cp
f
134.219 321.284 mo
127.31 321.284 li
127.31 324.526 li
134.219 324.526 li
134.219 321.284 li
cp
f
147.804 328.09 mo
142.601 328.09 li
142.557 331.528 li
147.804 331.528 li
147.804 328.09 li
cp
f
133.689 315.226 mo
126.962 315.226 li
126.962 318.383 li
133.689 318.383 li
133.689 315.226 li
cp
f
110.364 315.688 mo
116.808 315.688 li
116.808 312.664 li
111.585 312.664 li
111.563 315.06 li
110.364 315.06 li
110.364 315.688 li
cp
f
148.814 348.457 mo
142.6 348.457 li
142.6 351.373 li
148.814 351.373 li
148.814 348.457 li
cp
f
153.754 342.371 mo
149.046 342.371 li
149.046 345.864 li
153.754 345.864 li
153.754 342.371 li
cp
f
111.46 321.729 mo
117.792 321.729 li
117.792 318.757 li
111.46 318.757 li
111.46 321.729 li
cp
f
149.531 317.739 mo
153.754 317.739 li
153.754 314.741 li
149.531 314.741 li
149.531 317.739 li
cp
f
134.334 326.188 mo
140.786 326.188 li
140.786 323.161 li
134.334 323.161 li
134.334 326.188 li
cp
f
145.563 334.916 mo
143.614 334.916 li
143.614 337.976 li
150.134 337.976 li
150.134 335.236 li
152.888 335.236 li
152.888 331.8 li
145.563 331.8 li
145.563 334.916 li
cp
f
146.048 315.074 mo
138.75 315.074 li
138.75 318.498 li
146.048 318.498 li
146.048 315.074 li
cp
f
79.2251 327.894 mo
79.1826 332.75 li
80.0625 329.885 li
84.6929 318.834 li
88.0864 309.17 li
88.0771 308.156 li
87.9634 308.246 li
84.0474 318.591 li
79.6167 328.533 li
79.6958 327.021 li
80.4316 319.969 li
80.7627 318.159 li
81.0088 316.239 li
80.9512 312.376 li
80.5908 308.571 li
80.751 304.833 li
81.6948 301.187 li
82.3848 299.405 li
82.9775 297.519 li
83.3457 293.646 li
83.353 291.786 li
83.6431 290.01 li
86.3594 283.313 li
88.4526 276.869 li
91.6836 271.773 li
91.2974 271.773 li
88.0601 276.678 li
85.8296 283.128 li
82.9766 289.831 li
82.6323 291.732 li
82.5913 293.641 li
82.1816 297.327 li
80.8662 300.885 li
79.8198 304.683 li
79.5894 308.626 li
79.894 312.452 li
79.8979 316.153 li
79.645 317.938 li
79.2847 319.767 li
78.4448 326.965 li
78.3242 327.894 li
79.2251 327.894 li
cp
.639216 .52549 .545098 rgb
f
50.2778 331.352 mo
52.4512 330.409 li
53.3711 330.029 li
52.3872 330.203 li
50.0708 330.693 li
48.1226 331.069 li
48.1489 332.152 li
50.2778 331.352 li
cp
f
62.1587 272.92 mo
63.4204 277.089 li
64.3247 280.591 li
64.457 281.698 li
64.4893 282.111 li
64.5161 281.698 li
64.5396 280.57 li
64.0894 276.921 li
63.3022 272.701 li
63.2583 271.773 li
62.0366 271.773 li
62.1587 272.92 li
cp
f
47.8516 319.996 mo
49.8247 320.505 li
52.8457 320.695 li
55.3267 320.974 li
56.0723 321.173 li
56.3467 321.26 li
56.0957 321.119 li
55.3926 320.769 li
52.9414 320.012 li
50.041 319.36 li
47.8662 318.598 li
47.8193 318.698 li
47.8516 319.996 li
cp
f
52.8755 278.604 mo
52.1187 279.919 li
53.0571 278.721 li
55.0581 275.696 li
57.3516 271.773 li
56.6665 271.773 li
56.6553 270.696 li
54.4468 275.376 li
52.8755 278.604 li
cp
f
69.5332 276.806 mo
67.4648 281.798 li
70.1484 277.119 li
73.3232 271.773 li
71.9761 271.773 li
69.5332 276.806 li
cp
f
153.754 321.657 mo
151.994 321.352 li
148.581 320.007 li
149.454 320.688 li
151.757 322 li
153.754 322.605 li
153.754 321.657 li
cp
f
98.6787 316.866 mo
98.8853 315.06 li
97.9033 315.06 li
97.9922 316.801 li
97.8442 319.537 li
98.6787 316.866 li
cp
f
147.374 351.197 mo
148.239 346.315 li
148.847 342.225 li
149.207 340.521 li
148.638 342.174 li
147.562 346.186 li
146.256 350.868 li
145.268 353.119 li
146.646 353.119 li
147.374 351.197 li
cp
f
142.991 298.224 mo
142.975 299.494 li
143.696 299.219 li
144.657 298.573 li
145.322 297.637 li
145.992 296.045 li
144.415 303.418 li
142.889 306.045 li
142.861 308.174 li
145.501 303.835 li
147.541 294.339 li
147.784 292.96 li
147.943 292.665 li
148.634 290.904 li
149.537 287.476 li
150.422 284.364 li
151.843 281.813 li
153.754 279.501 li
153.754 277.344 li
150.749 280.999 li
149.159 283.899 li
148.472 286.271 li
147.414 288.128 li
147.05 290.021 li
146.955 290.453 li
146.824 290.951 li
146.589 291.986 li
146.459 292.778 li
145.926 293.655 li
144.956 295.341 li
144.242 297.089 li
143.17 298.153 li
142.991 298.224 li
cp
f
132.576 327.894 mo
133.281 326.148 li
134.436 321.23 li
135.975 316.297 li
136.736 315.06 li
135.761 315.06 li
135.217 315.985 li
133.762 321.081 li
132.742 325.991 li
132.031 327.894 li
132.576 327.894 li
cp
f
101.215 324.928 mo
102.046 322.852 li
103.272 320.877 li
105.207 317.388 li
105.583 316.221 li
105.674 315.779 li
105.527 316.203 li
105.012 317.295 li
102.713 320.472 li
101.248 322.349 li
100.126 324.515 li
98.4375 327.678 li
98.6665 327.894 li
99.793 327.894 li
101.215 324.928 li
cp
f
114.431 339.839 mo
116.081 337.579 li
117.007 334.671 li
115.874 331.614 li
115.284 330.088 li
115.084 328.423 li
114.681 324.832 li
113.188 321.412 li
113.893 314.289 li
119.984 309.563 li
120.306 309.493 li
120.298 308.658 li
119.683 308.802 li
113.307 313.924 li
112.004 317.755 li
112.671 321.632 li
114.205 324.978 li
114.648 328.447 li
114.891 330.192 li
115.536 331.782 li
116.688 334.694 li
115.855 337.438 li
114.265 339.701 li
111.347 342.518 li
111.346 342.711 li
114.431 339.839 li
cp
f
60.6118 331.322 mo
79.1797 333.045 li
79.1392 337.673 li
60.6802 336.587 li
60.6118 331.322 li
cp
.54902 .384314 .223529 rgb
f
60.7246 340.051 mo
79.1235 339.464 li
79.085 343.888 li
60.7246 343.077 li
60.7246 340.051 li
cp
f
60.8086 346.55 mo
79.0586 346.903 li
79.0293 350.23 li
60.9077 351.365 li
60.8086 346.55 li
cp
f
123.671 331.087 mo
142.542 332.731 li
142.48 337.551 li
123.728 337.271 li
123.671 331.087 li
cp
f
123.768 341.676 mo
142.428 341.676 li
142.374 345.864 li
123.881 347.127 li
123.768 341.676 li
cp
f
89.9565 327.894 mo
89.9565 363.424 li
97.8442 363.424 li
96.3564 330.029 li
89.9565 327.894 li
cp
f
89.9565 327.894 mo
92.4712 327.894 li
98.6074 329.569 li
99.2534 363.46 li
97.8442 363.424 li
96.3564 330.029 li
89.9565 327.894 li
cp
.32549 .278431 .254902 rgb
f
91.5293 350.726 mo
95.4854 351.11 li
94.3848 331.977 li
91.0352 331.039 li
91.5293 350.726 li
cp
95.9756 351.621 mo
91.0801 351.145 li
90.5591 330.429 li
94.8247 331.622 li
94.8345 331.786 li
95.9756 351.621 li
cp
f
91.4609 361.823 mo
96.043 361.823 li
95.5137 353.674 li
91.4609 353.367 li
91.4609 361.823 li
cp
96.5337 362.283 mo
91.001 362.283 li
91.001 352.871 li
95.9468 353.245 li
96.5337 362.283 li
cp
f
252.847 425.527 mo
252.099 429.008 li
258.586 430.555 li
260.919 433.712 li
268.667 434.311 li
274.307 439.975 li
275.679 438.877 li
269.777 432.851 li
262.828 432.289 li
261.368 429.107 li
252.847 425.527 li
cp
.384314 .439216 .439216 rgb
f
272.81 425.228 mo
271.961 426.538 li
276.415 430.555 li
276.315 434.946 li
284.6 440.474 li
286.184 440.474 li
277.8 433.387 li
277.8 430.555 li
272.81 425.228 li
cp
f
260.895 399.813 mo
259.622 403.756 li
276.178 413.55 li
274.082 414.673 li
274.082 420.724 li
290.899 433.712 li
291.886 432.289 li
276.415 420.087 li
277.774 415.222 li
280.008 414.111 li
260.895 399.813 li
cp
f
302.939 390.219 mo
303.65 393.487 li
310.787 394.037 li
315.79 409.895 li
319.745 410.742 li
323.888 418.927 li
325.01 418.665 li
320.594 409.146 li
316.764 408.185 li
313.133 394.211 li
318.148 394.598 li
318.148 392.764 li
312.521 391.828 li
309.627 380.687 li
306.57 380.687 li
309.951 391.392 li
302.939 390.219 li
cp
f
280.444 391.679 mo
280.906 394.648 li
311.161 424.828 li
315.116 425.228 li
285.173 394.361 li
285.173 389.508 li
280.444 391.679 li
cp
.32549 .278431 .254902 rgb
f
285.173 389.508 mo
285.173 394.361 li
315.116 425.228 li
317.998 425.527 li
285.173 389.508 li
cp
.54902 .384314 .223529 rgb
f
245.835 460.86 mo
244.775 462.769 li
260.383 463.193 li
262.079 460.647 li
279.608 462.557 li
279.608 463.829 li
291.499 465.314 li
301.529 465.314 li
303.289 461.172 li
306.258 458.839 li
303.289 457.566 li
300.419 457.142 li
297.438 457.99 li
286.508 456.394 li
277.051 457.99 li
277.5 456.681 li
273.558 457.142 li
261.368 453.299 li
258.149 453.849 li
256.989 457.354 li
245.835 460.86 li
cp
.890196 .803922 .760784 rgb
f
244.775 462.769 mo
245.735 465.314 li
291.499 465.314 li
279.608 463.829 li
279.608 462.557 li
262.079 460.647 li
260.383 463.193 li
244.775 462.769 li
cp
.639216 .52549 .545098 rgb
f
261.368 453.299 mo
273.558 457.142 li
277.5 456.681 li
278.187 454.646 li
274.082 454.646 li
262.504 453.1 li
261.368 453.299 li
cp
f
263.14 448.97 mo
262.504 453.1 li
274.082 454.646 li
278.187 454.646 li
278.199 454.646 li
280.444 448.021 li
272.597 448.021 li
267.706 446.712 li
263.14 448.97 li
cp
.890196 .803922 .760784 rgb
f
267.706 445.252 mo
268.455 446.338 li
267.706 446.712 li
272.597 448.021 li
280.444 448.021 li
280.906 446.687 li
275.305 446.687 li
267.706 445.252 li
cp
.639216 .52549 .545098 rgb
f
267.706 445.252 mo
275.305 446.687 li
280.906 446.687 li
282.154 443.019 li
298.236 444.254 li
301.529 444.504 li
301.143 448.92 li
305.322 450.505 li
302.702 451.989 li
302.615 454.173 li
300.419 457.142 li
303.289 457.566 li
311.985 454.385 li
311.349 452.151 li
323.676 448.222 li
322.178 441.696 li
316.876 438.665 li
315.116 440.623 li
308.517 440.149 li
294.73 441.26 li
289.689 440.474 li
286.184 440.474 li
284.6 440.474 li
281.306 440.474 li
275.679 438.877 li
274.307 439.975 li
267.706 445.252 li
cp
.890196 .803922 .760784 rgb
f
277.5 456.681 mo
277.051 457.99 li
286.508 456.394 li
297.438 457.99 li
298.236 444.254 li
282.154 443.019 li
280.906 446.687 li
280.444 448.021 li
278.199 454.646 li
277.5 456.681 li
cp
.819608 .588235 .392157 rgb
f
290.899 433.712 mo
288.629 436.968 li
295.055 439.75 li
308.192 439.276 li
315.116 440.623 li
316.876 438.665 li
327.468 439.301 li
329.938 436.968 li
343.15 436.331 li
343.275 437.592 li
347.667 436.968 li
352.87 435.159 li
350.112 432.289 li
356.612 433.861 li
356.214 425.103 li
354.654 423.705 li
350.724 431.341 li
350.3 431.254 li
339.595 431.341 li
332.06 432.501 li
331.124 430.555 li
335.503 429.645 li
335.116 426.874 li
346.282 426.874 li
335.877 423.705 li
335.877 419.875 li
329.189 419.875 li
327.468 418.066 li
325.01 418.665 li
323.888 418.939 li
317.824 420.399 li
319.109 423.693 li
323.026 424.117 li
330.649 426.538 li
321.966 425.926 li
317.998 425.527 li
305.086 424.229 li
302.64 427.723 li
319.109 430.593 li
308.117 431.153 li
312.496 433.387 li
300.145 431.341 li
292.56 431.341 li
290.899 433.712 li
cp
.890196 .803922 .760784 rgb
f
288.629 436.968 mo
291.074 439.301 li
289.689 440.474 li
294.73 441.26 li
308.517 440.149 li
315.116 440.623 li
308.192 439.276 li
295.055 439.75 li
288.629 436.968 li
cp
.639216 .52549 .545098 rgb
f
298.236 444.254 mo
297.438 457.99 li
300.419 457.142 li
301.143 448.92 li
301.529 444.504 li
298.236 444.254 li
cp
.529412 .301961 .368627 rgb
f
300.145 431.341 mo
312.496 433.387 li
308.117 431.153 li
319.109 430.593 li
302.64 427.723 li
304.773 430.168 li
304.661 431.341 li
300.145 431.341 li
cp
.639216 .52549 .545098 rgb
f
301.143 448.92 mo
300.419 457.142 li
302.615 454.173 li
302.702 451.989 li
305.322 450.505 li
301.143 448.92 li
cp
f
303.289 461.172 mo
301.529 465.314 li
312.496 465.314 li
316.876 458.303 li
321.492 456.718 li
325.01 455.72 li
326.906 439.837 li
327.468 439.301 li
316.876 438.665 li
322.178 441.696 li
323.676 448.222 li
311.349 452.151 li
311.985 454.385 li
303.289 457.566 li
306.258 458.839 li
303.289 461.172 li
cp
f
316.876 458.303 mo
312.496 465.314 li
316.876 465.314 li
321.492 456.718 li
316.876 458.303 li
cp
.529412 .301961 .368627 rgb
f
321.492 456.718 mo
316.876 465.314 li
374.529 465.314 li
372.694 443.019 li
363.861 441.696 li
372.582 441.696 li
371.809 432.289 li
370.1 411.591 li
369.75 407.337 li
353.506 407.337 li
354.279 418.802 li
358.297 422.745 li
363.861 416.02 li
358.385 424.104 li
358.385 424.117 li
359.981 447.585 li
358.609 447.635 li
358.609 447.635 359.158 457.329 359.083 457.142 cv
358.996 456.955 357.249 447.673 357.249 447.673 cv
344.273 448.109 li
344.087 446.101 li
344.074 446.101 li
337.1 445.826 li
343.962 444.928 li
343.899 444.254 li
337.1 441.26 li
343.762 442.744 li
343.275 437.592 li
343.15 436.331 li
329.938 436.968 li
328.891 453.512 li
336.626 452.389 li
328.815 454.646 li
325.01 455.72 li
321.492 456.718 li
cp
.819608 .588235 .392157 rgb
f
323.026 424.117 mo
321.966 425.926 li
330.649 426.538 li
323.026 424.117 li
cp
.639216 .52549 .545098 rgb
f
326.906 439.837 mo
325.01 455.72 li
328.815 454.646 li
328.891 453.512 li
329.938 436.968 li
327.468 439.301 li
326.906 439.837 li
cp
.529412 .301961 .368627 rgb
f
328.891 453.512 mo
328.815 454.646 li
336.626 452.389 li
328.891 453.512 li
cp
f
331.124 430.555 mo
332.06 432.501 li
339.595 431.341 li
350.3 431.254 li
344.798 430.068 li
346.282 426.874 li
335.116 426.874 li
335.503 429.645 li
331.124 430.555 li
cp
.639216 .52549 .545098 rgb
f
337.1 441.26 mo
343.899 444.254 li
343.762 442.744 li
337.1 441.26 li
cp
.529412 .301961 .368627 rgb
f
337.1 445.826 mo
344.074 446.101 li
344.087 446.101 li
343.899 444.254 li
343.962 444.928 li
337.1 445.826 li
cp
f
343.275 437.592 mo
343.762 442.744 li
343.899 444.254 li
344.087 446.101 li
344.273 448.109 li
357.249 447.673 li
356.612 433.861 li
350.112 432.289 li
352.87 435.159 li
347.667 436.968 li
343.275 437.592 li
cp
.639216 .52549 .545098 rgb
f
353.506 407.337 mo
350.724 410.206 li
352.109 421.435 li
354.654 423.705 li
356.214 425.103 li
356.612 433.861 li
357.249 447.673 li
358.609 447.635 li
359.981 447.585 li
358.385 424.117 li
358.385 424.104 li
358.297 422.745 li
354.279 418.802 li
353.506 407.337 li
cp
.529412 .301961 .368627 rgb
f
358.609 447.635 mo
357.249 447.673 li
357.249 447.673 358.996 456.955 359.083 457.142 cv
359.158 457.329 358.609 447.635 358.609 447.635 cv
cp
f
363.861 416.02 mo
358.297 422.745 li
358.385 424.104 li
363.861 416.02 li
cp
f
363.861 441.696 mo
372.694 443.019 li
372.582 441.696 li
363.861 441.696 li
cp
f
370.1 411.591 mo
371.809 432.289 li
373.681 432.289 li
377.822 428.896 li
373.044 426.238 li
373.156 426.238 380.268 427.723 380.268 427.723 cv
389.612 421.884 li
384.935 414.885 li
391.31 407.337 li
387.167 403.406 li
382.701 404.579 li
381.278 404.741 li
378.995 405.003 li
372.72 411.379 li
370.1 411.591 li
cp
.890196 .803922 .760784 rgb
f
371.809 432.289 mo
372.582 441.696 li
372.694 443.019 li
374.529 465.314 li
389.825 465.314 li
384.935 463.081 li
386.793 457.666 li
395.788 456.718 li
405.433 457.192 li
396.824 455.72 li
394.204 451.853 li
397.148 448.745 li
390.137 451.465 li
378.833 449.631 li
379.781 443.58 li
388.153 442.295 li
395.077 442.694 li
387.192 441.11 li
378.833 442.058 li
375.564 438.402 li
379.146 431.553 li
381.641 430.118 li
380.268 427.723 li
380.268 427.723 373.156 426.238 373.044 426.238 cv
377.822 428.896 li
373.681 432.289 li
371.809 432.289 li
cp
.639216 .52549 .545098 rgb
f
379.146 431.553 mo
375.564 438.402 li
378.833 442.058 li
387.192 441.11 li
395.077 442.694 li
388.153 442.295 li
379.781 443.58 li
378.833 449.631 li
390.137 451.465 li
397.148 448.745 li
394.204 451.853 li
396.824 455.72 li
405.433 457.192 li
408.564 456.668 li
414.179 453.849 li
411.796 449.818 li
406.493 446.338 li
404.959 443.967 li
403.923 442.357 li
401.603 438.765 li
398.633 434.734 li
397.073 433.462 li
389.663 429.645 li
383.773 428.896 li
381.641 430.118 li
379.146 431.553 li
cp
.890196 .803922 .760784 rgb
f
390.673 398.44 mo
389.612 398.416 li
382.701 404.579 li
387.167 403.406 li
391.31 407.337 li
384.935 414.885 li
389.612 421.884 li
380.268 427.723 li
381.641 430.118 li
383.773 428.896 li
389.663 429.645 li
397.073 433.462 li
398.633 434.734 li
398.907 418.49 li
393.718 419.526 li
390.499 413.075 li
394.441 408.609 li
401.078 406.014 li
410.211 405.515 li
401.378 404.841 li
396.101 406.139 li
394.279 403.73 li
395.314 401.447 li
404.797 402.483 li
397.224 399.451 li
400.056 391.679 li
398.633 391.417 li
395.077 397.081 li
394.179 398.528 li
392.707 398.49 li
390.673 398.44 li
cp
.639216 .52549 .545098 rgb
f
386.793 457.666 mo
384.935 463.081 li
389.825 465.314 li
412.432 465.314 li
428.327 463.705 li
425.495 458.515 li
414.877 455.021 li
408.564 456.668 li
405.433 457.192 li
395.788 456.718 li
386.793 457.666 li
cp
.890196 .803922 .760784 rgb
f
394.441 408.609 mo
390.499 413.075 li
393.718 419.526 li
398.907 418.49 li
399.058 409.146 li
402.663 407.337 li
414.142 407.337 li
415.751 416.818 li
415.764 416.818 li
416.025 416.855 419.769 416.818 419.769 416.818 cv
422.313 415.733 li
419.132 405.964 li
416.362 404.903 li
413.816 397.593 li
412.781 394.648 li
412.544 393.962 li
410.211 393.538 li
400.056 391.679 li
397.224 399.451 li
404.797 402.483 li
395.314 401.447 li
394.279 403.73 li
396.101 406.139 li
401.378 404.841 li
410.211 405.515 li
401.078 406.014 li
394.441 408.609 li
cp
f
398.907 418.49 mo
398.633 434.734 li
401.603 438.765 li
402.663 407.337 li
399.058 409.146 li
398.907 418.49 li
cp
.529412 .301961 .368627 rgb
f
415.976 418.066 mo
415.764 416.818 li
415.751 416.818 li
414.142 407.337 li
402.663 407.337 li
401.603 438.765 li
403.923 442.357 li
420.392 447.111 li
404.959 443.967 li
406.493 446.338 li
411.796 449.818 li
414.179 453.849 li
414.191 453.849 li
414.877 455.021 li
425.495 458.515 li
428.327 463.705 li
428.339 463.705 li
429.213 465.314 li
434.341 465.314 li
430.436 463.705 li
438.632 463.33 li
438.32 462.045 li
441.664 461.446 li
432.395 458.314 li
433.168 458.439 443.099 460.148 443.099 460.373 cv
443.099 458.627 li
443.099 451.777 li
438.57 446.874 li
436.823 434.11 li
436.225 429.731 li
424.547 427.723 li
424.547 434.311 li
425.096 446.101 li
423.437 434.148 li
421.353 433.861 li
418.596 433.462 li
416.911 423.593 li
412.432 422.944 li
416.674 422.184 li
415.976 418.066 li
cp
.819608 .588235 .392157 rgb
f
403.923 442.357 mo
404.959 443.967 li
420.392 447.111 li
403.923 442.357 li
cp
.529412 .301961 .368627 rgb
f
408.564 456.668 mo
414.877 455.021 li
414.191 453.849 li
414.179 453.849 li
408.564 456.668 li
cp
.639216 .52549 .545098 rgb
f
412.432 422.944 mo
416.911 423.593 li
416.674 422.184 li
412.432 422.944 li
cp
.529412 .301961 .368627 rgb
f
412.432 465.314 mo
429.213 465.314 li
428.339 463.705 li
428.327 463.705 li
412.432 465.314 li
cp
.639216 .52549 .545098 rgb
f
415.764 416.818 mo
415.976 418.066 li
419.769 416.818 li
419.769 416.818 416.025 416.855 415.764 416.818 cv
cp
f
415.976 418.066 mo
416.674 422.184 li
416.911 423.593 li
418.596 433.462 li
421.353 433.861 li
421.353 429.22 li
424.547 427.723 li
436.225 429.731 li
436.823 434.11 li
438.67 433.861 li
438.033 426.026 li
429.849 422.096 li
427.828 422.732 li
425.183 422.096 li
424.547 416.794 li
422.313 415.733 li
419.769 416.818 li
415.976 418.066 li
cp
.890196 .803922 .760784 rgb
f
421.353 429.22 mo
421.353 433.861 li
423.437 434.148 li
424.547 434.311 li
424.547 427.723 li
421.353 429.22 li
cp
.529412 .301961 .368627 rgb
f
423.437 434.148 mo
425.096 446.101 li
424.547 434.311 li
423.437 434.148 li
cp
f
430.436 463.705 mo
434.341 465.314 li
443.099 465.314 li
443.099 460.373 li
443.099 460.148 433.168 458.439 432.395 458.314 cv
441.664 461.446 li
438.32 462.045 li
438.632 463.33 li
430.436 463.705 li
cp
f
436.823 434.11 mo
438.57 446.874 li
443.099 451.777 li
445.083 450.579 li
449.225 451.853 li
458.943 451.403 li
461.913 451.403 li
462.025 445.776 li
447.266 440.573 li
445.569 441.634 li
442.063 439.625 li
441.314 434.522 li
438.67 433.861 li
436.823 434.11 li
cp
.890196 .803922 .760784 rgb
f
443.099 460.373 mo
443.099 465.314 li
464.895 465.314 li
465.356 464.266 li
449.225 462.769 li
443.099 458.627 li
443.099 460.373 li
cp
.639216 .52549 .545098 rgb
f
443.099 451.777 mo
443.099 458.627 li
449.225 462.769 li
465.356 464.266 li
467.229 460.012 li
458.308 454.909 li
449.225 453.773 li
445.083 450.579 li
443.099 451.777 li
cp
.890196 .803922 .760784 rgb
f
445.083 450.579 mo
449.225 453.773 li
458.308 454.909 li
458.943 451.403 li
449.225 451.853 li
445.083 450.579 li
cp
.639216 .52549 .545098 rgb
f
236.647 334.8 mo
228.95 334.8 li
227.127 338.336 li
221.449 339.413 li
213.094 344.739 li
206.447 354.413 li
207.884 357.563 li
204.74 359 li
204.74 362.233 li
221.774 363.366 li
236.142 347.501 li
236.647 334.8 li
cp
f
246 274.147 mo
247.794 286.972 li
245.661 286.564 li
243.625 275.214 li
246 274.147 li
cp
.32549 .278431 .254902 rgb
f
272.357 292.119 mo
271.311 293.447 li
265.232 292.827 li
265.262 293.612 li
263.013 294.193 li
263.468 309.567 li
262.159 309.684 li
261.035 292.458 li
250.973 291.479 li
251.07 292.119 li
248.87 292.332 li
251.739 311.08 li
250.062 311.196 li
246.456 291.033 li
239.496 290.354 li
237.761 287.883 li
241.454 285.896 li
242.191 288.223 li
272.357 292.119 li
cp
f
271.242 309.693 mo
270.012 312.068 li
266.008 312.679 li
266.047 313.58 li
264.089 314.036 li
265.445 343.155 li
264.341 343.029 li
262.393 313.231 li
254.492 314.424 li
254.686 315.703 li
253.038 316.343 li
256.566 338.299 li
255.423 338.328 li
254.725 337.203 li
250.75 314.996 li
250.333 315.063 li
246 314.298 li
246 311.7 li
250.576 312.94 li
271.242 309.693 li
cp
f
236.966 322.033 mo
240.97 335.313 li
240.165 337.601 li
235.241 322.47 li
236.966 322.033 li
cp
f
236.966 322.033 mo
235.241 322.47 li
223.356 316.353 li
226.158 315.063 li
236.966 322.033 li
cp
f
242.54 306.94 mo
241.357 308.056 li
235.938 310.556 li
231.964 312.389 li
229.396 313.57 li
226.158 315.063 li
223.356 316.353 li
216.678 319.436 li
214.322 316.033 li
215.931 315.044 li
217.473 317.206 li
242.54 306.94 li
cp
f
235.938 310.556 mo
236.142 311.244 li
234.194 312.572 li
235.726 317.826 li
233.176 316.11 li
231.964 312.389 li
235.938 310.556 li
cp
f
227.127 289.986 mo
232.624 308.656 li
230.956 309.296 li
225.276 291.838 li
227.127 289.986 li
cp
f
254.686 315.703 mo
258.146 338.26 li
256.566 338.299 li
253.038 316.343 li
254.686 315.703 li
cp
.54902 .384314 .223529 rgb
f
271.311 290.607 mo
272.357 292.119 li
242.191 288.223 li
241.454 285.896 li
245.661 286.564 li
247.794 286.972 li
246 274.147 li
248.579 275.873 li
250.333 287.302 li
271.311 290.607 li
cp
f
271.242 309.693 mo
250.576 312.94 li
246 311.7 li
250.062 311.196 li
251.739 311.08 li
248.87 292.332 li
251.07 292.119 li
253.92 310.711 li
262.159 309.684 li
263.468 309.567 li
263.013 294.193 li
265.262 293.612 li
265.872 309.219 li
267.782 308.977 li
271.242 309.693 li
cp
f
266.047 313.58 mo
267.22 343.358 li
265.445 343.155 li
264.089 314.036 li
266.047 313.58 li
cp
f
236.142 311.244 mo
242.966 334.45 li
241.154 334.78 li
240.97 335.313 li
236.966 322.033 li
235.726 317.826 li
234.194 312.572 li
236.142 311.244 li
cp
f
241.793 305.147 mo
242.54 306.94 li
217.473 317.206 li
215.931 315.044 li
230.956 309.296 li
232.624 308.656 li
235.095 307.706 li
241.793 305.147 li
cp
f
235.726 317.826 mo
236.966 322.033 li
226.158 315.063 li
229.396 313.57 li
233.176 316.11 li
235.726 317.826 li
cp
f
230.104 290.724 mo
235.095 307.706 li
232.624 308.656 li
227.127 289.986 li
230.104 290.724 li
cp
f
278.627 314.259 mo
273.951 333.935 li
272.357 333.935 li
276.305 314.259 li
278.627 314.259 li
cp
.32549 .278431 .254902 rgb
f
280.686 315.515 mo
275.692 336.785 li
274.806 333.935 li
273.951 333.935 li
278.627 314.259 li
280.686 315.515 li
cp
.54902 .384314 .223529 rgb
f
257.273 353.938 mo
257.294 354.106 li
256.798 360.334 li
256.481 353.927 li
248.216 353.811 li
247.72 357.917 li
247.404 353.801 li
238.822 353.674 li
247.372 353.305 li
247.002 348.522 li
248.09 353.272 li
255.985 352.935 li
256.429 352.987 li
256.08 346.105 li
257.136 353.072 li
265.602 354.054 li
257.273 353.938 li
cp
.639216 .52549 .545098 rgb
f
281.276 352.935 mo
281.276 354.413 li
271.344 353.969 li
281.276 352.935 li
cp
f
281.14 344.712 mo
281.14 345.789 li
264.515 345.43 li
281.14 344.712 li
cp
f
276.178 338.336 mo
276.695 339.993 li
268.019 340.489 li
276.178 338.336 li
cp
f
251.151 330.567 mo
250.549 333.396 li
243.34 334.114 li
244.216 331.507 li
251.151 330.567 li
cp
f
258.909 326.113 mo
258.36 328.002 li
251.151 330.567 li
252.396 327.189 li
258.909 326.113 li
cp
f
261.527 326.113 mo
261.527 326.113 260.323 337.439 260.25 337.703 cv
260.187 337.978 260.25 326.113 260.25 326.113 cv
261.527 326.113 li
cp
f
262.92 340.765 mo
260.492 340.638 248.596 340.489 248.596 340.489 cv
255.268 339.413 li
255.268 339.413 261.231 340.511 262.92 340.765 cv
cp
f
244.396 341.661 mo
232.446 341.661 li
232.731 340.489 li
244.396 341.661 li
cp
f
221.849 357.199 mo
210.533 355.405 li
211.293 354.413 li
211.303 354.413 li
221.849 357.199 li
cp
f
235.138 351.003 mo
221.849 349.567 li
222.767 348.048 li
222.777 348.048 li
235.138 351.003 li
cp
f
257.273 353.938 mo
257.294 354.106 li
256.798 360.334 li
256.481 353.927 li
248.216 353.811 li
247.72 357.917 li
247.404 353.801 li
238.822 353.674 li
247.372 353.305 li
247.002 348.522 li
248.09 353.272 li
255.985 352.935 li
256.429 352.987 li
256.08 346.105 li
257.136 353.072 li
265.602 354.054 li
257.273 353.938 li
cp
255.268 339.413 mo
255.268 339.413 261.231 340.511 262.92 340.765 cv
260.492 340.638 248.596 340.489 248.596 340.489 cv
255.268 339.413 li
cp
281.14 347.277 mo
281.14 345.789 li
264.515 345.43 li
281.14 344.712 li
284.105 344.712 li
284.644 339.993 li
276.695 339.993 li
268.019 340.489 li
276.178 338.336 li
275.692 336.795 li
275.692 336.785 li
274.806 333.935 li
268.335 333.935 li
269.687 326.113 li
261.527 326.113 li
261.527 326.113 260.323 337.439 260.25 337.703 cv
260.187 337.978 260.25 326.113 260.25 326.113 cv
258.909 326.113 li
258.36 328.002 li
251.15 330.567 li
250.549 333.396 li
243.34 334.114 li
239.772 334.473 li
237.566 337.26 li
236.647 334.8 li
233.534 337.26 li
232.731 340.489 li
244.396 341.661 li
229.533 341.661 li
225.702 343.635 li
225.287 345.218 224.323 346.761 223.838 348.301 cv
235.138 351.003 li
223.472 349.743 li
222.641 353.544 222.798 357.661 222.139 361.492 cv
222.031 362.12 221.903 362.743 221.774 363.366 cv
234.114 363.036 li
234.695 361.4 li
263.712 360.704 li
281.276 360.704 li
281.276 354.413 li
271.344 353.97 li
281.276 352.935 li
286.396 352.935 li
287.198 347.277 li
281.14 347.277 li
cp
.890196 .803922 .760784 rgb
f
263.354 340.807 mo
263.332 340.796 263.185 340.774 262.941 340.765 cv
263.174 340.807 263.332 340.817 263.354 340.807 cv
cp
f
240.566 151.547 mo
240.566 152.397 li
238.966 152.377 li
238.966 151.547 li
240.566 151.547 li
cp
.337255 .286275 .388235 rgb
f
255.296 154.907 mo
237.306 154.637 li
237.146 152.347 li
238.966 152.377 li
240.566 152.397 li
255.195 152.627 li
255.886 152.447 li
255.546 142.677 li
257.636 142.197 li
257.636 141.627 li
258.046 152.667 li
273.056 152.897 li
274.695 152.917 li
276.516 152.947 li
276.666 155.237 li
258.136 154.957 li
255.296 154.907 li
cp
.54902 .384314 .223529 rgb
f
240.756 148.347 mo
240.566 149.107 li
238.966 149.107 li
238.776 148.277 li
240.756 148.347 li
cp
.337255 .286275 .388235 rgb
f
274.766 148.727 mo
274.576 149.527 li
273.166 149.527 li
272.796 148.727 li
274.766 148.727 li
cp
f
274.826 151.977 mo
274.695 152.917 li
273.056 152.897 li
272.976 151.977 li
274.826 151.977 li
cp
f
238.966 149.107 mo
240.566 149.107 li
241.656 149.107 li
241.436 151.547 li
240.566 151.547 li
238.966 151.547 li
238.166 151.547 li
237.936 149.107 li
238.966 149.107 li
cp
1 .984314 .894118 rgb
f
273.166 149.527 mo
274.576 149.527 li
275.615 149.527 li
275.396 151.977 li
274.826 151.977 li
272.976 151.977 li
272.115 151.977 li
271.896 149.527 li
273.166 149.527 li
cp
f
262.296 244.207 mo
262.306 244.847 li
258.346 244.847 li
257.115 223.747 li
257.886 223.747 li
259.246 243.617 li
262.296 244.207 li
cp
.639216 .52549 .545098 rgb
f
262.016 223.747 mo
262.296 244.207 li
259.246 243.617 li
257.886 223.747 li
258.416 223.747 li
258.976 223.747 li
260.716 223.747 li
262.016 223.747 li
cp
.890196 .803922 .760784 rgb
f
256.396 156.067 mo
258.976 223.747 li
258.416 223.747 li
255.296 154.907 li
258.136 154.957 li
258.166 155.637 li
256.396 156.067 li
cp
.32549 .278431 .254902 rgb
f
255.546 142.677 mo
255.886 152.447 li
255.195 152.627 li
254.686 141.387 li
257.636 141.627 li
257.636 142.197 li
255.546 142.677 li
cp
f
255.275 133.807 mo
255.496 139.767 li
254.605 139.717 li
254.346 133.847 li
255.275 133.807 li
cp
f
258.166 155.637 mo
260.716 223.747 li
258.976 223.747 li
256.396 156.067 li
258.166 155.637 li
cp
.54902 .384314 .223529 rgb
f
255.496 139.767 mo
255.275 133.807 li
257.346 133.727 li
257.576 139.967 li
269.886 140.987 li
269.886 142.637 li
257.636 141.627 li
254.686 141.387 li
241.546 140.297 li
241.546 138.637 li
254.605 139.717 li
255.496 139.767 li
cp
f
273.707 148.896 mo
273.595 148.891 273.5 148.979 273.496 149.091 cv
273.229 155.728 271.987 162.323 269.814 168.59 cv
268.725 171.702 267.301 174.758 265.069 177.159 cv
262.869 179.537 259.781 181.23 256.552 181.184 cv
253.323 181.163 250.224 179.517 247.978 177.188 cv
245.702 174.829 244.207 171.808 243.12 168.697 cv
241.61 164.338 240.734 159.761 240.48 155.147 cv
240.822 156.027 241.259 156.87 241.755 157.666 cv
242.268 158.477 242.842 159.244 243.513 159.941 cv
244.188 160.624 245.017 161.231 246.006 161.424 cv
246.997 161.619 248.03 161.298 248.807 160.708 cv
249.594 160.12 250.189 159.303 250.536 158.391 cv
251.219 156.542 250.998 154.563 250.791 152.697 cv
250.642 152.577 li
250.521 152.727 li
250.721 154.592 250.914 156.532 250.254 158.284 cv
249.924 159.139 249.354 159.911 248.619 160.453 cv
247.889 160.999 246.956 161.276 246.07 161.098 cv
245.181 160.921 244.404 160.357 243.761 159.698 cv
243.122 159.027 242.556 158.266 242.062 157.473 cv
241.337 156.299 240.748 155.021 240.415 153.688 cv
240.376 152.163 240.398 150.636 240.5 149.114 cv
240.507 149.002 240.423 148.905 240.311 148.897 cv
240.199 148.889 240.102 148.973 240.093 149.085 cv
240.026 149.997 239.99 150.91 239.973 151.824 cv
239.791 152.19 li
237.586 156.611 237.213 161.667 237.519 166.494 cv
237.832 171.361 238.825 176.124 239.616 180.901 cv
240.448 185.673 241.161 190.465 241.425 195.3 cv
241.708 200.13 241.632 204.982 241.196 209.803 cv
241.319 209.951 li
241.467 209.829 li
241.925 204.996 242.026 200.129 241.772 195.28 cv
241.537 190.428 240.848 185.608 240.043 180.829 cv
239.261 176.046 238.357 171.276 237.996 166.462 cv
237.67 161.892 237.997 157.152 239.887 152.953 cv
239.916 153.119 239.938 153.286 239.975 153.45 cv
240.043 158.685 240.907 163.912 242.579 168.884 cv
243.654 172.047 245.15 175.164 247.5 177.646 cv
249.827 180.096 253.056 181.874 256.545 181.934 cv
258.277 181.948 259.996 181.497 261.517 180.711 cv
263.042 179.928 264.396 178.851 265.547 177.601 cv
267.853 175.076 269.274 171.932 270.353 168.776 cv
272.493 162.435 273.688 155.785 273.902 149.105 cv
273.906 148.994 273.819 148.9 273.707 148.896 cv
cp
.384314 .439216 .439216 rgb
f
274.289 186.8 mo
274.346 183.03 274.722 179.271 275.042 175.503 cv
275.333 171.732 275.479 167.937 275.357 164.152 cv
275.246 160.366 274.907 156.589 274.354 152.845 cv
274.201 152.73 li
274.086 152.884 li
274.607 156.622 274.904 160.39 274.977 164.161 cv
275.058 167.935 274.874 171.702 274.544 175.464 cv
274.275 179.23 273.931 183.004 273.909 186.796 cv
273.879 190.583 274.23 194.403 275.275 198.059 cv
275.443 198.152 li
275.536 197.984 li
274.536 194.352 274.223 190.564 274.289 186.8 cv
cp
f
260.972 146.876 mo
261.347 148.006 li
261.494 148.374 261.699 148.846 262.243 149.019 cv
262.504 149.088 262.79 149.021 262.992 148.896 cv
263.199 148.771 263.354 148.612 263.488 148.45 cv
263.745 148.123 263.961 147.797 264.176 147.456 cv
264.589 146.771 264.927 146.042 265.185 145.287 cv
265.704 143.778 265.879 142.16 265.719 140.58 cv
265.571 140.459 li
265.449 140.606 li
265.576 142.148 265.363 143.716 264.824 145.16 cv
264.557 145.882 264.215 146.575 263.802 147.222 cv
263.592 147.54 263.364 147.862 263.13 148.146 cv
262.896 148.423 262.604 148.614 262.369 148.535 cv
262.127 148.483 261.924 148.164 261.784 147.831 cv
261.644 147.483 261.51 147.105 261.384 146.74 cv
261.133 146.002 260.904 145.257 260.698 144.504 cv
260.286 143 259.973 141.468 259.751 139.921 cv
259.601 139.805 li
259.481 139.957 li
259.669 141.519 259.949 143.071 260.331 144.6 cv
260.521 145.365 260.735 146.124 260.972 146.876 cv
cp
f
249.422 142.93 mo
250.575 142.976 251.627 142.16 251.864 141.089 cv
251.769 140.929 li
251.602 141.023 li
251.337 141.932 250.349 142.565 249.467 142.432 cv
248.582 142.397 247.711 141.612 247.618 140.666 cv
247.477 140.542 li
247.347 140.684 li
247.396 141.774 248.275 142.778 249.422 142.93 cv
cp
f
245.748 148.595 mo
246.205 147.878 246.4 147.026 246.444 146.195 cv
246.484 145.359 246.406 144.529 246.293 143.717 cv
246.143 142.915 245.984 142.123 245.925 141.325 cv
245.866 140.532 245.913 139.724 246.193 138.982 cv
246.119 138.809 li
245.941 138.882 li
245.614 139.66 245.522 140.516 245.544 141.344 cv
245.565 142.175 245.689 142.992 245.8 143.797 cv
245.947 144.591 246.076 145.387 246.064 146.182 cv
246.057 146.973 245.91 147.771 245.516 148.454 cv
245.56 148.637 li
245.748 148.595 li
cp
f
59.8457 141.107 mo
59.1938 163.197 li
60.3862 163.197 li
61.812 163.197 li
62.5386 141.06 li
59.8457 141.107 li
cp
.490196 .176471 .270588 rgb
f
61.2153 94.6802 mo
59.9766 136.588 li
62.6875 136.532 li
64.0664 94.7271 li
64.0664 94.7178 li
61.2153 94.6802 li
cp
f
64.8584 70.605 mo
64.7559 73.6797 li
75.2935 73.6797 li
75.6846 70.6611 li
64.8584 70.605 li
cp
f
46.4946 70.5029 mo
46.5317 73.6797 li
61.8306 73.6797 li
61.9238 70.5864 li
46.5039 70.5029 li
46.4946 70.5029 li
cp
f
61.8306 73.6797 mo
61.3647 89.4907 li
64.2344 89.5562 li
64.7559 73.6797 li
64.8584 70.605 li
66.3306 25.8184 li
63.2373 25.8184 li
61.9238 70.5864 li
61.8306 73.6797 li
cp
f
113.829 171.201 mo
113.67 175.589 li
117.341 175.691 li
117.481 171.685 li
118.571 140.147 li
114.956 140.203 li
113.829 171.201 li
cp
f
116.586 95.5562 mo
115.133 135.358 li
118.739 135.284 li
120.108 95.6118 li
116.586 95.5562 li
cp
f
117.956 58.0552 mo
116.754 90.814 li
120.267 90.8975 li
121.403 58.0552 li
117.956 58.0552 li
cp
f
157.768 42.2725 mo
157.684 45.9341 li
176.467 46.3999 li
176.467 43.0737 li
157.768 42.2725 li
cp
f
131.829 41.1636 mo
131.829 45.3003 li
151.693 45.7847 li
151.767 42.0205 li
131.829 41.1636 li
cp
.894118 .384314 .301961 rgb
f
44.2866 56.9468 mo
45.647 163.197 li
47.5474 163.197 li
47.2959 141.312 li
47.2495 136.877 li
46.7744 94.4473 li
46.709 89.1367 li
46.5317 73.6797 li
46.4946 70.5029 li
46.3457 56.9468 li
44.2866 56.9468 li
cp
.490196 .176471 .270588 rgb
f
49.2524 163.197 mo
49.8579 164.548 li
53.1284 164.548 li
52.5322 163.197 li
49.2524 163.197 li
cp
.639216 .52549 .545098 rgb
f
61.812 163.197 mo
60.3862 163.197 li
62.2871 169.626 li
64.7837 169.626 li
63.0601 163.197 li
61.812 163.197 li
cp
f
116.763 178.421 mo
117.714 181.282 li
120.155 181.282 li
119.176 179.148 li
118.841 178.421 li
116.763 178.421 li
cp
f
80.1011 174.732 mo
78.3403 174.732 li
80.0732 178.58 li
81.6943 178.58 li
83.6973 183.416 li
86.5483 183.416 li
84.5454 178.58 li
83.3433 178.58 li
81.7314 174.732 li
82.9614 174.732 li
81.9365 172.253 li
80.8462 169.626 li
77.9863 169.626 li
80.1011 174.732 li
cp
f
155.392 26.8901 mo
152.671 162.005 li
152.708 162.005 li
154.944 162.005 li
155.177 152.194 li
155.476 139.542 li
155.597 134.455 li
156.5 96.1802 li
156.603 91.7642 li
157.684 45.9341 li
157.768 42.2725 li
158.131 26.8901 li
155.392 26.8901 li
cp
.490196 .176471 .270588 rgb
f
155.597 134.455 mo
155.476 139.542 li
210.912 138.628 li
211.107 133.215 li
155.597 134.455 li
cp
f
156.603 91.7642 mo
156.5 96.1802 li
212.393 97.0654 li
212.533 93.106 li
156.603 91.7642 li
cp
f
215.877 56.9468 mo
212.234 155.11 li
215.877 155.11 li
220.238 56.9468 li
215.877 56.9468 li
cp
f
210.912 138.628 mo
210.325 155.11 li
212.234 155.11 li
215.877 56.9468 li
213.818 56.9468 li
212.533 93.106 li
212.393 97.0654 li
211.107 133.215 li
210.912 138.628 li
cp
.894118 .384314 .301961 rgb
f
39.9263 56.9468 mo
42.0039 163.197 li
45.647 163.197 li
44.2866 56.9468 li
39.9263 56.9468 li
cp
f
59.9766 136.588 mo
47.2495 136.877 li
47.2959 141.312 li
47.3052 141.312 li
59.8457 141.107 li
62.5386 141.06 li
114.956 140.203 li
118.571 140.147 li
149.838 139.635 li
149.932 134.585 li
118.739 135.284 li
115.133 135.358 li
62.6875 136.532 li
59.9766 136.588 li
cp
f
46.709 89.1367 mo
46.7744 94.4473 li
61.2153 94.6802 li
64.0664 94.7178 li
116.586 95.5562 li
120.108 95.6118 li
150.696 96.0967 li
150.78 91.6338 li
120.267 90.8975 li
116.754 90.814 li
64.2344 89.5562 li
61.3647 89.4907 li
46.7183 89.1367 li
46.709 89.1367 li
cp
f
150.78 91.6338 mo
150.696 96.0967 li
149.932 134.585 li
149.838 139.635 li
149.587 152.194 li
149.392 162.005 li
152.671 162.005 li
155.392 26.8901 li
152.065 26.8901 li
151.767 42.0205 li
151.693 45.7847 li
150.78 91.6338 li
cp
f
98.856 178.813 mo
98.9028 178.841 li
99.1636 178.421 li
116.763 178.421 li
118.841 178.421 li
119.176 179.148 li
128.484 179.297 li
128.987 176.018 li
117.341 175.691 li
113.67 175.589 li
82.9614 174.732 li
81.7314 174.732 li
83.3433 178.58 li
84.5454 178.58 li
98.856 178.813 li
cp
f
176.411 178.067 mo
163.74 178.067 li
163.74 181.636 li
174.333 181.636 li
174.724 180.564 li
179.923 180.564 li
189.557 180.564 li
190.051 178.067 li
183.221 178.067 li
176.411 178.067 li
cp
.490196 .176471 .270588 rgb
f
201.604 155.11 mo
200.635 157.607 li
205.377 157.607 li
206.439 155.11 li
201.604 155.11 li
cp
.890196 .803922 .760784 rgb
f
192.65 173.828 mo
190.898 173.828 li
190.051 178.067 li
189.557 180.564 li
192.408 180.564 li
193.479 174.145 li
195.734 174.145 li
197.644 157.607 li
194.393 157.607 li
194.029 160.98 li
192.65 173.828 li
cp
f
174.724 180.564 mo
174.333 181.636 li
175.283 181.636 li
175.991 183.416 li
179.084 183.416 li
179.923 180.564 li
174.724 180.564 li
cp
f
168.007 186.825 mo
167.774 207.127 li
169.423 207.127 li
169.656 186.825 li
168.007 186.825 li
cp
f
183.221 186.825 mo
182.988 207.127 li
184.628 207.127 li
184.861 186.825 li
183.221 186.825 li
cp
f
198.436 186.825 mo
198.203 207.127 li
199.843 207.127 li
200.076 186.825 li
198.436 186.825 li
cp
f
212.169 186.825 mo
211.675 207.127 li
213.325 207.127 li
213.818 186.825 li
212.169 186.825 li
cp
f
212.234 160.98 mo
211.759 181.282 li
213.343 181.282 li
213.818 160.98 li
212.234 160.98 li
cp
f
45.5537 186.825 mo
46.1499 207.127 li
48.1533 207.127 li
47.5474 186.825 li
45.5537 186.825 li
cp
.639216 .52549 .545098 rgb
f
62.8555 186.825 mo
63.4517 220.292 li
65.4546 220.292 li
64.8491 186.825 li
62.8555 186.825 li
cp
f
80.1567 186.825 mo
80.7534 207.127 li
82.7563 207.127 li
82.1509 186.825 li
80.1567 186.825 li
cp
f
96.853 186.825 mo
97.1416 207.127 li
99.1357 207.127 li
98.856 186.825 li
96.853 186.825 li
cp
f
115.347 186.825 mo
115.626 207.127 li
117.63 207.127 li
117.341 186.825 li
115.347 186.825 li
cp
f
133.832 186.825 mo
134.121 207.127 li
136.115 207.127 li
135.835 186.825 li
133.832 186.825 li
cp
f
211.759 181.282 mo
213.343 181.282 li
213.818 160.98 li
212.234 160.98 li
204.101 160.98 li
204.324 181.282 li
211.759 181.282 li
cp
211.675 207.127 mo
213.325 207.127 li
213.818 186.825 li
212.169 186.825 li
203.719 186.825 li
203.961 207.127 li
211.675 207.127 li
cp
198.203 207.127 mo
199.843 207.127 li
200.076 186.825 li
198.436 186.825 li
188.513 186.825 li
188.747 207.127 li
198.203 207.127 li
cp
182.988 207.127 mo
184.628 207.127 li
184.861 186.825 li
183.221 186.825 li
173.299 186.825 li
173.532 207.127 li
182.988 207.127 li
cp
167.774 207.127 mo
169.423 207.127 li
169.656 186.825 li
168.007 186.825 li
158.131 186.825 li
158.447 207.127 li
167.774 207.127 li
cp
212.234 155.11 mo
215.877 155.11 li
220.238 155.11 li
218.095 220.292 li
152.075 220.292 li
152.708 162.005 li
154.944 162.005 li
156.491 162.005 li
158.038 168.08 li
164.932 168.08 li
165.528 176.875 li
163.74 176.875 li
163.74 178.067 li
163.74 181.636 li
174.333 181.636 li
175.283 181.636 li
175.991 183.416 li
179.084 183.416 li
179.923 180.564 li
189.557 180.564 li
192.408 180.564 li
193.479 174.145 li
195.734 174.145 li
197.644 157.607 li
200.635 157.607 li
205.377 157.607 li
206.439 155.11 li
210.325 155.11 li
212.234 155.11 li
cp
f
136.115 207.127 mo
147.454 207.127 li
147.835 186.825 li
135.835 186.825 li
133.832 186.825 li
134.121 207.127 li
136.115 207.127 li
cp
117.63 207.127 mo
129.118 207.127 li
129.407 186.825 li
117.341 186.825 li
115.347 186.825 li
115.626 207.127 li
117.63 207.127 li
cp
99.1357 207.127 mo
110.633 207.127 li
110.912 186.825 li
98.856 186.825 li
96.853 186.825 li
97.1416 207.127 li
99.1357 207.127 li
cp
82.7563 207.127 mo
92.1387 207.127 li
92.4272 186.825 li
82.1509 186.825 li
80.1567 186.825 li
80.7534 207.127 li
82.7563 207.127 li
cp
48.1533 207.127 mo
57.5352 207.127 li
57.8242 186.825 li
47.5474 186.825 li
45.5537 186.825 li
46.1499 207.127 li
48.1533 207.127 li
cp
152.708 162.005 mo
152.075 220.292 li
74.8369 220.292 li
75.126 186.825 li
64.8491 186.825 li
62.8555 186.825 li
63.4517 220.292 li
42.0693 220.292 li
39.9263 163.197 li
42.0039 163.197 li
45.647 163.197 li
47.5474 163.197 li
49.2524 163.197 li
49.8579 164.548 li
53.1284 164.548 li
55.1504 164.548 li
55.1504 163.197 li
59.1938 163.197 li
60.3862 163.197 li
62.2871 169.626 li
64.7837 169.626 li
77.9863 169.626 li
80.1011 174.732 li
78.3403 174.732 li
80.0732 178.58 li
81.6943 178.58 li
83.6973 183.416 li
86.5483 183.416 li
96.0703 183.416 li
98.9028 178.841 li
99.1636 178.421 li
116.763 178.421 li
117.714 181.282 li
120.155 181.282 li
128.177 181.282 li
128.484 179.297 li
128.987 176.018 li
129.136 175.067 li
127.114 175.067 li
127.581 172.253 li
128.177 168.667 li
129.965 168.667 li
131.158 162.005 li
134.484 162.005 li
149.392 162.005 li
152.671 162.005 li
152.708 162.005 li
cp
.890196 .803922 .760784 rgb
f
131.979 200.567 mo
134.028 200.567 li
134.072 203.67 li
131.979 203.67 li
131.979 200.567 li
cp
.831373 .737255 .713726 rgb
f
136.197 218.143 mo
136.197 214.688 li
143.558 214.688 li
143.558 218.143 li
136.197 218.143 li
cp
f
152.263 178.201 mo
152.263 180.549 li
144.98 180.549 li
144.98 177.131 li
148.898 177.131 li
148.898 174.771 li
152.569 174.771 li
152.532 178.201 li
152.263 178.201 li
cp
f
147.561 168.25 mo
152.641 168.25 li
152.604 171.542 li
147.561 171.542 li
147.561 168.25 li
cp
f
53.6406 210.958 mo
60.3223 210.958 li
60.3223 214.093 li
53.6406 214.093 li
53.6406 210.958 li
cp
f
45.647 190 mo
40.9321 190 li
40.8169 186.931 li
45.5566 186.931 li
45.647 190 li
cp
f
54.1045 171.771 mo
47.0483 171.771 li
47.0483 168.46 li
54.1045 168.46 li
54.1045 171.771 li
cp
f
41.3311 200.626 mo
45.959 200.626 li
46.0601 204.068 li
41.46 204.068 li
41.3311 200.626 li
cp
f
75.9814 212.046 mo
82.6548 212.046 li
82.6548 215.178 li
75.9814 215.178 li
75.9814 212.046 li
cp
f
88.4448 220.292 mo
88.4448 217.368 li
94.7012 217.368 li
94.7012 220.292 li
88.4448 220.292 li
cp
f
71.5112 178.458 mo
64.9834 178.458 li
64.9834 175.395 li
71.5112 175.395 li
71.5112 178.458 li
cp
f
113.167 203.106 mo
115.571 203.106 li
115.613 206.16 li
113.167 206.16 li
113.167 203.106 li
cp
f
145.627 209.082 mo
152.197 209.082 li
152.162 212.256 li
145.627 212.256 li
145.627 209.082 li
cp
f
101.454 215.054 mo
101.454 212.016 li
107.929 212.016 li
107.929 215.054 li
101.454 215.054 li
cp
f
119.972 210.596 mo
119.972 207.378 li
126.83 207.378 li
126.83 210.596 li
119.972 210.596 li
cp
f
119.176 179.148 mo
120.155 181.282 li
128.177 181.282 li
128.484 179.297 li
119.176 179.148 li
cp
.27451 .219608 .301961 rgb
f
84.5454 178.58 mo
86.5483 183.416 li
96.0703 183.416 li
98.9028 178.841 li
98.856 178.813 li
84.5454 178.58 li
cp
f
158.131 186.825 mo
158.447 207.127 li
167.774 207.127 li
168.007 186.825 li
158.131 186.825 li
cp
f
173.299 186.825 mo
173.532 207.127 li
182.988 207.127 li
183.221 186.825 li
173.299 186.825 li
cp
f
188.513 186.825 mo
188.747 207.127 li
198.203 207.127 li
198.436 186.825 li
188.513 186.825 li
cp
f
203.719 186.825 mo
203.961 207.127 li
211.675 207.127 li
212.169 186.825 li
203.719 186.825 li
cp
f
204.101 160.98 mo
204.324 181.282 li
211.759 181.282 li
212.234 160.98 li
204.101 160.98 li
cp
f
135.835 186.825 mo
136.115 207.127 li
147.454 207.127 li
147.835 186.825 li
135.835 186.825 li
cp
f
117.341 186.825 mo
117.63 207.127 li
129.118 207.127 li
129.407 186.825 li
117.341 186.825 li
cp
f
98.856 186.825 mo
99.1357 207.127 li
110.633 207.127 li
110.912 186.825 li
98.856 186.825 li
cp
f
82.1509 186.825 mo
82.7563 207.127 li
92.1387 207.127 li
92.4272 186.825 li
82.1509 186.825 li
cp
f
64.8491 186.825 mo
65.4546 220.292 li
74.8369 220.292 li
75.126 186.825 li
64.8491 186.825 li
cp
f
47.5474 186.825 mo
48.1533 207.127 li
57.5352 207.127 li
57.8242 186.825 li
47.5474 186.825 li
cp
f
186.52 175.57 mo
184.144 175.57 li
183.221 178.067 li
190.051 178.067 li
190.898 173.828 li
192.65 173.828 li
194.029 160.98 li
190.507 160.98 li
186.52 175.57 li
cp
f
155.177 152.194 mo
154.944 162.005 li
156.491 162.005 li
158.038 168.08 li
164.932 168.08 li
165.528 176.875 li
163.74 176.875 li
163.74 178.067 li
176.411 178.067 li
172.423 163.738 li
163.069 163.142 li
158.988 152.194 li
155.177 152.194 li
cp
f
139.543 159.75 mo
135.015 159.983 li
134.484 162.005 li
149.392 162.005 li
149.587 152.194 li
142.152 152.194 li
139.543 159.75 li
cp
f
127.114 175.067 mo
127.581 172.253 li
117.481 171.685 li
117.341 175.691 li
128.987 176.018 li
129.136 175.067 li
127.114 175.067 li
cp
f
82.9614 174.732 mo
113.67 175.589 li
113.829 171.201 li
112.636 171.201 li
111.173 163.039 li
108.396 162.843 li
107.167 156.583 li
99.4805 156.583 li
95.3901 165.499 li
87.9365 166.412 li
87.0234 172.253 li
81.9365 172.253 li
82.9614 174.732 li
cp
f
146.023 90.4287 mo
146.147 90.9932 146.264 91.5596 146.396 92.1226 cv
146.702 93.2988 146.866 94.437 147.373 95.7031 cv
147.635 96.3169 148.012 96.9785 148.67 97.4644 cv
149.316 97.9531 150.2 98.1382 150.995 97.9702 cv
151.474 97.8604 151.888 97.6577 152.257 97.4175 cv
152.107 99.3892 151.871 101.339 151.403 103.225 cv
151.067 104.606 150.596 105.941 149.991 107.203 cv
149.843 107.52 149.665 107.821 149.504 108.13 cv
149.341 108.413 149.159 108.682 148.96 108.919 cv
148.565 109.398 148.086 109.719 147.7 109.716 cv
147.3 109.743 146.914 109.495 146.582 108.999 cv
146.25 108.509 146.051 107.893 145.88 107.211 cv
145.544 105.87 145.429 104.459 145.419 103.031 cv
145.436 100.174 145.684 97.2124 145.815 94.2959 cv
146.023 90.4287 li
cp
144.087 42.0034 mo
142.741 51.5107 142.419 61.1665 143.114 70.7544 cv
143.46 75.5483 144.059 80.3267 144.927 85.0576 cv
144.947 85.1665 144.97 85.2749 144.991 85.3838 cv
144.421 94.2134 li
144.138 98.5996 li
144.046 100.059 143.935 101.532 143.929 103.034 cv
143.924 104.533 144.027 106.066 144.387 107.575 cv
144.565 108.311 144.795 109.121 145.28 109.859 cv
145.52 110.228 145.836 110.589 146.258 110.874 cv
146.686 111.151 147.226 111.326 147.757 111.299 cv
148.87 111.243 149.641 110.547 150.165 109.921 cv
150.433 109.595 150.66 109.252 150.859 108.9 cv
151.036 108.558 151.227 108.225 151.386 107.877 cv
152.043 106.494 152.53 105.042 152.856 103.57 cv
153.421 101.067 153.622 98.54 153.739 96.0366 cv
153.899 95.8398 154.058 95.6426 154.2 95.4365 cv
154.905 94.3462 155.448 93.3257 156.025 92.2388 cv
157.146 90.0869 158.126 87.8652 158.961 85.5938 cv
160.637 81.0508 161.782 76.333 162.501 71.5674 cv
163.945 62.0166 163.706 52.3506 163.073 42.8008 cv
162.214 42.8545 li
162.761 52.3823 162.84 61.9878 161.28 71.374 cv
160.499 76.0566 159.323 80.6743 157.635 85.0942 cv
156.792 87.3042 155.812 89.4585 154.698 91.5381 cv
154.423 92.0444 154.136 92.5664 153.842 93.0757 cv
153.991 87.7437 153.993 82.4097 153.821 77.0835 cv
153.471 65.3423 152.426 53.6455 151.152 41.9897 cv
150.296 42.0796 li
151.456 53.7349 152.384 65.4165 152.618 77.1138 cv
152.75 82.9614 152.681 88.8101 152.427 94.6479 cv
152.418 94.8438 152.405 95.0386 152.395 95.2344 cv
151.867 95.8252 151.258 96.2988 150.67 96.4199 cv
149.896 96.6016 149.197 96.0786 148.798 95.0942 cv
148.399 94.1387 148.166 92.8979 147.847 91.7681 cv
147.261 89.5264 146.766 87.2622 146.316 84.9888 cv
146.761 76.7402 li
148.665 41.6294 li
147.806 41.5786 li
145.554 76.6685 li
145.37 79.5137 li
144.922 76.5752 144.563 73.6226 144.313 70.6597 cv
143.512 61.166 143.715 51.5811 144.939 42.1196 cv
144.087 42.0034 li
cp
.384314 .439216 .439216 rgb
f
140.472 82.8037 mo
140.253 41.8979 li
141.113 41.8857 li
142.055 82.7808 li
142.095 93.0083 li
142.114 96.4185 142.113 99.8359 142.021 103.255 cv
141.837 110.086 141.239 116.961 139.578 123.63 cv
138.742 123.428 li
140.271 116.821 140.75 110.019 140.818 103.231 cv
140.888 96.439 140.601 89.6196 140.472 82.8037 cv
cp
f
181.971 92.3237 mo
181.242 97.9912 181.478 103.774 182.677 109.343 cv
183.275 112.127 184.096 114.862 185.166 117.496 cv
185.683 118.823 186.25 120.111 187.085 121.093 cv
187.913 122.082 189.01 122.608 190.217 122.506 cv
191.428 122.428 192.632 121.825 193.541 120.906 cv
194.474 119.984 195.182 118.792 195.808 117.535 cv
197.063 114.995 198.074 112.324 198.857 109.592 cv
200.41 104.119 200.956 98.3452 200.421 92.6592 cv
201.276 92.5698 li
201.908 98.3525 201.508 104.258 200.05 109.914 cv
199.318 112.741 198.329 115.502 197.083 118.155 cv
196.451 119.481 195.707 120.829 194.605 121.964 cv
193.512 123.104 192.006 123.944 190.331 124.086 cv
189.499 124.152 188.607 124.01 187.835 123.624 cv
187.061 123.246 186.425 122.667 185.931 122.04 cv
184.946 120.77 184.396 119.349 183.885 117.996 cv
182.84 115.267 182.054 112.445 181.498 109.583 cv
180.384 103.858 180.263 97.9546 181.12 92.2036 cv
181.971 92.3237 li
cp
f
162.263 91.375 mo
161.922 94.6787 162.25 98.0474 163.207 101.22 cv
164.125 98.1685 164.393 94.9209 164.651 91.6831 cv
164.651 91.6831 li
164.652 91.6763 li
165.778 91.7798 li
165.778 91.7871 li
165.364 96.2505 166.217 100.813 168.166 104.833 cv
169.473 103.21 170.302 101.193 170.772 99.1182 cv
171.331 96.6162 171.982 94.1738 172.038 91.7363 cv
173.563 91.627 li
174.538 96.8184 174.974 102.094 175.11 107.351 cv
175.256 112.612 175.107 117.863 174.889 123.098 cv
173.528 154.479 li
172.668 154.448 li
173.619 123.054 li
173.76 117.827 173.859 112.604 173.651 107.399 cv
173.53 103.847 173.217 100.312 172.765 96.7974 cv
172.553 97.6816 172.336 98.5566 172.133 99.436 cv
171.521 101.988 170.396 104.522 168.473 106.456 cv
167.43 106.302 li
166.188 103.91 165.344 101.327 164.895 98.6777 cv
164.605 100.13 164.219 101.568 163.67 102.969 cv
162.735 102.958 li
161.412 99.228 160.957 95.2031 161.409 91.2813 cv
162.263 91.375 li
cp
f
97.8027 111.099 mo
97.9951 110.84 98.188 110.582 98.3774 110.323 cv
101.244 106.34 103.723 101.955 105.273 97.2358 cv
105.2 100.185 104.907 103.128 104.363 106.031 cv
103.912 108.463 103.299 110.867 102.524 113.217 cv
102.128 114.389 101.707 115.553 101.238 116.699 cv
100.879 117.555 li
100.755 117.847 100.645 118.132 100.524 118.332 cv
100.406 118.544 100.258 118.686 100.197 118.707 cv
100.135 118.721 100.114 118.737 100.021 118.667 cv
99.9199 118.589 99.7842 118.388 99.687 118.155 cv
99.5884 117.935 99.5068 117.632 99.4126 117.331 cv
99.2334 116.736 99.042 116.146 98.8828 115.545 cv
98.5449 114.351 98.2358 113.147 97.9678 111.935 cv
97.9053 111.658 97.8618 111.376 97.8027 111.099 cv
cp
59.3086 89.3452 mo
59.5742 92.8325 60.5356 96.2217 61.8213 99.4346 cv
63.1084 102.655 64.7095 105.722 66.3389 108.749 cv
67.9722 111.757 69.5933 114.873 72.0059 117.481 cv
73.1987 118.784 74.6338 119.91 76.2632 120.691 cv
76.5508 120.828 76.8501 120.934 77.1479 121.044 cv
77.1606 121.285 77.1841 121.524 77.1934 121.765 cv
77.3486 125.255 77.1797 128.769 76.3594 132.159 cv
77.1919 132.375 li
78.1499 128.91 78.439 125.297 78.396 121.732 cv
78.3945 121.629 78.3877 121.526 78.3857 121.423 cv
79.1304 121.606 79.8877 121.716 80.6499 121.755 cv
80.6973 122.337 80.7583 122.917 80.7954 123.499 cv
81.2944 129.105 81.5161 134.744 81.3564 140.379 cv
81.21 146.013 80.7446 151.642 79.9604 157.23 cv
80.811 157.359 li
81.7129 151.755 82.2959 146.098 82.5591 140.421 cv
82.8066 134.745 82.7622 129.05 82.374 123.374 cv
82.3281 122.828 82.2603 122.287 82.2056 121.743 cv
85.5645 121.526 88.7539 120.089 91.3394 118.049 cv
93.4204 116.438 95.165 114.499 96.7588 112.468 cv
97.0088 113.62 97.2905 114.765 97.6016 115.901 cv
97.7588 116.515 97.9482 117.119 98.126 117.726 cv
98.3135 118.291 98.4287 119.055 99.1523 119.717 cv
99.5308 120.063 100.216 120.208 100.734 119.968 cv
101.255 119.732 101.514 119.352 101.712 119.032 cv
101.914 118.692 102.027 118.389 102.151 118.106 cv
102.527 117.231 li
103.018 116.06 103.461 114.87 103.878 113.67 cv
104.694 111.266 105.344 108.804 105.829 106.311 cv
106.791 101.324 107.126 96.2002 106.678 91.1309 cv
105.131 91.0923 li
104.678 94.4097 103.717 97.6631 102.355 100.752 cv
101.022 103.749 99.3501 106.601 97.4468 109.294 cv
97.1582 107.733 96.9033 106.167 96.7212 104.589 cv
96.1509 99.6519 96.1055 94.6509 96.5967 89.7002 cv
96.5972 89.6934 li
95.5 89.5859 li
95.4995 89.5933 li
95.499 89.5933 li
95.2754 92.1528 94.9097 94.7007 94.4038 97.2207 cv
94.1519 98.4814 93.8613 99.7339 93.5376 100.979 cv
93.3755 101.6 93.207 102.221 93.0264 102.838 cv
92.9321 103.16 92.8608 103.441 92.7417 103.678 cv
92.6294 103.919 92.4614 104.129 92.3389 104.188 cv
92.2339 104.241 92.1382 104.23 92.0293 104.12 cv
91.9102 103.999 91.8022 103.736 91.7314 103.458 cv
91.5806 102.847 91.4346 102.214 91.3066 101.588 cv
91.0488 100.333 90.8418 99.0664 90.687 97.7935 cv
90.377 95.2471 90.2832 92.6748 90.394 90.1113 cv
89.5347 90.0698 li
89.4033 92.6802 89.4805 95.3018 89.7783 97.8999 cv
89.9272 99.1992 90.1289 100.492 90.3833 101.775 cv
90.5107 102.419 90.6509 103.05 90.8062 103.697 cv
90.9004 104.039 91.0044 104.414 91.3242 104.776 cv
91.6401 105.158 92.3101 105.322 92.7817 105.051 cv
93.2368 104.8 93.4458 104.438 93.6191 104.108 cv
93.792 103.764 93.8809 103.414 93.9712 103.116 cv
94.1602 102.492 94.3364 101.864 94.5068 101.235 cv
94.7334 100.393 94.939 99.5449 95.1343 98.6948 cv
95.1777 100.708 95.2822 102.722 95.4961 104.726 cv
95.7104 106.735 96.0342 108.732 96.4189 110.717 cv
94.6826 113.054 92.813 115.281 90.5586 117.051 cv
88.1201 119.006 85.1689 120.344 82.0835 120.559 cv
81.5674 115.844 80.8267 111.177 80.376 106.508 cv
79.8315 100.928 79.8022 95.2329 81.3394 89.8438 cv
80.5146 89.5991 li
78.8486 95.1147 78.7319 100.95 79.145 106.61 cv
79.481 111.306 80.1309 115.94 80.5518 120.575 cv
79.8037 120.532 79.0659 120.41 78.3457 120.215 cv
78.2363 117.157 77.9653 114.116 77.6704 111.1 cv
77.2109 107.598 76.7725 104.111 76.6357 100.617 cv
76.499 97.1299 76.7002 93.6138 77.6001 90.2437 cv
76.7715 90.0122 li
75.7593 93.4614 75.4004 97.0703 75.4004 100.64 cv
75.3975 104.216 75.7544 107.763 76.0967 111.28 cv
76.4697 114.12 76.856 116.947 77.0679 119.779 cv
76.9619 119.734 76.8511 119.702 76.7466 119.654 cv
75.272 118.959 73.9443 117.944 72.811 116.725 cv
70.5171 114.291 68.8911 111.257 67.2373 108.26 cv
65.5884 105.255 63.9824 102.233 62.6943 99.0825 cv
61.4077 95.9385 60.4497 92.6484 60.1655 89.2769 cv
59.3086 89.3452 li
cp
f
51.3467 207.127 mo
52.4678 209.893 54.5464 215.865 54.5464 215.865 cv
54.5464 215.865 51.4341 209.679 50.3408 207.127 cv
51.3467 207.127 li
cp
.639216 .52549 .545098 rgb
f
40.1943 170.342 mo
40.5962 170.005 li
41.2686 170.809 42.1533 171.898 43.0566 173.028 cv
45.3047 173.926 48.6094 175.305 50.7461 176.237 cv
52.3657 177.126 53.8018 177.922 53.6353 177.872 cv
54.2354 178.551 54.8003 179.191 55.1621 179.601 cv
55.25 179.703 55.3257 179.79 55.3862 179.861 cv
55.4946 179.962 li
55.5781 180.013 55.5269 179.994 55.4272 179.949 cv
60.7788 182.861 62.6646 183.887 62.6646 183.887 cv
62.6646 183.887 60.7344 182.918 55.2568 180.17 cv
55.436 180.271 55.4194 180.27 55.3491 180.24 cv
55.1401 180.086 li
55.0752 180.02 54.9946 179.937 54.9009 179.84 cv
54.5366 179.456 53.9683 178.857 53.3647 178.222 cv
53.6479 178.409 52.04 177.598 50.4819 176.812 cv
48.7832 176.206 46.2822 175.271 44.1997 174.47 cv
44.6689 175.068 45.127 175.652 45.5347 176.172 cv
46.041 176.836 46.478 177.41 46.7925 177.822 cv
47.0132 180.587 47.1543 182.521 47.1523 182.876 cv
48.708 185.148 48.9434 185.491 48.9434 185.491 cv
48.9434 185.491 48.6982 185.151 47.0464 182.861 cv
47.0791 183.577 46.7817 181.163 46.4067 177.984 cv
46.3691 177.953 46.2651 177.84 46.1631 177.731 cv
46.062 177.622 45.9536 177.504 45.8384 177.38 cv
45.6099 177.129 45.3555 176.85 45.0825 176.551 cv
44.543 175.946 43.9307 175.26 43.3027 174.558 cv
43.1084 174.337 42.9136 174.115 42.7183 173.893 cv
42.5972 173.845 42.4653 173.794 42.3516 173.749 cv
42.4263 173.561 li
41.6196 172.64 40.8481 171.747 40.2192 171.003 cv
40.1943 170.342 li
cp
f
140.338 162.005 mo
139.499 164.455 138.32 167.809 137.373 170.439 cv
137.117 171.988 136.858 173.554 136.66 174.756 cv
136.555 175.36 136.466 175.874 136.401 176.248 cv
136.366 176.434 136.337 176.585 136.316 176.696 cv
136.282 176.808 li
138.034 179.667 139.752 182.482 139.193 181.657 cv
139.79 183.798 140.287 185.584 140.633 186.825 cv
140.468 186.825 li
140.105 185.617 139.589 183.902 138.973 181.85 cv
138.715 181.497 137.384 179.437 135.763 176.916 cv
135.761 176.89 135.775 176.754 135.791 176.617 cv
135.803 176.505 135.821 176.352 135.842 176.163 cv
135.891 175.787 135.958 175.271 136.036 174.662 cv
136.093 174.242 136.158 173.768 136.226 173.277 cv
134.71 177.558 133.625 180.553 133.699 180.192 cv
133.089 184.587 132.995 185.268 132.995 185.268 cv
132.995 185.268 133.078 184.585 133.617 180.173 cv
133.418 180.594 134.833 176.072 136.604 170.521 cv
136.64 170.261 li
136.751 169.913 136.867 169.555 136.984 169.193 cv
136.942 167.316 136.914 164.547 136.905 162.005 cv
137.786 162.005 li
137.752 163.706 137.708 165.506 137.661 167.113 cv
138.249 165.317 138.843 163.526 139.356 162.005 cv
140.338 162.005 li
cp
f
74.8979 213.204 mo
76.5005 209.604 li
78.0884 206.035 li
79.3574 202.989 li
78.4238 201.101 li
79.1836 198.592 li
77.5942 194.56 li
79.2192 187.618 li
79.8379 178.058 li
79.418 187.613 li
77.9863 194.546 li
79.6787 198.572 li
78.9707 201.074 li
79.9644 203.081 li
78.7607 206.312 li
77.2681 209.927 li
76.3306 212.111 li
77.3813 211.553 li
79.0381 211.968 li
80.019 212.245 li
82.2505 212.581 li
84.7686 212.305 li
85.3472 212.25 li
85.3428 212.29 li
87.6797 210.706 li
85.3843 212.396 li
85.4194 212.408 li
84.8022 212.543 li
82.2593 212.982 li
79.9194 212.875 li
78.8755 212.707 li
77.5117 212.455 li
77.5015 212.466 li
77.3711 212.542 li
77.0933 212.705 li
76.5542 213.016 li
75.7471 213.471 li
74.8784 215.496 li
74.8979 213.204 li
cp
f
110.906 188.921 mo
110.884 188.894 li
110.896 188.03 li
111.046 188.186 111.2 188.346 111.361 188.513 cv
112.068 189.263 112.864 190.108 113.677 190.972 cv
114.266 191.602 114.854 192.236 115.43 192.858 cv
115.449 194.188 li
114.694 193.326 113.889 192.399 113.103 191.488 cv
112.332 190.586 111.577 189.704 110.906 188.921 cv
cp
f
131.027 218.037 mo
131.032 218.172 131.038 218.327 131.043 218.479 cv
131.139 219.118 131.23 219.729 131.314 220.292 cv
130.401 220.292 li
130.333 219.746 130.26 219.158 130.183 218.544 cv
130.186 218.168 130.188 217.782 130.189 217.6 cv
130.324 217.36 130.46 217.117 130.573 216.917 cv
130.671 216.744 130.76 216.589 130.75 216.622 cv
130.874 215.328 131.001 214.006 131.099 212.992 cv
131.207 211.954 131.293 211.242 131.334 211.164 cv
131.424 210.646 131.509 210.162 131.56 209.867 cv
131.6 209.748 131.563 209.69 131.555 209.663 cv
131.605 209.744 li
129.968 205.887 129.483 204.746 129.483 204.746 cv
129.483 204.746 130.02 205.879 131.832 209.713 cv
131.775 209.575 131.761 209.533 131.782 209.57 cv
131.808 209.603 131.883 209.726 131.829 209.908 cv
131.791 210.202 131.728 210.685 131.661 211.2 cv
131.693 211.256 131.681 211.992 131.647 213.03 cv
131.604 214.093 131.547 215.478 131.491 216.834 cv
131.432 216.956 131.22 217.383 131.013 217.8 cv
131.019 217.841 li
131.027 218.037 li
cp
f
105.421 178.421 mo
106.115 179.379 107.188 180.861 108.795 183.079 cv
108.662 182.875 108.676 182.881 108.749 182.971 cv
108.812 183.013 108.853 183.17 108.872 183.28 cv
108.899 183.403 108.933 183.555 108.972 183.732 cv
109.12 184.427 109.349 185.509 109.598 186.685 cv
109.733 186.825 li
109.189 186.825 li
108.977 185.618 108.782 184.509 108.656 183.793 cv
108.583 183.435 108.579 183.163 108.525 183.123 cv
108.458 183.014 108.493 183.049 108.586 183.167 cv
107.043 180.901 106.016 179.392 105.355 178.421 cv
105.421 178.421 li
cp
f
321.613 252.294 mo
321.743 246.499 li
303.681 246.913 li
304.29 262.004 li
321.53 262.21 li
321.613 252.294 li
cp
.27451 .219608 .301961 rgb
f
359.798 254.087 mo
360.183 245.616 li
339.42 246.092 li
339.293 247.624 li
338.643 252.939 li
337.227 254.074 li
333.023 252.507 li
333.034 252.357 li
332.645 246.248 li
323.318 246.462 li
323.531 252.294 li
324.096 262.24 li
359.129 262.657 li
359.798 254.087 li
cp
f
369.968 253.025 mo
372.796 252.428 li
374.388 252.574 li
374.712 247.133 li
374.803 245.28 li
363.651 245.536 li
363.487 255.89 li
362.681 262.699 li
368.62 262.771 li
368.569 259.376 li
369.915 253.66 li
369.886 253.636 li
369.968 253.025 li
cp
f
380.387 245.151 mo
377.962 245.207 li
377.861 248.608 li
376.068 253.894 li
375.677 254.617 li
372.626 255.098 li
371.313 254.589 li
371.219 261.116 li
371.091 262.8 li
379.715 262.902 li
380.387 245.151 li
cp
f
399.622 263.14 mo
400.705 252.107 li
400.787 244.683 li
381.976 245.115 li
382.671 262.938 li
399.622 263.14 li
cp
f
409.389 244.485 mo
409.966 261.329 li
406.902 261.329 li
406.538 254.404 li
405.445 254.414 li
404.079 253.882 li
402.508 263.174 li
417.499 263.353 li
417.722 244.294 li
409.389 244.485 li
cp
f
354.928 147.503 mo
355.519 147.427 li
357.173 162.486 li
358.754 162.486 li
357.891 143.772 li
320.455 144.373 li
322.032 162.486 li
334.839 162.486 li
334.1 152.501 li
336.688 150.607 li
338.188 151.369 li
338.521 152.957 li
339.124 158.991 li
339.185 162.486 li
353.917 162.486 li
354.928 147.503 li
cp
f
376.967 162.486 mo
379.563 143.424 li
360.344 143.732 li
359.986 162.486 li
376.967 162.486 li
cp
f
391.162 143.238 mo
391.221 143.428 li
391.321 150.671 li
389.005 152.35 li
385.126 153.027 li
383.218 162.486 li
401.362 162.486 li
400.906 153.11 li
402.245 150.865 li
405.713 150.95 li
407.946 151.329 li
408.15 151.667 li
408.232 152.83 li
408.279 153.426 li
408.378 153.179 li
408.493 153.194 li
408.695 162.486 li
418.67 162.486 li
418.893 142.792 li
391.162 143.238 li
cp
f
314.159 144.475 mo
299.536 144.709 li
299.536 144.72 li
300.251 162.486 li
314.902 162.486 li
314.159 144.475 li
cp
f
352.021 213.064 mo
352.254 211.813 li
352.268 209.766 li
350.146 209.675 li
350.029 208.846 li
352.437 208.043 li
352.78 206.393 li
352.894 206.393 li
353.252 207.828 li
358.879 207.058 li
362.369 206.322 li
363.34 195.142 li
335.909 194.613 li
335.968 195.059 li
337.414 206.61 li
337.388 212.854 li
352.021 213.064 li
cp
f
379.866 213.464 mo
384.594 213.532 li
385.396 207.133 li
386.355 195.585 li
364.494 195.164 li
364.591 204.325 li
364.794 204.293 li
376.976 204.844 li
379.898 213.387 li
379.866 213.464 li
cp
f
392.214 213.641 mo
393.266 195.719 li
389.114 195.639 li
387.835 213.578 li
392.214 213.641 li
cp
f
399.048 207.154 mo
398.542 206.472 li
394.372 205.758 li
394.143 213.668 li
399.381 213.744 li
399.048 207.154 li
cp
f
413.347 196.106 mo
412.081 213.332 li
411.35 213.237 li
412.379 196.087 li
400.817 195.864 li
401.399 200.894 li
401.393 200.979 li
401.641 202.01 li
401.108 203.614 li
400.504 206.183 li
400.668 213.762 li
418.072 214.012 li
418.283 196.201 li
413.347 196.106 li
cp
f
396.523 197 mo
398.823 197 li
399.028 198.04 li
399.331 196.367 li
399.373 195.837 li
394.181 195.736 li
394.31 201.441 li
395.118 201.363 li
396.523 197 li
cp
f
311.198 194.136 mo
301.526 193.95 li
302.276 212.351 li
310.432 212.468 li
311.198 194.136 li
cp
f
316.2 194.233 mo
312.761 194.167 li
312.231 212.494 li
316.096 212.549 li
316.2 194.233 li
cp
f
317.795 194.264 mo
317.229 212.565 li
333.632 212.801 li
333.366 204.925 li
332.511 205.133 li
326.996 205.73 li
324.854 204.572 li
324.308 194.389 li
317.795 194.264 li
cp
f
383.566 298.014 mo
384.298 291.615 li
369.669 291.926 li
369.692 293.675 li
368.99 302.26 li
367.139 302.021 li
366.959 292.884 li
367.041 291.981 li
305.565 293.289 li
306.128 307.277 li
306.128 307.288 li
319.788 307.505 li
318.796 305.515 li
321.369 301.2 li
321.402 301.197 li
321.401 301.196 li
321.467 301.114 li
321.714 301.168 li
330.183 301.641 li
350.445 298.9 li
352.528 300.883 li
352.163 306.065 li
352.899 306.8 li
353.568 308.042 li
382.3 308.498 li
383.566 298.014 li
cp
f
391.996 300.235 mo
391.632 300.207 li
386.394 299.579 li
383.734 308.521 li
395.659 308.711 li
396.541 300.758 li
396.55 300.663 li
395.22 300.567 li
391.996 300.235 li
cp
f
408.125 308.908 mo
409.358 291.082 li
398.95 291.304 li
400.295 300.758 li
400.679 308.79 li
408.125 308.908 li
cp
f
410.82 291.051 mo
408.99 308.922 li
416.973 309.049 li
417.183 290.915 li
410.82 291.051 li
cp
f
438.924 158.301 mo
437.075 157.829 li
436.099 156.609 li
435.748 141.427 li
420.918 142.748 li
420.637 162.486 li
438.716 162.486 li
438.924 158.301 li
cp
f
448.763 140.268 mo
441.482 140.916 li
441.329 141.753 li
440.774 151.543 li
440.529 162.486 li
447.021 162.486 li
447.262 161.117 li
448.763 140.268 li
cp
f
450.096 140.149 mo
449.988 147.244 li
449.887 151.939 li
449.964 156.582 li
449.855 162.486 li
457.327 162.486 li
457.959 139.449 li
450.096 140.149 li
cp
f
443.115 195.619 mo
442.728 214.37 li
455.922 214.558 li
456.438 195.231 li
443.115 195.619 li
cp
f
431.387 207.652 mo
432.306 195.934 li
421.187 196.257 li
420.18 196.235 li
419.935 214.045 li
430.625 214.197 li
431.387 207.652 li
cp
f
433.509 195.898 mo
433.063 214.232 li
439.178 214.319 li
441.956 195.653 li
433.509 195.898 li
cp
f
430.998 290.623 mo
426.967 290.71 li
428.718 309.233 li
431.379 309.276 li
430.998 290.623 li
cp
f
431.401 290.615 mo
432.893 309.301 li
453.347 309.629 li
453.874 290.136 li
431.401 290.615 li
cp
f
425.829 290.733 mo
418.881 290.882 li
418.623 309.071 li
426.065 309.19 li
425.829 290.733 li
cp
f
419.793 298.094 mo
419.195 298.094 li
419.195 297.981 li
419.793 297.981 li
419.793 298.094 li
cp
f
419.595 244.25 mo
419.513 244.25 li
419.255 263.375 li
434.827 263.562 li
434.799 249.092 li
436.471 249.092 li
436.978 263.588 li
445.5 263.689 li
446.998 253.978 li
447.757 242.239 li
419.595 244.25 li
cp
f
450.048 242.075 mo
449.741 251.611 li
447.974 263.72 li
454.588 263.799 li
455.185 241.708 li
450.048 242.075 li
cp
f
451.638 336.456 mo
451.157 367.942 li
441.827 367.942 li
443.079 336.456 li
451.638 336.456 li
cp
f
439.896 336.456 mo
439.427 367.942 li
430.084 367.942 li
431.349 336.456 li
439.896 336.456 li
cp
f
428.152 336.456 mo
427.685 367.942 li
418.342 367.942 li
419.606 336.456 li
428.152 336.456 li
cp
f
416.41 336.456 mo
415.942 367.942 li
390.982 367.942 li
391.802 336.456 li
416.41 336.456 li
cp
f
388.617 336.456 mo
388.57 367.942 li
363.81 367.942 li
364.196 336.456 li
388.617 336.456 li
cp
f
361.012 336.456 mo
361.409 367.942 li
336.637 367.942 li
336.602 336.456 li
361.012 336.456 li
cp
f
333.405 336.456 mo
334.237 367.942 li
309.266 367.942 li
308.797 336.456 li
333.405 336.456 li
cp
f
457.327 90.208 mo
423.306 95.0449 li
423.657 73.8018 li
457.327 68.4854 li
457.327 90.208 li
cp
457.327 23.4351 mo
457.327 64.6958 li
423.751 68.4854 li
423.739 68.4854 li
424.371 29.8774 li
419.771 29.8774 li
418.928 95.0449 li
379.333 92.9829 li
378.736 77.1455 li
404.551 77.647 li
404.844 73.8018 li
378.619 73.7905 li
376.992 29.8774 li
372.379 29.8774 li
374.159 73.7905 li
367.79 73.7905 li
368.235 76.9336 li
374.299 77.0562 li
374.932 92.7603 li
359.115 91.9355 li
359.536 73.8018 li
354.924 73.8018 li
354.631 91.7012 li
340.758 90.9771 li
338.92 57.1504 li
334.308 57.1504 li
336.31 90.7427 li
325.937 90.208 li
325.937 93.4399 li
336.508 94.0752 li
337.772 115.251 li
342.081 115.251 li
340.945 94.3315 li
354.572 95.1455 li
354.245 115.251 li
358.564 115.251 li
359.033 95.4126 li
375.084 96.3711 li
375.845 115.251 li
380.153 115.251 li
379.462 96.6274 li
418.881 98.9795 li
418.67 115.251 li
421.292 115.251 li
422.979 115.251 li
423.235 99.6924 li
457.327 94.4766 li
457.327 115.251 li
462.033 115.251 li
464.035 23.4351 li
457.327 23.4351 li
cp
.384314 .439216 .439216 rgb
f
297.043 68.7749 mo
299.536 115.251 li
304.021 115.251 li
301.526 68.7749 li
297.043 68.7749 li
cp
f
299.536 144.72 mo
300.251 162.486 li
298.553 162.486 li
297.839 144.743 li
299.536 144.709 li
299.536 144.72 li
cp
f
314.709 144.474 mo
315.299 162.486 li
313.567 162.486 li
312.971 144.499 li
314.693 144.465 li
314.709 144.474 li
cp
f
329.882 144.227 mo
330.348 162.486 li
328.582 162.486 li
328.103 144.255 li
329.85 144.222 li
329.882 144.227 li
cp
f
345.055 143.98 mo
345.396 162.486 li
343.597 162.486 li
343.234 144.011 li
345.006 143.978 li
345.055 143.98 li
cp
f
360.228 143.734 mo
360.443 162.486 li
358.611 162.486 li
358.365 143.768 li
360.163 143.734 li
360.228 143.734 li
cp
f
375.399 143.487 mo
375.492 162.486 li
373.626 162.486 li
373.497 143.523 li
375.319 143.49 li
375.399 143.487 li
cp
f
390.572 143.241 mo
390.54 162.486 li
388.641 162.486 li
388.629 143.28 li
390.476 143.247 li
390.572 143.241 li
cp
f
405.745 142.994 mo
405.589 162.486 li
403.655 162.486 li
403.761 143.036 li
405.632 143.002 li
405.745 142.994 li
cp
f
420.918 142.748 mo
420.637 162.486 li
418.67 162.486 li
418.893 142.792 li
420.789 142.759 li
420.918 142.748 li
cp
f
428.659 141.957 mo
430.533 141.889 li
430.655 141.878 li
430.274 162.486 li
428.334 162.486 li
428.659 141.957 li
cp
f
438.426 141.121 mo
440.278 141.019 li
440.393 141.009 li
439.913 162.486 li
437.998 162.486 li
438.426 141.121 li
cp
f
448.192 140.285 mo
450.022 140.149 li
450.13 140.14 li
449.551 162.486 li
447.663 162.486 li
448.192 140.285 li
cp
f
459.868 139.27 mo
459.188 162.486 li
457.327 162.486 li
457.959 139.449 li
459.868 139.27 li
cp
f
458.217 195.187 mo
457.644 214.58 li
455.922 214.558 li
456.438 195.231 li
458.217 195.187 li
cp
f
446.46 214.421 mo
446.899 195.474 li
448.708 195.449 li
448.216 214.446 li
446.46 214.421 li
cp
f
436.997 214.285 mo
437.36 195.716 li
439.198 195.711 li
438.789 214.313 li
436.997 214.285 li
cp
f
427.535 214.148 mo
427.822 195.959 li
429.689 195.973 li
429.361 214.179 li
427.535 214.148 li
cp
f
418.072 214.012 mo
418.283 196.201 li
420.18 196.235 li
419.935 214.045 li
418.072 214.012 li
cp
f
405.349 195.949 mo
405.227 213.833 li
403.386 213.801 li
403.477 195.916 li
405.349 195.949 li
cp
f
390.517 195.664 mo
390.52 213.622 li
388.699 213.591 li
388.67 195.63 li
390.517 195.664 li
cp
f
375.686 195.378 mo
375.813 213.41 li
374.013 213.38 li
373.863 195.345 li
375.686 195.378 li
cp
f
360.854 195.092 mo
361.105 213.198 li
359.325 213.17 li
359.057 195.059 li
360.854 195.092 li
cp
f
346.021 194.807 mo
346.397 212.986 li
344.639 212.96 li
344.25 194.773 li
346.021 194.807 li
cp
f
331.19 194.521 mo
331.69 212.774 li
329.952 212.75 li
329.442 194.488 li
331.19 194.521 li
cp
f
316.358 194.235 mo
316.983 212.563 li
315.266 212.539 li
314.636 194.202 li
316.358 194.235 li
cp
f
301.526 193.95 mo
302.276 212.351 li
300.578 212.329 li
299.829 193.917 li
301.526 193.95 li
cp
f
454.588 263.799 mo
455.185 241.708 li
456.836 241.585 li
456.836 241.597 li
456.18 263.821 li
454.588 263.799 li
cp
f
445.819 242.354 mo
447.505 242.251 li
447.505 242.26 li
446.948 263.709 li
445.315 263.688 li
445.819 242.354 li
cp
f
436.453 243.001 mo
438.174 242.917 li
438.174 242.923 li
437.718 263.598 li
436.043 263.576 li
436.453 243.001 li
cp
f
427.087 243.647 mo
428.844 243.583 li
428.844 243.586 li
428.486 263.486 li
426.771 263.464 li
427.087 243.647 li
cp
f
419.513 244.25 mo
419.255 263.375 li
417.499 263.353 li
417.722 244.294 li
419.513 244.25 li
cp
f
403.254 244.625 mo
405.034 244.583 li
404.885 263.204 li
403.135 263.182 li
403.253 244.773 li
403.254 244.625 li
cp
f
388.787 244.957 mo
390.555 244.916 li
390.514 263.032 li
388.77 263.01 li
388.786 245.105 li
388.787 244.957 li
cp
f
374.319 245.289 mo
376.076 245.249 li
376.144 262.861 li
374.404 262.839 li
374.318 245.438 li
374.319 245.289 li
cp
f
359.853 245.62 mo
361.597 245.582 li
361.772 262.689 li
360.04 262.667 li
359.852 245.771 li
359.853 245.62 li
cp
f
345.385 245.952 mo
347.118 245.914 li
347.401 262.519 li
345.675 262.496 li
345.385 246.104 li
345.385 245.952 li
cp
f
330.918 246.284 mo
332.639 246.247 li
333.031 262.347 li
331.311 262.324 li
330.918 246.437 li
330.918 246.284 li
cp
f
316.451 246.615 mo
318.16 246.58 li
318.66 262.176 li
316.945 262.153 li
316.45 246.77 li
316.451 246.615 li
cp
f
303.681 246.913 mo
304.29 262.004 li
302.58 261.981 li
301.983 247.103 li
301.983 246.947 li
303.681 246.913 li
cp
f
305.565 293.289 mo
306.128 307.277 li
306.128 307.288 li
304.419 307.255 li
304.419 307.144 li
303.856 293.323 li
305.565 293.289 li
cp
f
318.022 293.022 mo
319.73 292.988 li
320.189 307.511 li
318.487 307.479 li
318.488 307.37 li
318.022 293.022 li
cp
f
332.188 292.721 mo
333.895 292.688 li
334.252 307.734 li
332.557 307.703 li
332.558 307.596 li
332.188 292.721 li
cp
f
346.354 292.42 mo
348.059 292.387 li
348.313 307.957 li
346.626 307.928 li
346.627 307.822 li
346.354 292.42 li
cp
f
360.52 292.119 mo
362.224 292.086 li
362.375 308.18 li
360.695 308.152 li
360.696 308.049 li
360.52 292.119 li
cp
f
374.686 291.818 mo
376.388 291.785 li
376.438 308.402 li
374.765 308.376 li
374.766 308.275 li
374.686 291.818 li
cp
f
388.852 291.518 mo
390.552 291.484 li
390.499 308.626 li
388.834 308.601 li
388.835 308.502 li
388.852 291.518 li
cp
f
403.018 291.217 mo
404.716 291.183 li
404.562 308.849 li
402.903 308.825 li
402.904 308.728 li
403.018 291.217 li
cp
f
418.881 290.882 mo
418.623 309.071 li
416.973 309.049 li
417.183 290.915 li
418.881 290.882 li
cp
f
428.012 290.687 mo
427.673 309.217 li
426.065 309.194 li
426.355 290.721 li
428.012 290.687 li
cp
f
437.144 290.492 mo
436.723 309.361 li
435.159 309.339 li
435.528 290.525 li
437.144 290.492 li
cp
f
446.275 290.297 mo
445.772 309.506 li
444.253 309.484 li
444.701 290.33 li
446.275 290.297 li
cp
f
455.407 290.102 mo
454.822 309.651 li
453.347 309.629 li
453.874 290.136 li
455.407 290.102 li
cp
f
454.822 336.456 mo
453.569 367.942 li
451.157 367.942 li
451.638 336.456 li
454.822 336.456 li
cp
f
443.079 336.456 mo
441.827 367.942 li
439.427 367.942 li
439.896 336.456 li
443.079 336.456 li
cp
f
431.349 336.456 mo
430.084 367.942 li
427.685 367.942 li
428.152 336.456 li
431.349 336.456 li
cp
f
418.248 336.456 mo
419.606 336.456 li
418.342 367.942 li
415.942 367.942 li
416.41 336.456 li
418.248 336.456 li
cp
f
391.802 336.456 mo
390.982 367.942 li
388.57 367.942 li
388.617 336.456 li
391.802 336.456 li
cp
f
364.196 336.456 mo
363.81 367.942 li
361.409 367.942 li
361.012 336.456 li
364.196 336.456 li
cp
f
336.602 336.456 mo
336.637 367.942 li
334.237 367.942 li
333.405 336.456 li
336.602 336.456 li
cp
f
308.797 336.456 mo
309.266 367.942 li
306.865 367.942 li
305.612 336.456 li
308.797 336.456 li
cp
f
454.822 309.651 mo
459.868 309.729 li
459.024 336.456 li
454.822 336.456 li
451.638 336.456 li
443.079 336.456 li
439.896 336.456 li
431.349 336.456 li
428.152 336.456 li
419.606 336.456 li
418.248 336.456 li
418.623 309.071 li
453.347 309.629 li
454.822 309.651 li
cp
.639216 .52549 .545098 rgb
f
453.874 290.136 mo
418.881 290.882 li
419.255 263.375 li
454.588 263.799 li
456.18 263.821 li
461.319 263.877 li
460.5 289.99 li
455.407 290.102 li
453.874 290.136 li
cp
f
457.644 214.58 mo
462.877 214.658 li
462.033 241.218 li
456.836 241.585 li
455.185 241.708 li
419.595 244.25 li
419.513 244.25 li
419.935 214.045 li
455.922 214.558 li
457.644 214.58 li
cp
f
459.188 162.486 mo
464.527 162.486 li
463.497 195.031 li
458.217 195.187 li
456.438 195.231 li
421.187 196.257 li
420.18 196.235 li
420.637 162.486 li
457.327 162.486 li
459.188 162.486 li
cp
f
422.979 115.251 mo
457.327 115.251 li
462.033 115.251 li
466.025 115.251 li
465.276 138.791 li
459.868 139.27 li
457.959 139.449 li
420.918 142.748 li
421.292 115.251 li
422.979 115.251 li
cp
f
418.67 115.251 mo
421.292 115.251 li
420.918 142.748 li
420.789 142.759 li
418.893 142.792 li
299.536 144.709 li
297.839 144.743 li
291.997 144.832 li
291.061 115.251 li
299.536 115.251 li
304.021 115.251 li
337.772 115.251 li
342.081 115.251 li
354.245 115.251 li
358.564 115.251 li
375.845 115.251 li
380.153 115.251 li
418.67 115.251 li
cp
.890196 .803922 .760784 rgb
f
418.67 162.486 mo
420.637 162.486 li
420.18 196.235 li
418.283 196.201 li
301.526 193.95 li
299.829 193.917 li
293.543 193.794 li
292.56 162.486 li
298.553 162.486 li
300.251 162.486 li
418.67 162.486 li
cp
f
302.276 212.351 mo
418.072 214.012 li
419.935 214.045 li
419.513 244.25 li
417.722 244.294 li
303.681 246.913 li
301.983 246.947 li
295.229 247.103 li
294.128 212.24 li
300.578 212.329 li
302.276 212.351 li
cp
f
419.255 263.375 mo
418.881 290.882 li
417.183 290.915 li
305.565 293.289 li
303.856 293.323 li
296.703 293.479 li
295.696 261.903 li
302.58 261.981 li
304.29 262.004 li
417.499 263.353 li
419.255 263.375 li
cp
f
418.623 309.071 mo
418.248 336.456 li
416.41 336.456 li
391.802 336.456 li
388.617 336.456 li
364.196 336.456 li
361.012 336.456 li
336.602 336.456 li
333.405 336.456 li
308.797 336.456 li
305.612 336.456 li
298.062 336.456 li
297.137 307.144 li
304.419 307.255 li
306.128 307.288 li
416.973 309.049 li
418.623 309.071 li
cp
f
309.301 172.227 mo
301.919 172.136 li
302.269 175.434 li
309.159 175.386 li
309.301 172.227 li
cp
.831373 .737255 .713726 rgb
f
340.347 166.874 mo
333.744 166.792 li
334.057 169.741 li
340.22 169.698 li
340.347 166.874 li
cp
f
318.526 172.861 mo
311.858 172.778 li
312.175 175.757 li
318.398 175.713 li
318.526 172.861 li
cp
f
306.853 290.617 mo
307.133 293.256 li
313.692 293.116 li
313.801 290.703 li
306.853 290.617 li
cp
f
333.895 134.436 mo
327.312 134.354 li
327.623 137.295 li
333.769 137.252 li
333.895 134.436 li
cp
f
309.484 135.838 mo
314.958 135.8 li
314.96 135.823 li
321.77 135.776 li
321.91 132.655 li
314.614 132.564 li
314.672 133.101 li
309.188 133.033 li
309.484 135.838 li
cp
f
341.697 144.032 mo
348.389 143.925 li
348.521 140.962 li
341.362 140.874 li
341.697 144.032 li
cp
f
350.093 190.292 mo
343.222 190.208 li
343.547 193.277 li
349.961 193.232 li
350.093 190.292 li
cp
f
379.431 187.288 mo
385.709 187.244 li
385.838 184.366 li
379.111 184.283 li
379.431 187.288 li
cp
f
391.592 165.549 mo
385.193 165.47 li
385.496 168.329 li
391.469 168.287 li
391.592 165.549 li
cp
f
378.759 189.534 mo
371.761 189.447 li
372.092 192.574 li
378.624 192.528 li
378.759 189.534 li
cp
f
357.725 179.106 mo
358.085 182.497 li
364.359 182.454 li
364.627 184.973 li
370.969 184.928 li
371.099 182.022 li
365.193 181.949 li
365.316 179.2 li
357.725 179.106 li
cp
f
357.438 164.853 mo
350.689 164.769 li
351.009 167.784 li
357.308 167.74 li
357.438 164.853 li
cp
f
370.682 120.828 mo
363.797 120.742 li
364.123 123.817 li
370.55 123.773 li
370.682 120.828 li
cp
f
348.927 312.021 mo
354.81 311.979 li
354.931 309.283 li
348.629 309.205 li
348.927 312.021 li
cp
f
353.57 327.326 mo
359.538 327.284 li
359.661 324.55 li
353.268 324.47 li
353.57 327.326 li
cp
f
366.271 332.312 mo
359.417 332.227 li
359.741 335.288 li
366.14 335.244 li
366.271 332.312 li
cp
f
344.436 316.584 mo
337.992 316.504 li
338.298 319.382 li
344.313 319.34 li
344.436 316.584 li
cp
f
372.076 132.188 mo
378.545 132.144 li
378.679 129.179 li
371.748 129.093 li
372.076 132.188 li
cp
f
384.252 312.476 mo
391.071 312.428 li
391.212 309.303 li
383.905 309.212 li
384.252 312.476 li
cp
f
405.207 320.065 mo
412.284 320.017 li
412.43 316.772 li
404.848 316.679 li
405.207 320.065 li
cp
f
399.486 326.614 mo
391.872 326.52 li
392.233 329.921 li
399.341 329.871 li
399.486 326.614 li
cp
f
379.126 330.489 mo
372.503 330.407 li
372.816 333.366 li
378.999 333.323 li
379.126 330.489 li
cp
f
409.954 173.207 mo
402.811 173.118 li
403.148 176.309 li
409.817 176.263 li
409.954 173.207 li
cp
f
348.345 140.73 mo
355.241 140.683 li
355.349 138.285 li
359.32 138.258 li
359.461 135.137 li
352.166 135.046 li
352.424 137.485 li
347.995 137.43 li
348.345 140.73 li
cp
f
411.062 128.548 mo
411.192 125.616 li
404.339 125.531 li
404.664 128.592 li
411.062 128.548 li
cp
f
327.634 318.058 mo
333.554 318.017 li
333.675 315.303 li
327.333 315.225 li
327.634 318.058 li
cp
f
309.454 335.675 mo
301.816 335.58 li
301.909 336.456 li
305.612 336.456 li
308.797 336.456 li
309.419 336.456 li
309.454 335.675 li
cp
f
333.483 185.51 mo
326.501 185.423 li
326.832 188.542 li
333.35 188.497 li
333.483 185.51 li
cp
f
383.137 235.252 mo
376.042 235.164 li
376.378 238.333 li
383.001 238.288 li
383.137 235.252 li
cp
f
396.448 214.188 mo
389.678 214.104 li
389.998 217.128 li
396.318 217.084 li
396.448 214.188 li
cp
f
406.435 237.717 mo
412.819 237.673 li
412.95 234.746 li
406.11 234.661 li
406.435 237.717 li
cp
f
409.663 217.604 mo
402.279 217.513 li
402.629 220.811 li
409.521 220.763 li
409.663 217.604 li
cp
f
374.25 221.231 mo
366.728 221.138 li
367.084 224.499 li
374.106 224.45 li
374.25 221.231 li
cp
f
410.479 280.345 mo
416.764 280.302 li
416.893 277.421 li
410.159 277.337 li
410.479 280.345 li
cp
f
362.901 215.566 mo
355.717 215.477 li
356.057 218.687 li
362.764 218.64 li
362.901 215.566 li
cp
f
414.614 137.718 mo
420.606 137.677 li
420.73 134.93 li
414.31 134.851 li
414.614 137.718 li
cp
f
419.925 214.7 mo
413.411 214.619 li
413.731 217.644 li
419.885 217.601 li
419.925 214.7 li
cp
f
411.137 267.056 mo
404.711 266.976 li
405.016 269.847 li
411.014 269.805 li
411.137 267.056 li
cp
f
342.267 231.675 mo
342.39 228.938 li
335.991 228.858 li
336.294 231.716 li
342.267 231.675 li
cp
f
345.172 215.354 mo
352.211 215.305 li
352.299 213.341 li
357.317 213.306 li
357.324 213.141 li
344.919 212.962 li
345.172 215.354 li
cp
f
298.795 133.139 mo
305.765 133.09 li
305.907 129.896 li
298.441 129.804 li
298.795 133.139 li
cp
f
333.854 126.83 mo
340.495 126.783 li
340.632 123.74 li
333.518 123.651 li
333.854 126.83 li
cp
f
317.058 308.344 mo
309.464 308.249 li
309.823 311.642 li
316.912 311.593 li
317.058 308.344 li
cp
f
299.406 181.922 mo
293.167 181.844 li
293.268 185.032 li
299.269 184.991 li
299.406 181.922 li
cp
f
298.008 230.786 mo
302.831 230.752 li
302.96 227.893 li
296.276 227.81 li
296.565 230.54 li
294.705 230.516 li
294.796 233.412 li
297.891 233.391 li
298.008 230.786 li
cp
f
314.146 231.743 mo
314.278 228.808 li
307.418 228.723 li
307.743 231.787 li
314.146 231.743 li
cp
f
332.284 223.537 mo
332.598 226.5 li
338.787 226.457 li
338.914 223.62 li
332.284 223.537 li
cp
f
306.283 272.179 mo
306.43 268.911 li
298.792 268.816 li
299.154 272.228 li
306.283 272.179 li
cp
f
315.563 224.173 mo
315.919 227.521 li
322.914 227.472 li
323.058 224.266 li
315.563 224.173 li
cp
f
390.566 267.365 mo
383.844 267.281 li
384.162 270.284 li
390.437 270.24 li
390.566 267.365 li
cp
f
327.008 239.148 mo
327.146 236.055 li
319.918 235.966 li
320.261 239.195 li
327.008 239.148 li
cp
f
359.147 286.954 mo
352.264 286.869 li
352.59 289.944 li
359.016 289.899 li
359.147 286.954 li
cp
f
371.128 282.004 mo
364.362 281.92 li
364.683 284.942 li
370.998 284.898 li
371.128 282.004 li
cp
f
378.304 281.005 mo
384.811 280.959 li
384.944 277.978 li
377.974 277.891 li
378.304 281.005 li
cp
f
344.048 262.513 mo
337.147 262.428 li
337.475 265.51 li
343.915 265.465 li
344.048 262.513 li
cp
f
327.706 273.942 mo
320.967 273.859 li
321.285 276.87 li
327.577 276.826 li
327.706 273.942 li
cp
f
331.719 286.313 mo
337.995 286.27 li
338.124 283.394 li
331.4 283.31 li
331.719 286.313 li
cp
f
384.422 291.158 mo
382.824 284.439 li
383.04 280.319 li
384.599 276.427 li
386.528 272.919 li
387.409 269.742 li
387.168 267.532 li
386.84 266.775 li
387.119 267.545 li
387.227 269.725 li
386.192 272.769 li
384.089 276.152 li
382.26 280.15 li
381.839 284.497 li
382.156 286.01 li
381.708 284.974 li
379.282 281.771 li
376.076 279.113 li
368.569 275.728 li
362.07 272.132 li
358.512 267.374 li
357.021 263.565 li
356.432 262.625 li
356.415 262.625 li
356.977 263.586 li
358.339 267.433 li
361.827 272.398 li
368.326 276.235 li
375.625 279.743 li
378.606 282.335 li
380.85 285.439 li
383.278 291.353 li
383.312 291.512 li
383.34 291.503 li
383.395 291.634 li
384.58 291.609 li
384.389 291.168 li
384.422 291.158 li
cp
.639216 .52549 .545098 rgb
f
331.263 123.037 mo
334.608 131.912 li
331.822 122.874 li
329.766 115.251 li
328.819 115.251 li
331.263 123.037 li
cp
f
360.12 143.736 mo
360.22 143.361 li
361.17 140.316 li
363.406 136.218 li
367.543 132.156 li
369.355 129.539 li
369.761 126.303 li
368.89 123.298 li
368.634 120.423 li
369.956 115.251 li
368.824 115.251 li
367.646 120.386 li
368.02 123.511 li
368.975 126.446 li
367.101 131.792 li
363.108 136.008 li
360.996 140.261 li
360.171 143.35 li
360.085 143.737 li
360.12 143.736 li
cp
f
320.608 128.274 mo
321.674 138.024 li
321.193 128.243 li
321.13 115.251 li
320.034 115.251 li
320.608 128.274 li
cp
f
338.812 310.431 mo
340.733 320.584 li
342.551 328.268 li
343.568 331.436 li
342.729 328.227 li
341.311 320.491 li
340.423 314.728 li
341.963 316.997 li
344.743 319.725 li
347.89 325.071 li
348.048 327 li
348.002 327.718 li
348.099 327.003 li
348.07 325.046 li
347.255 322.255 li
345.168 319.342 li
342.594 316.528 li
340.67 313.374 li
339.538 308.974 li
339.359 307.816 li
338.052 307.795 li
338.812 310.431 li
cp
f
418.496 318.37 mo
415.753 320.474 li
413.006 324.505 li
407.813 336.456 li
408.871 336.456 li
413.547 324.718 li
416.014 320.724 li
418.492 318.642 li
418.496 318.37 li
cp
f
375.124 315.64 mo
375 316.324 li
374.705 318.188 li
374.388 324.325 li
376.395 334.272 li
375.745 332.968 li
372.916 328.916 li
371.607 324.1 li
370.395 315.732 li
370.223 312.172 li
370.212 315.741 li
371.031 324.199 li
372.163 329.173 li
373.391 331.536 li
374.951 333.528 li
375.929 336.456 li
377.983 336.456 li
374.972 324.295 li
374.887 318.204 li
375.05 316.331 li
375.124 315.64 li
cp
f
384.083 141.047 mo
388.146 130.468 li
391.186 123.258 li
387.607 130.251 li
383.891 138.675 li
382.668 123.602 li
383.072 140.53 li
382.787 141.177 li
383.091 141.282 li
383.141 143.366 li
384.271 143.348 li
384.083 141.047 li
cp
f
303.741 278.353 mo
310.954 274.549 li
303.504 277.844 li
296.276 280.094 li
296.307 281.038 li
303.741 278.353 li
cp
f
406.778 325.713 mo
408.256 319.373 li
408.506 311.734 li
409.396 308.929 li
407.971 308.906 li
407.521 311.661 li
407.671 319.356 li
406.611 325.643 li
405.637 327.386 li
405.177 327.974 li
405.677 327.414 li
406.778 325.713 li
cp
f
328.221 290.738 mo
328.752 289.436 li
336.671 281.742 li
342.669 274.753 li
345.069 271.723 li
342.527 274.644 li
336.236 281.369 li
329.532 287.521 li
331.007 283.9 li
332.302 279.568 li
332.401 275.044 li
332.174 267.618 li
333.355 265.696 li
334.138 265.302 li
333.326 265.657 li
331.997 267.571 li
331.651 270.972 li
331.816 275.074 li
331.516 279.427 li
330.086 283.56 li
327.573 289.317 li
323.664 292.904 li
325.215 292.872 li
327.64 290.516 li
328.221 290.738 li
cp
f
397.899 183.093 mo
396.012 174.925 li
395.778 171.397 li
395.829 174.939 li
397.336 183.242 li
399.784 192.892 li
399.842 195.846 li
400.884 195.866 li
400.756 192.72 li
397.899 183.093 li
cp
f
332.726 169.395 mo
332.373 172.573 li
332.83 175.933 li
332.513 179.21 li
330.346 181.936 li
327.776 184.609 li
326.235 187.918 li
325.996 189.242 li
325.291 190.652 li
325.724 190.754 li
325.085 194.292 li
325.067 194.404 li
326.197 194.426 li
326.839 190.383 li
330.152 186.055 li
337.521 182.464 li
341.635 180.425 li
345.252 177.482 li
352.098 171.693 li
359.874 168.393 li
366.355 165.688 li
369.925 162.663 li
370.014 162.486 li
369.964 162.486 li
369.883 162.637 li
366.268 165.536 li
359.74 168.064 li
351.81 171.208 li
348.021 173.797 li
344.684 176.945 li
341.149 179.704 li
337.131 181.6 li
329.482 185.2 li
327.788 186.775 li
328.516 185.096 li
330.922 182.465 li
333.154 179.464 li
333.409 175.851 li
332.849 172.554 li
333.09 169.462 li
334.44 164.249 li
334.928 162.486 li
334.807 162.486 li
334.265 164.202 li
332.726 169.395 li
cp
f
379.077 213.453 mo
372.28 228.057 li
368.027 232.815 li
362.22 235.84 li
348.764 237.182 li
336.654 240.456 li
327.595 245.287 li
325.883 246.403 li
326.154 246.397 li
327.693 245.434 li
336.806 240.778 li
348.819 237.737 li
362.438 236.573 li
368.614 233.464 li
373.096 228.587 li
380.287 213.47 li
379.077 213.453 li
cp
f
383.998 213.523 mo
382.504 213.532 li
374.221 227.734 li
373.532 233.486 li
373.659 236.435 li
374.523 239.232 li
375.148 241.782 li
374.827 244.28 li
374.611 245.284 li
374.949 245.276 li
375.189 244.356 li
375.624 241.788 li
375.068 239.029 li
374.332 233.514 li
375.185 227.939 li
383.998 213.523 li
cp
f
205.592 450.231 mo
204.636 453.224 li
204.502 456.15 li
199.797 458.598 li
196.269 457.967 li
195.475 454.123 li
202.236 450.355 li
205.592 450.231 li
cp
.529412 .301961 .368627 rgb
f
200.667 465.014 mo
192.128 465.932 li
185.378 466.707 li
189.241 465.855 li
195.581 464.383 li
207.81 460.559 li
207.208 462.499 li
206.902 463.313 li
200.667 465.014 li
cp
.729412 .466667 .239216 rgb
f
176.647 442.926 mo
174.62 437.542 li
174.917 430.38 li
174.477 424.7 li
176.638 424.538 li
177.499 430.457 li
177.919 434.826 li
181.352 434.941 li
185.951 434.808 li
189.212 435.429 li
189.375 436.49 li
186.668 439.302 li
178.082 444.81 li
177.154 445.135 li
176.647 442.926 li
cp
.529412 .301961 .368627 rgb
f
176.15 417.901 mo
176.638 424.538 li
174.477 424.7 li
174.027 418.839 li
176.15 417.901 li
cp
f
174.955 467.777 mo
171.102 469.03 li
165.221 467.902 li
164.628 467.261 li
164.494 466.659 li
163.672 462.834 li
166.225 462.796 li
170.374 462.442 li
171.972 462.662 li
174.496 461.323 li
185.483 457.183 li
191.641 454.878 li
191.115 456.456 li
186.516 458.34 li
179.545 460.711 li
174.496 462.92 li
174.123 465.454 li
174.324 466.019 li
174.955 467.777 li
f
162.208 467.194 mo
163.595 468.619 li
156.539 468.409 li
162.208 467.194 li
cp
.819608 .588235 .392157 rgb
f
163.404 424.939 mo
160.918 429.663 li
161.052 438.432 li
161.128 442.543 li
159.942 447.324 li
159.875 449.954 li
155.19 449.858 li
148.649 449.667 li
147.034 449.466 li
146.068 446.684 li
144.72 442.046 li
144.337 440.277 li
147.866 427.999 li
151.174 427.388 li
158.059 425.073 li
164.265 422.711 li
163.404 424.939 li
cp
.529412 .301961 .368627 rgb
f
148.267 408.005 mo
142.233 405.337 li
140.666 404.438 li
144.777 405.271 li
150.753 407.632 li
154.808 410.539 li
148.267 408.005 li
.729412 .466667 .239216 rgb
f
162.208 467.194 mo
156.539 468.409 li
163.595 468.619 li
162.208 467.194 li
cp
161.549 466.324 mo
163.815 466.448 li
164.494 466.659 li
164.628 467.261 li
165.221 467.902 li
171.102 469.03 li
174.955 467.777 li
174.324 466.019 li
177.632 465.971 li
181.362 465.979 li
181.725 467.127 li
183.771 468.227 li
190.675 467.118 li
196.317 467.051 li
202.637 466.755 li
205.162 466.563 li
205.668 466.62 li
205.563 466.897 li
204.855 467.223 li
192.128 468.399 li
178.885 469.508 li
171.073 470.646 li
160.143 470.312 li
155.305 470.13 li
153.144 469.298 li
151.729 469.346 li
151.471 468.352 li
149.567 466.085 li
149.52 465.855 li
153.938 466.602 li
161.549 466.324 li
cp
f
151.471 468.352 mo
151.729 469.346 li
147.952 469.489 li
144.461 467.729 li
141.067 468.677 li
139.747 465.846 li
138.055 463.78 li
137.548 462.098 li
138.217 460.233 li
145.599 461.074 li
148.946 463.14 li
149.52 465.855 li
149.567 466.085 li
151.471 468.352 li
cp
.27451 .219608 .301961 rgb
f
145.513 449.39 mo
143.983 449.925 li
138.514 447.649 li
133.102 443.27 li
132.25 441.357 li
135.177 431.423 li
145.417 428.851 li
144.423 433.277 li
142.979 439.723 li
145.198 449.466 li
145.513 449.39 li
cp
.529412 .301961 .368627 rgb
f
139.747 465.846 mo
141.067 468.677 li
140.34 468.877 li
138.896 467.261 li
138.858 466.219 li
138.83 465.607 li
136.764 463.273 li
138.103 460.224 li
138.217 460.233 li
137.548 462.098 li
138.055 463.78 li
139.747 465.846 li
cp
.729412 .466667 .239216 rgb
f
130.376 427.817 mo
131.706 428.181 li
127.451 439.493 li
126.227 443.136 li
127.116 444.896 li
126.513 445.881 li
126.619 446.607 li
127.728 452.383 li
128.923 459.525 li
129.525 461.782 li
124.649 463.025 li
122.21 462.136 li
117.047 462.423 li
115.249 462.27 li
114.446 458.627 li
113.26 453.77 li
112.476 449.543 li
113.203 447.773 li
112.706 446.311 li
112.811 444.714 li
112.333 443.261 li
114.121 438.891 li
116.75 433.058 li
120.748 425.886 li
122.469 425.656 li
130.376 427.817 li
cp
.529412 .301961 .368627 rgb
f
134.928 467.185 mo
136.42 467.825 li
132.604 468.887 li
130.988 468.867 li
127.479 468.533 li
134.928 467.185 li
cp
.819608 .588235 .392157 rgb
f
120.814 468.715 mo
111.319 468.581 li
109.78 467.673 li
118.386 466.63 li
122.459 468.619 li
120.814 468.715 li
cp
f
119.906 408.474 mo
130.157 411.753 li
136.754 413.886 li
125.663 411.744 li
116.855 408.129 li
112.954 405.662 li
119.906 408.474 li
.729412 .466667 .239216 rgb
f
204.636 453.224 mo
205.592 450.231 li
202.236 450.355 li
195.475 454.123 li
196.269 457.967 li
199.797 458.598 li
204.502 456.15 li
204.636 453.224 li
117.41 465.053 mo
115.699 465.272 li
115.393 462.91 li
115.249 462.269 li
117.047 462.423 li
122.211 462.136 li
124.649 463.025 li
129.525 461.782 li
128.923 459.525 li
127.728 452.383 li
126.619 446.607 li
126.513 445.881 li
127.116 444.896 li
126.227 443.136 li
127.451 439.493 li
131.706 428.181 li
130.376 427.817 li
131.065 425.293 li
136.276 426.651 li
138.38 427.272 li
140.761 426.518 li
146.249 424.461 li
163.107 417.758 li
166.043 416.516 li
169.228 415.75 li
175.099 414.201 li
177.403 411.438 li
177.805 410.032 li
179.315 410.462 li
180.97 415.157 li
182.433 418.552 li
184.565 421.487 li
186.783 424.012 li
187.338 425.638 li
188.734 427.837 li
192.741 432.589 li
193.678 437.743 li
196.881 439.837 li
204.272 443.519 li
209.618 448.434 li
208.681 450.098 li
208.833 457.288 li
207.81 460.559 li
195.581 464.383 li
189.241 465.855 li
185.378 466.707 li
192.128 465.932 li
200.667 465.014 li
206.902 463.313 li
205.668 466.62 li
205.162 466.563 li
202.637 466.755 li
196.317 467.051 li
190.675 467.118 li
183.771 468.227 li
181.725 467.127 li
181.362 465.979 li
177.632 465.971 li
174.324 466.019 li
174.123 465.454 li
174.496 462.92 li
179.545 460.711 li
186.516 458.34 li
191.115 456.456 li
191.641 454.878 li
185.483 457.183 li
174.496 461.323 li
171.972 462.662 li
170.374 462.442 li
166.225 462.796 li
163.672 462.834 li
164.494 466.659 li
163.815 466.448 li
161.549 466.324 li
153.938 466.602 li
149.52 465.855 li
148.946 463.14 li
145.599 461.074 li
138.217 460.233 li
138.103 460.224 li
136.764 463.273 li
138.83 465.607 li
138.858 466.219 li
138.103 466.085 li
134.918 465.502 li
129.325 466.582 li
124.132 466.248 li
117.41 465.053 li
145.417 428.851 mo
135.177 431.423 li
132.25 441.357 li
133.102 443.27 li
138.514 447.649 li
143.983 449.925 li
145.513 449.39 li
145.198 449.466 li
142.98 439.723 li
144.423 433.277 li
145.417 428.851 li
144.337 440.277 mo
144.72 442.046 li
146.068 446.684 li
147.034 449.466 li
148.649 449.667 li
155.19 449.858 li
159.875 449.954 li
161.511 449.992 li
167.908 448.396 li
177.154 445.135 li
178.082 444.81 li
186.668 439.302 li
189.374 436.49 li
189.212 435.429 li
188.734 432.397 li
187.415 430.944 li
185.33 428.114 li
184.135 426.536 li
184.507 424.729 li
181.706 420.904 li
178.875 416.688 li
176.15 417.901 li
174.027 418.839 li
171.436 419.986 li
164.265 422.711 li
158.059 425.073 li
151.174 427.388 li
147.866 427.999 li
144.337 440.277 li
.819608 .588235 .392157 rgb
f
112.266 449.533 mo
112.476 449.543 li
113.26 453.77 li
114.446 458.627 li
115.249 462.27 li
114.073 462.165 li
112.715 455.48 li
112.247 449.877 li
112.266 449.533 li
cp
.729412 .466667 .239216 rgb
f
114.121 438.891 mo
112.333 443.261 li
112.811 444.714 li
112.706 446.311 li
113.203 447.773 li
112.476 449.543 li
112.266 449.533 li
112.419 447.171 li
111.386 443.365 li
113.872 437.007 li
119.552 426.049 li
120.748 425.886 li
116.75 433.058 li
114.121 438.891 li
cp
f
96.2495 388.384 mo
111.099 394.188 li
117.257 397.372 li
120.958 399.753 li
124.945 401.292 li
133.322 404.553 li
136.286 406.38 li
128.493 403.855 li
118.118 399.007 li
105.84 393.337 li
97.9418 389.55 li
96.2495 388.384 li
f
111.166 411.036 mo
116.148 415.492 li
129.717 422.052 li
135.97 424.586 li
138.351 425.197 li
140.828 424.193 li
146.316 422.271 li
154.664 418.771 li
162.974 416.334 li
173.368 413.111 li
177.403 411.438 li
175.099 414.201 li
169.228 415.75 li
166.043 416.516 li
163.107 417.758 li
146.249 424.461 li
140.761 426.518 li
138.38 427.272 li
136.276 426.651 li
131.065 425.293 li
118.051 418.485 li
115.67 416.057 li
110.774 412.537 li
96.479 407.039 li
96.689 406.494 li
104.329 407.871 li
111.166 411.036 li
f
90.7227 380.322 mo
96.3066 384.186 li
91.669 381.767 li
87.6724 379.854 li
87.9209 379.825 li
89.9195 379.863 li
90.7227 380.322 li
f
83.1304 464.746 mo
89.8716 465.798 li
83.0728 465.598 li
79.1621 466.229 li
76.8193 464.259 li
79.4106 464.622 li
83.1304 464.746 li
cp
.819608 .588235 .392157 rgb
f
85.4443 410.94 mo
74.2661 407.393 li
82.6904 408.971 li
95.3696 414.766 li
107.495 419.355 li
112.648 421.774 li
112.104 423.381 li
107.313 435.181 li
103.191 445.393 li
103.086 446.291 li
100.333 446.674 li
81.1221 441.357 li
81.1699 441.195 li
90.3589 443.165 li
96.9858 445.067 li
102.063 443.519 li
109.531 423.151 li
104.741 421.019 li
95.3696 416.133 li
85.4443 410.94 li
cp
.729412 .466667 .239216 rgb
f
85.4537 384.291 mo
77.8521 381.651 li
76.6377 381.278 li
79.2959 380.944 li
82.8052 382.531 li
87.4141 384.97 li
90.9903 386.596 li
85.4537 384.291 li
f
79.1621 466.229 mo
83.0728 465.598 li
89.8716 465.798 li
83.1304 464.746 li
79.4106 464.622 li
76.8193 464.259 li
79.1621 466.229 li
cp
77.6797 462.06 mo
82.958 463.14 li
88.6763 463.637 li
92.8262 465.119 li
96.0771 465.101 li
111.195 465.846 li
115.699 465.272 li
117.41 465.053 li
124.132 466.248 li
129.325 466.582 li
134.918 465.502 li
138.103 466.085 li
138.858 466.219 li
138.896 467.261 li
140.34 468.877 li
139.948 468.992 li
132.604 468.887 li
136.42 467.825 li
134.928 467.185 li
127.479 468.533 li
130.988 468.867 li
120.814 468.715 li
122.459 468.619 li
118.386 466.63 li
109.78 467.673 li
111.319 468.581 li
104.75 468.485 li
91.3154 468.198 li
80.5962 468.533 li
77.5557 468.849 li
77.1445 468.236 li
75.8438 467.548 li
73.9697 467.356 li
74.4189 465.33 li
73.5776 462.614 li
77.6797 462.06 li
cp
f
73.5776 462.614 mo
74.4189 465.33 li
73.9697 467.356 li
62.6387 466.219 li
50.8008 465.568 li
50.9346 465.139 li
49.5288 464.718 li
48.5059 461.189 li
49.8828 456.083 li
52.5313 452.421 li
53.9277 445.584 li
57.4561 441.759 li
60.6782 441.233 li
62.2559 441.597 li
65.4214 445.183 li
68.6245 448.586 li
71.1968 452.383 li
71.7896 456.963 li
73.2432 461.524 li
73.5776 462.614 li
cp
.27451 .219608 .301961 rgb
f
77.479 388.135 mo
90.6553 391.711 li
103.019 396.397 li
84.2202 391.577 li
68.8442 386.385 li
62.581 384.501 li
65.0005 383.88 li
68.5478 385.247 li
77.479 388.135 li
.729412 .466667 .239216 rgb
f
67.6685 406.045 mo
61.2041 404.333 li
57.647 402.956 li
56.9111 402.096 li
67.6685 406.045 li
cp
f
59.8467 395.507 mo
58.0201 394.551 li
59.4829 394.006 li
68.749 397.362 li
78.913 398.969 li
91.0761 404.323 li
96.689 406.494 li
96.479 407.039 li
95.7715 406.771 li
76.2167 401.148 li
65.9376 397.841 li
59.8467 395.507 li
f
46.7271 461.811 mo
47.8174 459.048 li
49.3091 455.28 li
50.4565 452.746 li
51.4126 450.719 li
54.8647 441.778 li
57.2266 440.449 li
60.6782 441.233 li
57.4561 441.759 li
53.9277 445.584 li
52.5313 452.421 li
49.8828 456.083 li
48.5059 461.189 li
49.5288 464.718 li
49.481 464.698 li
48.2573 464.804 li
46.7271 461.811 li
cp
f
45.3218 411.782 mo
48.7163 402.564 li
51.585 399.274 li
55.4194 400.346 li
56.9111 402.096 li
55.2661 401.493 li
51.3647 401.196 li
50.7051 401.168 li
49.9785 402.449 li
47.9033 406.953 li
44.9199 417.328 li
42.9214 424.939 li
54.8262 431.786 li
68.7681 436.558 li
81.1699 441.195 li
81.1221 441.357 li
77.0869 440.238 li
66.98 437.217 li
55.3906 433.612 li
49.3091 430.447 li
44.6812 428.793 li
40.9995 426.785 li
41.6021 423.429 li
42.2046 422.367 li
44.3174 416.486 li
45.3218 411.782 li
cp
f
47.8174 459.048 mo
46.7271 461.811 li
48.2573 464.804 li
44.5947 465.109 li
39.6416 457.947 li
39.5938 457.871 li
40.5693 457.192 li
42.8931 457.651 li
46.1821 458.397 li
47.8174 459.048 li
cp
.819608 .588235 .392157 rgb
f
37.7388 429.683 mo
37.5381 434.97 li
39.2305 440.937 li
37.127 437.484 li
35.9316 434.54 li
35.377 431.613 li
35.2051 431.136 li
36.2949 428.649 li
36.8403 425.513 li
37.7388 429.683 li
cp
.729412 .466667 .239216 rgb
f
128.493 403.855 mo
136.286 406.38 li
133.322 404.553 li
124.945 401.292 li
120.958 399.753 li
117.257 397.372 li
111.099 394.188 li
96.2495 388.384 li
97.9418 389.55 li
105.84 393.337 li
118.118 399.007 li
128.493 403.855 li
125.663 411.744 mo
136.754 413.886 li
130.157 411.753 li
119.906 408.474 li
112.954 405.662 li
116.855 408.129 li
125.663 411.744 li
148.267 408.005 mo
154.808 410.539 li
150.753 407.632 li
144.777 405.271 li
140.666 404.438 li
142.233 405.337 li
148.267 408.005 li
37.127 437.484 mo
39.2305 440.937 li
37.538 434.97 li
37.7388 429.683 li
36.8403 425.513 li
38.0542 418.542 li
41.9941 406.38 li
45.2163 397.286 li
47.5302 391.874 li
51.5274 388.929 li
58.5937 385.524 li
62.581 384.501 li
68.8442 386.385 li
84.2202 391.577 li
103.019 396.397 li
90.6553 391.711 li
77.479 388.135 li
68.5478 385.247 li
65.0005 383.88 li
73.5679 381.681 li
76.6377 381.278 li
77.8521 381.651 li
85.4537 384.291 li
90.9903 386.596 li
87.4141 384.97 li
82.8052 382.531 li
79.2959 380.944 li
87.6724 379.854 li
91.669 381.767 li
96.3066 384.186 li
90.7227 380.322 li
89.9195 379.863 li
95.704 379.988 li
98.4868 380.725 li
106.318 383.105 li
122.889 390.076 li
137.663 397.238 li
167.487 408.282 li
171.302 409.449 li
173.406 408.77 li
177.805 410.032 li
177.403 411.438 li
173.368 413.111 li
162.974 416.334 li
154.664 418.771 li
146.316 422.271 li
140.828 424.193 li
138.351 425.197 li
135.97 424.586 li
129.717 422.052 li
116.148 415.492 li
111.166 411.036 li
104.329 407.871 li
96.689 406.494 li
91.0761 404.323 li
78.913 398.969 li
68.749 397.362 li
59.4829 394.006 li
58.0201 394.551 li
59.8467 395.507 li
65.9376 397.841 li
76.2167 401.148 li
95.7715 406.771 li
96.479 407.039 li
110.774 412.537 li
115.67 416.057 li
118.051 418.485 li
131.065 425.293 li
130.376 427.817 li
122.469 425.656 li
120.748 425.886 li
119.552 426.049 li
113.872 437.007 li
111.386 443.365 li
112.419 447.171 li
112.266 449.533 li
112.247 449.877 li
112.715 455.48 li
114.073 462.165 li
115.249 462.269 li
115.393 462.91 li
115.699 465.272 li
111.195 465.846 li
96.0772 465.101 li
92.8261 465.119 li
88.6763 463.637 li
82.958 463.14 li
77.6797 462.06 li
73.5777 462.614 li
73.2432 461.524 li
71.7895 456.963 li
71.1968 452.383 li
68.6245 448.586 li
65.4214 445.183 li
62.2558 441.597 li
60.6782 441.233 li
57.2266 440.449 li
54.8648 441.778 li
51.4126 450.719 li
50.4566 452.746 li
49.3091 455.28 li
47.8174 459.048 li
46.1821 458.397 li
43.6289 455.404 li
41.3344 454.094 li
36.9644 446.617 li
35.0713 440.2 li
34.5645 438.412 li
34.497 438.212 li
34.373 433.02 li
35.2051 431.136 li
35.377 431.613 li
35.9316 434.54 li
37.127 437.484 li
57.6469 402.956 mo
61.2041 404.333 li
67.6684 406.045 li
56.9112 402.096 li
55.4194 400.346 li
51.585 399.274 li
48.7163 402.564 li
45.3217 411.782 li
44.3174 416.486 li
42.2046 422.367 li
41.6021 423.429 li
40.9995 426.785 li
44.6811 428.793 li
49.3091 430.447 li
55.3906 433.612 li
66.98 437.217 li
77.0869 440.238 li
81.122 441.357 li
100.332 446.674 li
103.086 446.291 li
103.191 445.393 li
107.313 435.181 li
112.104 423.381 li
112.648 421.774 li
107.495 419.355 li
95.3696 414.766 li
82.6904 408.971 li
74.2661 407.393 li
85.4444 410.94 li
95.3696 416.133 li
104.741 421.019 li
109.531 423.151 li
102.063 443.519 li
96.9858 445.067 li
90.3589 443.165 li
81.17 441.195 li
68.768 436.558 li
54.8261 431.786 li
42.9213 424.939 li
44.9199 417.328 li
47.9033 406.953 li
49.9785 402.449 li
50.705 401.168 li
51.3648 401.196 li
55.2661 401.493 li
56.9112 402.096 li
57.6469 402.956 li
.819608 .588235 .392157 rgb
f
40.1963 455.538 mo
40.5693 457.192 li
39.5938 457.871 li
33.895 449.677 li
32.709 445.794 li
33.7803 441.128 li
34.0957 440.104 li
35.1284 442.581 li
36.8115 448.845 li
38.6758 452.65 li
40.1963 455.538 li
cp
f
43.6289 455.404 mo
46.1821 458.397 li
42.8931 457.651 li
40.5693 457.192 li
40.1963 455.538 li
38.6758 452.65 li
36.8115 448.845 li
35.1284 442.581 li
34.0957 440.104 li
34.5068 438.747 li
34.4971 438.212 li
34.5645 438.412 li
35.0713 440.2 li
36.9644 446.617 li
41.3345 454.094 li
43.6289 455.404 li
cp
.729412 .466667 .239216 rgb
f
50.854 389.425 mo
50.854 389.425 li
51.5274 388.929 li
50.8541 389.425 li
level3{
gsave
clp
[9.76546 81.5421 -81.5421 9.76546 109.512 359.502 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.76546 81.5421 -81.5421 9.76546 109.512 359.502 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 255 255 ]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
136.286 406.38 mo
128.493 403.855 li
136.283 406.378 li
136.286 406.38 li
level3{
gsave
clp
[9.76546 81.5421 -81.5421 9.76546 109.512 359.502 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~\p$<LGX&fd5eMG1]mN2]IRUu$7_aLF^k,1oKM0.89u;Z\_hh7/MGhEP<5jhs`f=0AOBKYf>KE"6ad$2T
Q=.n'@a(9ObaW1gSS6<?C!WJgd%YC)Ui+VWERLb*e#@H=WclpoGh0!CeusGPZ$t?3J(_2[g9uXg\:r_K
LYTLth7S[&^5UsbNo7d9iPUi<`K]B%QK-)SjN<nPba[b>S`e=kkg?*ge"c0WV!?O/le&0&g8jVqXR=oI
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.76546 81.5421 -81.5421 9.76546 109.512 359.502 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mHs<.mHj3+m-F!'lg!d#lKRQtl0.?pkih6oki_-lkN:phk2k^djlGL`jQ#:\j5T(Xio/kTiSibSiS`YP
i8EMMhr!;IhVR)Eh;-lAgt^Z=gY:K;gY:H9g=k65g"G$1f\"g-f@SU)f%/C%e^`4#e^`1!eC;sre'lan
daHRkdF$@hdF$@gd*U.ccd0q_cHa_[c-=MWbfn;SbKJ)PbKJ)Ob0%lKaiVZGaN2HCa2c6@a2c6?`l?$;
`Pog8`5KU4`5KU4_o'C0_SX1,_83t(^qdb$^V@Ou^V@Ou^:q=q]tM+m]tM+m]Y(ni]=Y\e]"5Ja]"5Ja
~>
<~gt^]>gY1B8g=b03f[na+f%&=#eC2mqe'c[ldEp7dcd'h\c-4DUbfe2Pb/qcIaiMQD`l5p9`Pf^4_ns:-
_SX.*^qd_"^:q:o]Y(kg]=YYc\[f5[\@B#W[^NTO['[0GZa6sCZ*CO;YHP+3Xf\\+XK8J'WiE%tWMuhp
Vl-GiVPU,bUnjf]US=KVTqS0QT:VXFSXl=AS=?":R[T\5R@'A.Q^3r&Q'IW!P`q;oP*1ujOcYZcO,f6[
NK&pWN/W^SMi3IMM2@(GLkphAL5(D9KS5#3K7ec-JUrB'J:N0#It)orI=6KjH[C*dH?sm`H$OXZGB\7T
~>
<~Xf\_,XK/D&X/`.tW2HPkVl$;dUna][US=KVTqJ'NT:VXFSXc4>S!oe6R@'A/R$X/*QBd`"P`q;oP*(lg
OH>NaNfK*YN/W[QMi3ILLkphALPLV=KnY25K7ec-JUr?%It)orIXZ]nI!^0cH?sj^G^+FVG'8"NFEDSF
EcQ2?EH,u;Df0H0D/F-+Chmg$C2%BqBP;'lAnGUbA7T4\@q&nU@:3JM?X@&E?!U`@>[(E9>$5!1=BJ[,
=&r=$<)cgr;c?Rl;,L1f:esh]9he>V9MA)P8kM]J8P)HD7n6$<77BX66psC06:+"*5s[b$5<h@s5!D+m
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
140.428 422.859 mo
135.267 422.173 li
128.205 419.213 li
122.811 417.149 li
118.026 413.491 li
108.329 407.123 li
102.205 406.029 li
98.1606 405.331 li
87.6782 401.937 li
77.3452 397.83 li
72.5508 396.605 li
68.0405 394.675 li
57.2861 392.599 li
50.854 389.425 li
51.5274 388.929 li
58.5937 385.524 li
62.581 384.501 li
68.8442 386.385 li
84.2202 391.577 li
103.019 396.397 li
90.6553 391.711 li
77.479 388.135 li
68.5478 385.247 li
65.0005 383.88 li
73.5679 381.681 li
76.6377 381.278 li
77.8521 381.651 li
85.4537 384.291 li
90.9903 386.596 li
87.4141 384.97 li
82.8052 382.531 li
79.2959 380.944 li
87.6724 379.854 li
91.669 381.767 li
96.3066 384.186 li
90.7227 380.322 li
89.9195 379.863 li
95.704 379.988 li
98.4868 380.725 li
106.318 383.105 li
122.889 390.076 li
137.663 397.238 li
167.487 408.282 li
171.302 409.449 li
173.406 408.77 li
177.805 410.032 li
177.692 410.426 li
172.647 412.282 li
163.608 414.547 li
152.931 418.239 li
144.922 420.922 li
140.428 422.859 li
136.754 413.886 mo
136.754 413.886 li
130.157 411.753 li
119.906 408.474 li
112.954 405.662 li
116.855 408.129 li
125.663 411.744 li
136.754 413.886 li
154.808 410.539 mo
154.808 410.539 li
150.753 407.632 li
144.777 405.271 li
140.666 404.438 li
142.233 405.337 li
148.267 408.005 li
154.808 410.539 li
128.493 403.855 mo
136.286 406.38 li
136.283 406.378 li
136.286 406.379 li
133.322 404.553 li
124.945 401.292 li
120.958 399.753 li
117.257 397.372 li
111.099 394.188 li
96.2495 388.384 li
97.9418 389.55 li
105.84 393.337 li
118.118 399.007 li
128.493 403.855 li
level3{
gsave
clp
[9.76546 81.5421 -81.5421 9.76546 109.512 359.502 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~d?\=jQY"U4B%!)\e!b""RqgHDCXenleXpa0TQ&JUERpk)f;*N?V01FfG1`^:fr02LWI!:!I+t`OgT>t\
Y(5<3K&*\ah6M^jZ\I>DLYoOri4"U%\W#LYNT%L1ik1B4^67NkPN0HDjM@/C_O0H'RHDJWk/X"TaIVM9
TBOFjkffdcc(jRLV<ZF)ld;Zsd])T^X6nH=mFJH.f<=VqZ1$DPn(b;>h6le0\+/@co&71Nik4mC^%:@#
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.76546 81.5421 -81.5421 9.76546 109.512 359.502 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~o()ABo()ABo'u8?naZ/>naQ&;nF5r:nF,i7n*]W3mdBN2md9E/mHs<.mHj3+m-O**m-F!'lg!d#lK[["
lK[Wul07Hsl07Eqkih3mkND$kkND!ik2tggk2tdejlPUcjlPRajQ,@]j5]1[j5].Yio8tWio8qUiSibS
iSibRi8EPOi8EPNhr!>Khr!>JhVR,Fh;-oCh;-oBgt^]?gt^]>gY:K;gY:K:g=k97g=k96g"G'2f\"j/
f\"j/f@SX+f@SX+f%/F'f%/F'e^`4#e^`4#eC<!teC<!te'ldpe'ldpdaHRldaHRldF$@hdF$@hd*U.d
~>
<~jQ,C^j5T(Xio/kTiS`YOhqm5HhVI#Dh;$f@gtUT;g=b04g"=s/f@JO(f%&=$e^W*te'c[mda?IidEp7e
d*U+bcHa\Zc-=JVbfn8Rb0%iJaiVWFaN2EBa2c3>`Pod6`5KR2_SX.*_83q&^qd_"^V@Ls^:q:o]Y(kg
]=Y\d]"5J`\[f8\\@8rU[^NWP[C!<IZa7!DZEgd@Z*CR<Yct@8YHG%1Xf\_,XK8M(X/i;$Wi;trW2QYm
Vl-GjVP^5fV5:#bUnjf^USFQXTqS0RTV.sNT:_aJSt;LDS=H+>S=H(<R[T\6R@0J2R$a8.Q^=&*QBmi&
~>
<~^:q=p]tD"j]Xtee]",A]\@8rV\$i`Q[C!<J['R*EZE^[>Z*:I9YHG%2Y-"h-XK/D&X/`2!WMlboW2HPj
VP^2dV59u`USFQXU8"?TTV.pLT:_^HSXl:@S=H(<R[TY4R@0G0R$a5,QBmf$Q'ISuPEV/mP*1riOH>Na
O,o?^NfB$WN/W^RMi*CKM26tCLPLY>L5(G:KnP,3K7ef.JqAT*JUi9#It)rsIXZ`oI=-EhH[:!`H$O[[
G^+FVG'8%PF`hhLFEDVHF)uABEH,u<E,]c8Df9N2D/F-,Ci!m&C2.KuBk_9qBP;'mB4kggAS#FaA7T4]
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
209.56 448.537 mo
209.559 448.537 li
209.618 448.434 li
209.56 448.537 li
level3{
gsave
clp
[1.46483 46.5083 -46.5083 1.46483 178.84 422.297 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.46483 46.5083 -46.5083 1.46483 178.84 422.297 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
161.971 462.844 mo
160.333 462.008 li
155.129 460.327 li
150.954 456.909 li
149.954 456.224 li
153.197 455.342 li
159.474 453.544 li
166.277 450.924 li
175.007 447.907 li
193.689 437.751 li
196.881 439.837 li
204.272 443.519 li
209.618 448.434 li
209.559 448.537 li
203.039 448.513 li
199.174 450.616 li
192.272 453.14 li
180.919 456.893 li
175.205 460.023 li
171.33 461.666 li
166.432 462.213 li
162.954 462.716 li
161.971 462.844 li
level3{
gsave
clp
[1.46483 46.5083 -46.5083 1.46483 178.84 422.297 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.46483 46.5083 -46.5083 1.46483 178.84 422.297 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.3
%%For: (\704\754\750\762\760\750\751 \712\740\753\750\755\750\767\745\755\752\756) ()
%%Title: (1907.w013.n001.352B.p12.352__01.eps)
%%CreationDate: 7/16/2019 3:43 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9RffC8[JYH.[*\0HUY(N<ea'En[72*c]5&e*,Ch&i6Grgp,^+@)#JdsV<.SQ;G);K_[oVm`\1a7N]=XL5&_rU5gq^f-g)
%#J\Ur:OW8O^4*.hWh!ih$,+i(Wi^0acqA,O'A"27d0Y*X5F%Pt9W>lL`H.q8)Z!g4=@4OfiL+AJIn=>`25M6dV<\_F'J<p'nAA<J
%GR>ocT5hF:P&<T`?L;n:&#^GVH[-=32[Q<H8`j\iJe+s$Yr%5":p_e#Sup1aL64Sgqm,:>m>I\L<T*Vu!$PR>k/.Ihk5gh+Bn1oX
%9OOfX(""T_a@H@Wo!f]s@<qL(,etWK$W"jLo`2_7*Zdb)IM@(d;</ShbJ@Qb;&!a8QUa7SqYZ#=Ml$ZpL:l5@%&L#h/Kd.Y\,mOe
%e!!TY9!?Vgr:(2gi+(C%+\cV(W2,'<&c`4V?^,huDhq78=+Ed?#@QSactCA9H8s>J/seh?0EaX+C&td]o)X0=!E?@YO[RVMW6KKQ
%l)Ijl(lA[kScJRrs'c"]^(;"nkb%p5-uhOUn8S.ANPCjB",0^(B^/qJc`sL7<Q!=uW6rk*^HfPY$>D2*(16bRWc?S;]"g.#O\E]4
%VO,g;&34ttePNI_g1\F>9o+C1<7NT<No&tC.>0f]^QnCs1SakIOaYSg,MBNZ.d5J$d/YE7*a\Kc5nSR&TMD/EQCoMV6aM_GJ6&MF
%#5#Q.Z\W.U","]6>#f?lBU\Go=GenOl,_5o"&kr]\e10C5I0rl+pqk)]5#O+S7Z*eB/YsLJnKAYE3`K(lV5=t%f.)B!<o^VL0cb+
%%_gkJ:dqR);M#9_c?4@sCS?X#Ilf%PUmG>]#<.\P^"6#g.f/mX>LB`_<';,$V0^3W&&.B$Cd#'\ouQ\Tq%8<N<hSE,JKH<'i(&;Q
%YW<QpN%0?jdUcDrpnXRW[=(tWcI^TaWV3OL-<9u=f!!V%=#WC.bFWP?%DLc/)1+G%q*Akk1@RO[GT`;bd!ZG8_27:`HLN&4^@P1H
%>DPW%rV#"h#<iJ#0j0,@UDQlNW`Pu#Fb>m3?^urUr"Ud.E?8"ZZLpS%k\VRi;QUl@EXekA(cJ)coCc8D@:5,:N_:!183"[n,,acY
%?@eCS,&6l'(!^4#D;__n@n`So!n_D$BaS\0:^?!r?`h)G:fY(akfqXY\b#:#98hjsbZ4;%\)7i#1I)ReaUM^!V:!YiL=35=,u;bK
%F_[M"XuCe3P)N,XQD@ZQZ#QY7=iA[Q(78ig^@9W;LI=h,*FFaX_Ub"Dq:R=a%B\)!\/]s"5qs,0^lej7)sdn;fq^+mLn0(:joK/4
%%K$WqDU=u+1VpIS"9S+F1Wt"MBqf'Y[8KB:s6Oi-GIED*'r.%2&Ztnh6=\Z!K+ffp:]jaG+;j>*#st8Iaql7us4$Kp,I=E_),i7-
%JgmjA8]G:^04E*D-%`Q^_IiQ;]1?m,SJEBi10;c,G*?Ak-4hcXAdFMq]@l7H7+3tk:U7&f9J`BKr=C=UQND_B7Oq6uQ&qXh=prah
%:VN`L<>)+T_sH<_W53!Jn[P*kP;,-;8-gcP#8QD,)"90i?eaW(5iDMuaC8BIq"i'.ar5rr+[AJlbUaH5$`"^e3u(1?/*5#2OGjHY
%L]U1Id19ldX9;(EP`H"WIW'XrO>*8.q>7XVn)*iQJ)bcKi'^?"A1l$D\2]h./&bFL_h5P9`Ub9,_'S\-50bPN,bG\tJJK('GU`-6
%+GbUpa?gTDQk9;s9h5O]\5FLS(G.Bd=K'<!!['&1-&YWJ`Pf9R&<h(0,YFfi@c1]A%Q,S!PlN@,Z5!9:9o;Ot.4uq)8kLOSaV8!e
%bi"D5$db5cHiY_&.)UZmq%n`8-HF@]JZeJ!j<RtZ3>JCKU>]S*Mo@pE!d6tW\.E'S@0nEHn8IkN#$2eI"C+2Lr(`t:7cB8VMiP(;
%iaP$a"T/@Ta/#)=?Ds=/^N_;<?HMZn@OZ>Gs)ro=`?^frP@@E@"hbZZ$I",(Ml['B8"l>1Rt*$2VDsI.3H26*Z?FnFkpDL66,#2%
%I/dfBZ-\hX'[,0o1qH@p>Oo3J5*.cqSOi\U2_8rAk/1(EQR-i$q:(5]M<p)[d1=;?A1o1)KD^i9`3BLlM$@?>T^g!g)Sl%-04GqE
%s'hl'mBTMsfisW;9pr=ii]Kcd/p4]XopG-(>8NSg^+;jD=tZ;OU)u]NKkVQ(MJ/7Oe0Xt&N@7+X-;B"HU.`?f8>B`pVdl)DUrc2%
%%:dgRZl&$\q(6!3/0+pu!9Y2ra.`WL0D\8.qFb>sA[(lkhjjM32t^=hIg&(Xkqkr2YM4Z.iTN5rMtGfQG00Foh';83G9sR0eGqRt
%2+XVC+C!i"RplC[3^s^/M<1.I&:3\`l@6fQS"GM4W/pu+rJSK.M_EAg^e%F3*6?B%&opMWi!^)A7`D>0>Y-CKO4#ie(JAg+:CCPM
%8E",V]GMZe'6KC46,a8M1*"2aO\+KXU>S/<XWpL=rXIUCZ?0R=@,n,<o@Uo+bARJD1tXUiAI2Qq=>6Dg@&k$I[Dp!@'.[Y02N_Q?
%5s(:'QOIOQn[C6KLS0(:U-rf\ER6<VCD;hP.#'P^q`#)/+3?\R^+1'o`Mkg1BB*6%Ll5ZDE]b+-rt=iI>Ua%fSRB6-E="l_+b1Mn
%^a,]-ji%mi6n/L:9@?D))S.)25Y8eT'R7J?JAo>t,&NH-2[$4?/CmeI"K]FZXOg"dOiI!cr@GAa$J>^;$F1O[5CbOd-\,KB5Uius
%n0d-s&n$JLYXfXV+_![S"(t`o%p1K0X<b7;(q+;g3%+bK3Uh3N80bhU.I_rrn:raV[LB<4"E2C,2[nQ,!C'2-7nj'TEKEs1]WD<c
%<reY.+?9Ye7tGkR4`CHJ$<deBPsN82<5=,VLN!GC:U)A<o1@;^39W^DoKiWH&>28G5Z\d<PRYM!'PL<pM1[EL6)Ptt6nTI*&KWcg
%"c]8pMGAa%JOi$>A"\r>BVl%r$>=su6>@"A92R.JP+^'>A8#)gJJ"RJ8G`E&d!,b!#dooHU.NMgWQA-Z?S0P9h?l4d,J5%9fAa!Q
%@Gim0Q#PF;1L,UZ"&<(5*p**Gh\O6ecQPaiqg>k45JhcW#k'A5>PtrUO>8,4AH;_ZP(P';@9H^\YiJ(qJn0Jo5pTp]"A8nr!D>%5
%1.4$P.2sHO]6oEflnTJM#nWu$&P6u6op;%s"*Q.BJlbG56:!m?TlKi0"_D@:JYG/21ac*:%o7JD#4sI85^<)0O2a5Z77O(T*mIg6
%+qNfA+#rKQaHR"2P@A?XGr"d-GW7E+M&ZR8+Rj;b6MSJ3K9XSP\Y`,CckO$Y^HP8(N@p[,g?jC`K](VP=lrsBX8$a&/"m7r`V;IT
%<nObOGI,\KRfUTF%B\:KWZ@^E#6:NRTo?jQC0IBKW%AFoG]qQ<mbfGgebt>Zj5K-dNi*q7;oClGDB;tp<JR4ATeq)X,8El\Sna_p
%gesRD(2t1DhO+t@dIbU,92X8"&4t/-l@kg)X]BU2,QaDLD:JE(,(@+riTGTP0M+"d,lBee'#9F9+JP`JeQUQ.,o5EdPOk,AmabW>
%A&@WC_g($C,Vtu'X^3efl7,"t2]g?V4=g5NHU`!9=bbYp2;G.2"ZS:C&u><ej:ml>RPNCeT%Y[)nVAFZZQcQKkIVX=AMB+Z%Yd=Y
%D;=@6&G.LgZ.As[X4,08:JI[d?hqIQRf3TYkol3nQq!DOj,\IMa8SA?:%F92_%D9fQ%%ifSl&CHa990qMHg`M4*i4tBHoi^X+o'Q
%%2YfK5\FmdEP:&V4*ZA%Kt7+)/9%UE*J*%">4I94RGBu<G2+jZ>@r'%bjM*doA@XU>W@ROAiK&"cG^XV19m=``3*Pt?j_m7?0a%?
%]6SFCbLCEtg+?78Khh%)ekNX<gnh&8_Zi1QrVnMsX<Uq03,ABro4"klVT^p^[(/BVg9G,S)DJXnn\9J^EtRGW6Z"ar2^?C9\ZDJV
%<\E#Z!1dDF:f])MCU2t?MW``odS9AhF::([R0A@E4Hj&]<m0ZnK^!LrL7_b?m=MdP.s[Cm.B/WiEar1I;Qnb@>J],da9Fa_nTa7O
%6[<>dIT'phH5Ji`h_<bV4e5pWd7os;!R?SJ::m41&R\1EPgDmF(F0GTB/V*p_R,28eQ'D'_TdrPV=BoCdfhadg?C)Ab5iO`3@g7$
%[Acsg@>A@%L:a+\1#is;Bk^:CY&+ZTIF6<t;E:HMd-qnuY""cEi3Q/WUQ'Fkq#[OFYq[sG=N!L0GNA\iXQ30:?Q:N.:.J5dZ,oti
%[h&9+5hXp'rOGn3GrPUb3T;t2JkFTj?a_o8:]3q9[Q"AWoB$3]$lIPCN@!83JUh?u[^i'INUs0rd!*$__k`.R+W@ldQ36H-#'OE!
%aLUaQ5NdCV^2HsZX]oS@>rNA=_Y0*Em-$[g8M9!j`$]-n)'bZJ9[?\5WZl'#EX%k<Z(+0fc64k(OFR!EZAU;Pb;j)`0Nl[E0B\F`
%F3)NbADDg3=_*6o]Bi6.B&4BL)CmFp=I8X!bB`.0]^[8.[[]9_c5Y*G4P4]2GQu1f"m1eMN*qpY8u:-:j*D)ZO-U_*)gc%+iL:2c
%f/"n<'BUH[E>.:>K?oFXTD2D\dtqk5IAd,W.&"-2\0,_^JXN?'DEXRq\ICjN\aQ$^*m$8-0@VG]VJ%tV[N$H[Wt@*g*rZNUPOZh)
%Z8isQ,On=7C8bkt%)&/L#*[N9HME8m2q2`t:s3;':g+Oqp6O`ObOMq#pmI'.Gr^=35J`N@@Q$Jg^c.UTB/\D1os9ehRZq/_ZfgW;
%TK_FqLM7A>*f.nI425Lm:EkB(NJna_/Yq+L?Zf<OU6I;nV"-qY+4(s++kegQf^=A0/H]s#;^UUu(l02^A9J9LHNKC\[inKB'S1m,
%Q3/e`JX>K6bAuP&^G54e%^V7J(NU8pO2!4N?Bt[HbCQ#A^rpcVjZc!!1;!&>l`B]GRfT=tRIDd"#guf/QM[X9M7F^:q/Ri`r:(r*
%=aHsa5-VoK+Tq=b@"k)f*gR%3bQeUKIUIm,KkU)8.t4n4gV<)h'b.:7;m_DAmE<dpNZHidGE0kqSE?Sfr!K>^I59'9q[V&fhd,r8
%Z^0#0'W8-WMUNs6\idfCH%OMHeFYtKee'R&7i2Qn=<hq=&MLpoN['<%Teh]gLAXJQ*qABD8E-GtjWDc*b_-E+q?sqFef>@or]XH`
%CV:80'fjJ3_-2-(iZ<F9F[k,Oa'MI(U1P9X0)Vsj0"aI&9cmB,@41/k"uj@bH%s_`(YP%G="55uMla`kb:_C(/<&m=`-iZhQ2QN1
%q0#u-L9?lbMXsZLTp4hN%k5r]8kJ@J$rK;ln]ajR]<V^tXRsg"_YStk,FA$RMA`7Pi[pr@r=a+_!7M6lokWDGdkA30lq9hRSXNI-
%s,):XhmV2'#*rou/`Q3i^M9p[8M9B/oAu*`F55q2O7`<dIF>e$#/V23/B,3a";Yj\e-t3[nu'@&\_/S-'oq$O`]K(rmsL8=i/=29
%j2.`1qRE(lS1!r94DndL'J2dN[#Bij4!MigjHDXXjUUkC#l]d7T]KSU+,o:CIZrQ-#Pia`P$@>sT<DSkX0$+7o"3tKS`>*?NlrI(
%bKb+<K7(4^I+^G2JrK]8IH)N3+TJc:V!a4]Q@f(j:@`[obb&m4M^+9IMT%ns`7K;Y\=:%B<j.oCFd4&Oc?$Gsc\eYfcRAK*C<OjP
%0G\8d3Cp]JOt/"&2.``T4WrV+G.eL_=jbgKo3JJ&RP^9h[+u#('sr]GAK6;n'lasU!J>'Ul^F<*2"KF$b50Z7Z7D>XBCkN4Bb+c]
%:7qA/dq,sA0>%"<A"<G!lNj*MI'?4[&Y4;JJa-L1bHj`G!cR6^qhVKPFq\6[OH6RXaStuUEO3$GKg-e,n.cGT#e5]+kPg^)5<$_A
%'6:DYU]%F'[/L4mAE'5;B*%-e4qW.e]`ihp"a4Q/!GNOrG.sP(=R8HZFO88JUdY]i5GrXFmhP3M\CaNcBNDM0!VKOZJWR%j<`C<?
%)1Q<RB+ZMF)39]dRBBG(W7Pq-+,?M%-#JUZf,EX@oie38KleP*d6i2FC:6*:G-mWO7PC=c,&(1rVMdf\MM&>?(C[.jWOR3U_]7t>
%V`,U>rM[d"ij?6,429jl#LU-97afJR%k$W"-#_1#A!u<R;ghq(Z2?CN/H67cbEjS.k0&s%d<oX@B>,;k]f=,&q#8eS^FT9FpU`!n
%r;JUrr1O_fg$J0K1I\TSkke^kkW?8.p!qm4.sn?7HIGS9O25Gk=[X'PWOpPMI<JR,C:g1L=i%2(b?A!EiPs"ETX,Sr.'")bjm![U
%i..hL'5hD7mBEo@btVPV(RrtO3@87Im"XJ373t0tT<^*[F="6`/;;X&>Ad-8<9c>f%E6RgbRj9FaD,B?<H3#3C.W-(c?)"5]+&j_
%6n+,1Pb0SX%O0W0@^qAF$0:HCHW-R#Z%mDd8HWZO8Thpni:1H76'R\dFCchLDBNQ=2emcK!ubH6eaktdn0_jE(2&e=3HR;f;t-G(
%K3l'JIRGrq.'eo8^lXncF$+b[4%fPVQFr1trG^8EMgZgW4TYL'Cd=Jd_0pVYk0iDkYg']q-2?a`kCNk1Rp4V%A=Gr`,Z;S3"H#mK
%nU06f-67!u+#5Pe/23<oeoNYHDZS-5)#e9*bEfOH`c`+[^d$;-G"lo=<>Y7=9@*@e4eJtNHnJO*oR'<X\+G'+iq^CMnI/PW-/(L'
%:HY@"^6$:V\fl)IDUoGK_@=fQ4:HsJT2(-1jXDujP2_K-2b0(Un730#F$i>iFn`bO52^gPo9WL$p%C*RDF&o/jmc9-&2q%F60FtZ
%\6/N3nmCA*.5s*-qk6qqjScK=F5"C#XY9/e;o<Nf%_6s)FJo#bh&EL'goPVcX1kn:Mmro^(7=4LXBd71no`LkP&NZQ%0*3rka)[S
%r0h&#:V.i]hM3J'=&c[OT9s2KOjg`">H=*K,6(q=3qjf6QTJ:.O2a/coLFgfTZ$DTS2M:O0BE&kEgX4AB8?b8!Sl0+oS-^i>(-39
%cMqeF\;3`GB1@3^k-7>G-B[DZ3<(*:bOn-DA"l0#lKO?^BNi>L_o9(0j\h)+LSDtg)KXTH0:-E)QYQG\!.O`MYcjRgrL$a?/P]J'
%Dj'pK"':C*P\%#+bgki9=8U7?3mMDe#J\"JX#jPu1%1T-f]D7ZM:=*MjqAOm<L4pK1XC30,8tV@$;4`67)KHCb7T`Ec$:,Mk*I;2
%b7T_ZPK\&8@l^9g*7:.o&Ij,(+ZaOo-D,R,0ZkOEjMW3=r7u"fc";t"ifA50Kk!$>Y;ObeMOa^d8;E*kBAm0Tea46n0=3I!$<#&+
%@kHc2Z+AE@5@>^s4>iD,Ic[npTpP4J(lOMg\S8pO^RP+OT&lFVQMKAmhtuU4Sr4_"RIAB*$-R^7rlFnRjEiMFl7V\A=m(,aKX=GI
%jtGQfZS+XO-@F!iDjg)H'>A%ppU(YuSfF\iP!&B'j36W.kkg]+4l=dNdlC4p!afC7neXAMT3c,TI9m%^CirjaGO9dC<Qfmg9fo[A
%kNE<8hen\F2kT='V]sMa^A2I,`b)>S9BS0jL%8TlH+=e/=?<Yc9qLqkp5jY&T2fuq2(su<ceuI85@ra\r9>"u@[MAWE3WeYiT:3"
%DBd(h0m:]6r4AI*r3+?JcE1M,9#n9re!VgHp2o*('5PT@_fDMOo04>o-),sb$aj0*T$n-'F$ETHl!fN!?;k#Z[?4N0C<>:VbP3<g
%U+be@)Y!@jNB]2YhBnq=g'smS2Utk&9PH.jQU?&"b;8jS*r7j%VYHpU:sK-4CF:n3DV`8ceAA`gV?5;Y=T#E@&[`"g/4r;N7rP%`
%qa`d>mGH^3r,WG\r,SWDF76tN$reg;$Ze\Z=+=Y/$Yud[HIL-M4Ua5!=h5/U=*N+(l*I/$:iUG8SJ%c(f"0QG2uW"AFB2AOE7T3\
%XN&R@&_#t`L7an19a[W^1Q62]&L:2Z,,;!Dgo+SZe8+bA=FDkK+<0gOaD,B?<H3!Y?V+src?)#.;;"3I724iMjbdg'<CgQ8c&*43
%nX&gq"Z[,JF;;])BL*bR78h*$eR'qFWM26gmM<c#At3!P/Zn9[jELS;#%-:Rf"dV3c1DAh18V1]'#b;7M_][b^ai8eM.,6MK6Atc
%]PpM@8mc?_b46+Lj][m/)*)nN=c:`$/GNB_(STrBX@7-*<:dj?j\*MoV6@6A`=4QF[4'5+.0#4^k"DjGU&P41;-Z,D\TdA_[4(Vb
%;(pOqb`.,LWbYI:l.Fe'YckDL`=4P[@eIKWQ=^`\e@:\'-`h*LZ<Z`4B=V4)[?SVhS[bpaK(u*CbS#O]FfHTKmuQSPiU6KB5OhO_
%]PA++1cJopMfSO;++0L99^#?5af]<n:N-3mYqo$Cp[9)mMc[$1F[tVH"\V@pFEC/G#EE[bR\m'NA?4L0Gdr]&75*hM.gNJ(TqXff
%/<?K)`qDLO^R_k(4c.t;21"aRMbf^0^8e7N<DUj&F_[L(V57/-V.P]Bi&L,$LYRk>NJ:I[#%3#uFM4pe^O)fG_sLa%-YO\,6k#j^
%#=t>7+/3-UL?K]GTc*d#U@=62qYg34jBg@"k.<hsC'VuA[&*fQ_V^GLCcsn<[.l'?K',uF=ST\*0CT(9"h;BGn<o%RpaZ\ITO;H:
%"u`Qqend:pIT;Wq&q1!Q:)4`$6NmWjVI^6eTV)]Wa:unhU.O`h'KncehgV;<-h-@0!#aYb(GNmNk';3G4QZ$Nrt61Tr%1:R3<dJl
%8o3*k)6q4Ok]DjHP_RoZWi0@KP:M(dH,MUq-Cj'4_DMh5,gtbW`A*AXNZfljIh?#!IH^R;>_sRmVVogDX$@\d,%Z=XKL@(?g4FLo
%HVtM%P*uMP`Zqn]E'qR/:`R`T^FV2o_$?!Tl36su1-?p/JVb#[dTCO[9JN>obC,6?*:8Zk-ak\trG#JdiE4*PlK;7VeM"25/?n>P
%7\Em`+/oEO;7.CX_t&b&eOsrt<%L[=0e`5NVKc/(&QYVko.m=AA0aH1Qr=\DnE>KMF#55;?Sb=U.C9=pAJiOh<>804eT#rRGP^](
%J@C2Ik9pY19iJ?N-phYhPcY_F2GlVf_\)f9*.^/+gDIJ6[3A/)-mAtTZj]>FN+J-lbqU=G&JN'>$mlMKAOHqO8\d(1VBd9%YY_AO
%%lH=giu`!^jZX:Z"Z9+g"hE:$nG;;?3?OO63o,;DQc=FRWTYEb:?WYec2>n";/`,-rh$mM*%@H.Jk9-40D3[YJV;GT[]R=2=p;ua
%U9?p=(_kU(1l'hL@iYR;7m$aOC49)3PG4fEQOi-!op;e?<p/S"@W]IcUItSV2l;?0I;Cs^?Pf;671I$+A,=+l^]I1#C=g^":5k;U
%HtP'fFgW5&i#6p@Y"m6#0d[\"mo50oc\N)FL\2I-ZIY87Mm_1C%6)_+\aViP'LG%>]*/=!+%hRW/G2&0]f?>cmuOJ^W2$#-"8/AG
%B\[Cgs2&[Ee+Z!'YOVElVVJ0K2$`uk!1pjPcq7ZcN<_G7o'B\_9&g#:ViJ>s"FeXQ`t#VPB^0V"df,b5`)G,6Eqf,TN.gTk=,TA6
%X#FHq*!YlKRQY6?C1=dR&R@i=$XlInX`Un(k2IWnN6M&aEt^iIf1;c=n-]fj,D:T=D(b<kWa2G0Z.3bX7fM#\XHq*3&m%,,KALT)
%-HabZV4h$q-X-4@DJMPEN&-AaHG_FpqN#gR\lCsF=?`F\PfohP9r1c1i"f%6U:m_t\PtUqe^/cEUYsNV9m\Dm4Bb6FL[B=/L;TFj
%#qbX/bF?RAe$;Iu\j]mZb+95LU@"X;<C?/[Ik#DW_!)/=e6A$ulFeh"X7t<m3]:=-LrVd]>si=Kg5:IT,==%dg!apd?M:ak[VET`
%I*@\[Xr9DU__KSM.Mt5^;dkZ7dQWpV"44$Tg6k\H0f!C?*S'qYH4&rp>u.c-Fd8]Pd(36h649m5p8bVk"63#>LXO9TppB^5VO"Vr
%drVL??M"eQSno0nS*CM16Hn>&HW%YtY1`r;@N;s#gP?8$#X&_^B54?qf1X>6><A.N;aZUVHegSn`KZ/A!S>='bUBT.:T:@cSDN\7
%<kjc!6WM=.pUIZBK:ri=V@gH6lpgU:FB[Z;C'f$X#kHTNX5+Slj[K4KmpOdL7?+J5l7/@oS>uNaOJ+[sP?<AL9n_P]hMrMS'(6^X
%^n:*3G"3"TW&--WG-B:2O?8F!-&Q$qfFQjlkj9PA`Zjiu!q[7TMNUA!V?DX_n&-,X._tO/b6YIG9B$MA>t)6Le-jMV&e4M1Fsrh/
%!N4TAoCJn/jI+b,r]G@FGqNFo\`ht#/tV7qerZD&WiMHUF#HZGPn;Jod8Q.`HSXjs[GbLDPc)s]=E$7`X=mAICZtG?Gd,/k6,;91
%DEXF`obn94Z*%(/8H\BA3&RW1]3pj:q*,jXjOM8TdY4!;2Ut>G3r$.)i6mD*kU!'Vlu!*_%T,J_3bmAG7q+H4)UY6B7=pLCV:F*Y
%^gNup!44;<H-&F?7J?67jfu$#+@K#>f5?51k]gu[)Y?)D+0*^X1DlG;97=a!^uVq-6AH-oJN&'E2OaQUX1El$-8>WCYkjM-[*5D+
%]E9"*Vbl\:Mk5$kXSr[D4\%L;7U(pW4N0/hpO]i.Wb"u?$WW<]CpraC@/$R1i7;f:n$[+UO^+V$n=,ubUQa38eBlpr(SF'n^S0D\
%6LFa0@aN(&4^qg>)>JdWY^4*O./:<(&"@9;I>Mi5V_aa!7!0h315nV#dZ$#dBq-cHh/g7kI,BZX?MU:dobq*Fk`)$:@40cB=F><l
%<>>ET*K;6`*Q0aW=r@GW8%aeM]Y#6Djn):ZfC2YXkGB=qk40U<SjOM\K)Pa_g>2iSf^,R'C_.H^0n<[rU,o/*;YIKiJW=u^(=l3n
%UNN-?#\he1LkUCI*%02:aq&dZBo6C.*-MQ)hep%>m*q9*C8dmKCBP"'N]bce2`h6=G8gNd5]aCr7"S?s73":7ghKKa.fJs>ED;H=
%+QI8=EmmQmFn$0q+S]t$!4qBVpo3^F7NdKb`Iq8XD9(%FTVC/A#E,Oid4:J)Gg)4`7BjkL6-!dPd=mDl2\i+E)68!#((KJ+gfJ@F
%L5DEg?>4P7j[O=<osqlR?KX^OFO9$!Bg@cS6ET@1RP#K>+L9URdLQ8D<aQe4B!#(\h,\1u1Z>`@PNXX"'kH%l@B"fZ*.oTe9GMD*
%nKh\V5%1$YDtHaWG-u3TrBS^3-U7aR%pDFBl9Z]GpR`+XW'M[.UKFN=EHG#h*8/t&JjTX+]Z^U.6J<=EkbS7`A>31Q=XW,4:dc'@
%ZEM_oQsf<i`G!iUY+S+`#mt:R^hKGDb@[8UdP57T^JJV>TfrH1$=oF\Y&+69hX7?1SV2uq8ZDm+pf)Z26$,sY54keM0jU.TAljYf
%8!Xo3=^EASqDfUG3:`DKc+iD%#iBp]6NAeog'0g[?\SPagB)Ws%e3Elf`obJMZ5rHM4htHmW=V6oB=5/*#aF`H?`s<HC/_@.K7P<
%##oV$p5"rm/bnqd"EHfB2JOUS<([,2B/GQT5HH=mPYuo:YiUfdqt_^-5bQ$.PG>b<%@#]$]A6&?i60k4h=tP!n-%?T9>mB96JZ7O
%=6t=qJOnDH2Ca%=6P>Bad2DBZSRkXcI:/toQ^NkRi63O[4b,hgD7#&7pCD%._X3CqHr)VMCY<b:Y[=aF7mPdc%$WPb&3^JrBqqQ&
%Op0?1Q%Ou\BbX,6r*tG7%M=fjB[rDS-_,Q<Jg<s(c?=S;-\bS]7BP<D5&uI-=FEdeJ?9h&"+SBl<1dGkc?TN?Dg\YB+L%7N!?"ma
%3&MSpWlZ^D7PHfGZAiTo_sF-8N^0uk,qB#TH$OG#5TK7"!122<C@t:9k?Ld5AW3H&NgU>7=)6`fo<Hq%XO:kJ+8Lak1MDbSkhTG"
%]GubGJ<lWglQ<&_5U%-eN)G(Si)#dtTimiqhRX'VK:X$i#\gu(L6<Ueni,7WUX/OaR:Nc4mqJXa(u&hkVUuV<^+j',86gm1Bbtd:
%&A2L$3`LO2UF,UG*h9U>R5(U#ctGerHI?:BeXSNe0Sp5CFAYLtea\*]aX@Y3<o]qb%=o\kWcY/LeP9Cc6O2MK:N]bf)["De*M:b"
%KsW1dm*O4;Z(>rIond!K6R(_3*^6/LBO`"7Z&_K9d2t-%Z[5CN,@a)n$[,oUj%%I+_g0O;7RQcC"L(+:X0g%3K[bcU:unSaWZ+[r
%TVq8ng\;c<:g8U+:H(`aF48j@B=t>0/-B^r7T7cmEHs=hTXpZe\(\p&7R\ng%G0]G9)GIiDWjdo!K-[#;6/oKc87LOEbgkio$FX%
%$oX,H!ic6OB23Xl^2t>S*[Es0r+AQJKOQ9j1\^q2&h0(Elg6;B=WJRS"Z,XYaY!BDXXHc8?-hnG[[GZqigR5T^!Z(r0Br/A*m6=f
%Xh"c)#-f,DICaeo,MGb*HnoM[ec[_\_Y0`r:[TpKn_i<:g#!2g[lYu(7Q(g9(e;hSW7pg6UqAcnRrM./G1M>Ij.rmtMHh/BS8j=X
%bi@hg`9<K)<0B8*enL.KV5R/K/Q(>tefs)9i-&XLVqm2O:75C$-5+UK%1DHs)lk#eA0QAjRZD7]#GjgB\60hf.oX07#/ruF4XAl+
%FVA[h1%%60'5d$&%d6?jk!'DXH`7.WFq]4<Cu.E5M$eB'FKB=RPUkbd`PZ2m&.`)CDUf45HA_(>;brNP-eS&=G1M#>XeTn?R_eno
%]tS$(M9=;,(i)MX\"QEqerA;"H[:JmY8`<2SU$:_*H'_qM?)m9r42[*_l&Lg7(So^`WFTC=u7='D%S%2Q#[D(Ol*VFV.>FtfS\:j
%Qge='S_`eUc?EUnOne'=.^&KR&$A]/CZ//_WM<7X5?Z+X8CKE'X,)M=p);AN:Wfr^qVc&%n3?W@RJb&d,/>!$T@?tV7L3?c7A?p4
%B%+ME(>]dqO8G@omWL're0q/-Im$3oX"5Pl3nM/-EDmTj=K3@hik#O'R6KB_$LF^rL6u`h)X]BHOa)1jod73oo4UL&,5iXc*f+h7
%ftV`:IL%[IeL+Vj6#.K33Y8`$O]WZX)r[NF=EP1Uqh0L!T\&9676doG-$GQeNKi%EDkL\FFQ47jJjH%IWjn5Sn/)*jC<ugbGEY-8
%nF<(1/#eN=A(%$d\!6pN+M#B8%]fJ=75t*jiUYb!1R;VpA#M%"j/lnn.X'61iG!fD]sW?HTMuDfn_RC-"g^:aFq-Ok??dth$]-fl
%U9].BSlCs![?se'\r_"![o^sn4I/W>o%JHOr@(^"An'P$iIruX?7=\Y?YKI^N4Y'];i.uQQal`9m"R%8okGs_fqs=U#HskH=k3fe
%9)85DBf)=45#!>Nj\s#:Mq>lMO:$*a_$g;%[IR'`3Y3P_&h\9-U4neKDk+<Lk1Ve'$00V+>#j\#K!KC'R4`bl?EZ,fH\VnWob_,B
%*pgT.V%TFGgH5D%/jGE>CRDYUiEF)@l>p(noIumK20N#kA<*B;-T'DD4b#QkRbFd3#,B[SiL]SA4mrtVL,gIM/nHoJ[F+]eCVjXG
%l-BK2"+:>7\C7^haX>8&;'TISbmbe5eJGF?OrZ8^]"3iXpWUm\*-0)Zl_2I&NfnsaU?j-@\ZVODTp]TQXR$1)F!)i>RCg$D^)5?(
%GB>35^j)"N`>il1j6G+<V0ogC30iFj)?7P#/)"l#+:[Na<DppA0?/Z1p)<h"+FSXNK3M(:^:(L\Dr#FienA@Td6d5D%I,qGpFBo)
%GP#r'[1NrlU6h/!-9V"/&JP)1Rcuk]M9=tc!;Ph:iY%I,\&Xe)LDEXW$>_1ih7lDXr\[R6C,aP@ohoE>DBjI1G\BWdNPHV/DM*B=
%2)>6Z:T1s/IB0KHp5\>gS#a<=gfEcXJ\K+c\nS1s95a.3h[Fh&Oh4/X\%6#`&6/72!7Io4SF0@lJ!X43(u8si7.[T0EV$=QI?!S6
%a+FB_H4BirZOru$HS<coYJ:V8@US9GTVNG[8tc\<1:s5d2oAEC\fls/asp\u*FI6k5kC'iX`(,9PIl5\^:#9Uocd1uJt!)<mTT8`
%b0C$4h&FD,TGdZhrQ3u$g]@p)_6;l=reg/B-hVM33q^TTo,%?@LL9-kr2RcpQP,ue[r)`#YJ+*[QQ^*7j_N+s]bubO_>NrBCc0Rr
%@K`e;1ODrp&iFIZH8pRbjd:>&S)"1.X$c[T&03T[8Ko]6'[1/C+i+OSrFQ[+H"6@0VI2<<JV3\u<X":P"<DT:J7(Jmnq:_E2p&.l
%F&lK\Kr>/KQ`^3OC.Jg?:I'Lm\_fLsNtn^d"E'J]o-*rIM'7=6jdk%#$g:[]r5&q!6l^)VLqYV'm_'M(8Ye:uY6^["koa'_baA++
%]b.Xtbm^rj=(GcXEW>$=k])PFXoh[AWM"qmHH\i/65Ji*..i$.lZ'8I5r7Pi5,P0Ds0er]KMT)qng'OiWK"[mcpicBN%OT[B2N0t
%M_(9`%-ANVF'/8sI5,`IC[g8=!>>Hd:kM:X..:+NN6r.SBibMe1kN'f-e(+i<F6hbD.+1gBP8FsT!12%GY)]nqZF^oXZ"Taq"nY(
%%%=G8&7WI@Dq<MQ6Tgm7j?jE2..ja8%h-7-!ufQ]Rm6+`+])")VN#l]+_Qi2L$H'cIis!b$Qq\*3#nZ17gmqH/SHIGfi/?@R8b#M
%O![A$d%=AqWRnJg:s-BjXAN^e,Zt.>?k'uR6p5RsH<#r?cS(DkWW'Ut\lr=Z_fp/]E'XMh;Z^QlNr1h2#oH,h;%<:18Vig.q]5uj
%n5+F%U#%SG]t#H0CV@pg`9HN5bYD(&7?(W^'%ohTfdK0*f;+1kn`*:jFA=]"p&_EHIIusqMXLT:k%f)(6aF'tfSp2!9Yct\d]m7=
%Tl)6=D*_RgUaH[t@g7jP;V"=<4j\b%)Wg"",Gh0jF$^nV*'>+cGL%l`UBn=/U_`n,5KosCS2M!ts++FtC?F!U'IJk$q*PJcF+'-H
%8WBB_4:%U_f'?ojGC't?1&!B&bhE%b*]0/s:/6NB9ci@@RgH&*:B.F!nG"_X)A>$&"^a!-&UE#h?*$85ETBlc*7:L[Y83aLmQ$e"
%@08J#:4nDqS#D9bc4iROFY$iX150E8l4e=]b]FP_i=lQd).Z$dWs=6\h)C%_=@9#NN+=F`VuiQ*2K;]'=2Ds1p<[JH#sR`uO4l*Q
%=n[W]F-7-flHN#DWqJ>jX3l;>iePRTmr[gb0Zuke]X!r2(Ud?%=.OCNWu-en@AC?9YJt@=h@Lh.nm\T6;\03ET#U&.I`S"!'s;I'
%+dBu/a6Lm_GAs=\o2M[DCf!Z%-cgGaF*f'rg.OU6q\=sekGR^t<3k&$A_,t?7.b8-D>-=/9:;!r74sa5I!<hV'@5OkHM$2ZIuQo'
%X;a*:ll[b,2^krf/*<d(44lOXA6%YK2N:U>LXmK8[OaBQ0oXg$(HT/g`%?YA_sf2!8)mQ;Ni-`9A_XKM(tX[CW;#)Xl?J*FnF.E_
%_l&(bN<8hqe=pn@\J$\u:6&9-^)[\gf+$eN4677M<L9]7MpGTp['Gh-ic?VjF5c!^ebj\%H:.K;R_]o'h=ZH;QfC?j`7TN]oZN1P
%GsL<aAis%XBu[*dq:LiJ+hD+UMUTe:*=SEtQnacKYU/%c6'_rTX'UWu*DK((!Y5iP-/[`-<Os$;5\$@;H7uqXT3IW*dRWiV#)3K4
%P4q*#]?>>lVg!6N#]ft;]UUB/jW-tt[oO-,bsNrm5@,Xr18&t)Jp@1pGlc?+h<a_VolWVZ=`p7hNAZ<S1t8"5%:YIHq3CT:I!K%J
%!;*>KaF!9!X5AW]qUu/a=BJc4:<7/!#GL[pA9%?M)iea=$\,sE%V?NKWIeTM[I_;,3Iqk<fVFs`c5'b0>R;Y4;t2/,Id/Z1D93UP
%$?%18)]U&h.'Tb7]u-n17(T?\`;&ZQ@.[ni=,gN%r2HIaUF.csVosfXJ0>rWrb`qYOP*)8a<_#k?bMdJi,1#$5t`\DXQ<A6WuH8>
%$Eu)4OOeRf-X4<e6-*Pj(Y/1>W.hksY,p`#%]scuX^616rb\?\qn#-FJ4.t;M*4A3f=Kdedi"6heLP_tWQQ,c#R6$$CjN)Q_pP&Y
%6,11R_oub3PtFU%]JtO/D[.R0WPmW_[ZbN^5^@kS8Ul!_#ip;94>2Dp,9UFffiL]")B&njSQE^4E_!mB_+jKB1s`(kNgeek9a(;^
%SB[ERX`g@U3NJ9mjA<?LMP%qm%n@<::W5RT7gFeC!M\lR99=8Vh%i#>[8B4tnkC'!k;^O+#_mXT#lCUqj1Ri*_[iJO;io>+?8C+-
%WlMN42',_eb=5\@C#)@ILuN"=;Hl>cm*a9t.!Z^;a4g6kgdGss.q/YB*qI[?W;'=Ua3D]/]?,E-].q0&q9@PC5V2DP(Y*<SD0q(l
%YdC,Qr:P&[52^OM[].Ec^;(48D+IObH8Jc\MXi&'.:3^QMp<ahoec2%?;8D6:XrE,;S>2!gS`LtH++i;#)R64iP_LQ<`4:$XplWF
%bH!.Ud#D4g88[D+2RkfH,K]_hZ+N>gEj^sB[5r#+r&7m.hGN=7ks#`?N[+#eiOch&=R_d$%[qCI!!RZ&Lg4!g4^7"Q_FZBm]IX:3
%U%:4=d'hjQIMIO$<%Di]-M?d"4j%;E:$<+C7'P@sXf9XM(9^``cApq$06-pFkp1G0.F\srq:=-#5Ul0YA'O?@5HZp]/'t'Ampl#E
%]`fI<>DE3]Ya_R*%*/[Q9%.C0l-@cDd<`r^)DP9b]8;D_"L6B!0/0321A%>A+.B@D9uSW<m'morM.eaA"NOfI[G*X"@eb7$EHJFf
%6JN^lA0AF)IGa9j)TL$tb;UgMI7+S*2PKP%UKjPV+*Et;p6JM6NURA[91NpJ/0/4D)aCDop(#fWG,)E2,PY6p*R4qhcHa+BE5a,u
%I,OVuGn#),)%;*oI82L#`u\tAQ"_O;HjcAQ"FVNdSgJ0@;)*Qd!]f&tU3a1%k5J46_#72GUlKm->7ab2e^0_VKtat!i>nB(F0\sc
%`]g3srFlD7$as;R74I@QFTHg]8gR,S#0K(BOlQ/I"i$h-=AL%HF`\F6i!E7#EqoB)mS@X-Jj/BIeds'A37BSEB*C+h,&[.:hma'u
%.XQo0R\A\tZXY'lCGabKUT+6;5@.#!WP)#QKPe"j+?-#(77C-+X(6*bQ&8o5R;QI]qd-]4W-YY.q4PL=c"nXu/&Ds13aO%rPV/"e
%,EVZ[b7%.D_j0B(#%[IH!X^rB6DTaBi!fO-1,qkfrBMTTPOrKHrP6>6J.ioj/B4=fB4-duCX@AWpgMW1OhF6,B+N?Z>Kr44hiR.l
%k568b:Wfl:K/r/Nb6)+.8_W(5nD0cHk'U67%IKRgXp'u7C$Z2b0SMta]WENUdSZp#k4Ji/$_.@&j7H?X'37I>9d'A^B5dY)]kKs'
%LF%)qFnVP-Z!Fd1&D6a6?RWr+"R8srdSgVAKnfaYI64]LH`0/,K9\rOVr^#Dj7uY(;?]e@pBp#CeJLN*1Lnq:+_IB8i=+6"L4M<q
%mjspbM1BEBgT;&.9pU)U02X/0>X<A(0VW+)3OR?R="fnol`6q!8N_qRa(l4I'p>dK=!Du-luV1YFDn!?'0c8'32LF:,N5ON#Y2iA
%5K3!%Qb_kCf:a.d[%irsrat)O_&k2:OcJmR-#n7JU/?qaIPo]"Ej4-#K\X7CGj2U90#!sVo"rQ+:@D$n%c4[YO="hZVtO"7;^;1"
%Wpc](#9MUkBcT"maDL_H,N;;s096*DT&O4nXR@1;f:E)Q'Vntd'gdkbSVo?,FQ)HWrjE!9l,Ep[Ig"j1),Ef#?CuO$[&.@I-Vo<E
%:4X@J3Rq,c6n5g")j('L<jYl.G5?[5<b:RhR;(Y5ENkB)RMi:&)WKK6*q8Z:*F.AgDtr`pZu@<,#4.Q>Ogb`qhRj^Ek!X$7]n$Zo
%9m*2[*^3-H2NWgl(#.Lo,dt,:db`:*Be1b$Uf!Brg.4ms_L5X463Li=I7]7"@O7Q(SfXYpi9D=l"uCq``<p]'l9e[adGGSKag^qB
%;V&8:o53k%Hr&\G!Vf[)b!*J+c6ea$`&2%!)m;Bcl\>(C8au8T1S7GV>NlOqpb;CF_uaSN:!i15qdeV[WlDOf2IKGam<PTJ/L3C3
%B_B:?WH,KZ)>"[i@!hNbKDg\9pVXsHI6[7th6#D\X^;Z8s.Ks<3`^bDO7a36&[+XGJOI']^DR=[.-BN/277QFPG5Vb*Sn`jTb6pJ
%O3g^`asW+$,X:d\aDU@HhkPGU\;WqhXhg6K)3;SkeO[U<1SLW8qR.&S*I;e+f<$D)=i=h0`*8pOfF?C>]KCtug#G^KFF.!jC=JIc
%5(^Y>Y2b28UA3%>/Nh_lq1[2\PD_k/\A."a(Ou#"07s<%GJK^USRh!C(i$\:BWoNZabMaaH=Hqma(R_&p`(m88mR+HFX"s&_ScR@
%GA1kB0E:"ZcY6#hn^]1s#K9qTg#%Q/OSrWN??>@&2]=ilY?*YFA/Eu"C*sBm3LNO9?LSOAZ,,ihVrc;Am-"`j'C'-?Cr&s%mJb,#
%$+4dZdTYE)d<^-IKDl07/gr4e>4W.S\c3KON,?;0[*"9b*f&CT-2[lEP-+@RUH;S#9:PhC5Qch"+@-CJD-J/J]ZH06Ee?N1G]VlC
%rc!f&Kr^u)%\Y8S#4g?f?6@02On+UFEVn`\fgO-@n:s18jC&09MB3EcC7s2W4ca\lVa%#u6%G]-+Mm*HHm\=O`^Gin<FkOB`&FRR
%\)T2eCRSMH(aG4Y=dq*)g165O"-U.'BJP4HJ8Id#;:_=1CE"^6@?'!Lelh`S+2nYa6g>U'YU*+]D^p3h[HRs0$CJ<'_2`04R%%cK
%M.")@9Ei8U@q.PY+O1IS&]=7FVGLPA-*X!"NNrG.qa.MTeZXk9@0$r(<^J*GUA]7;CmZ9eS"dZLV%9=&[Hj#^VHCn]Bt[e+I5Mb1
%Xj:UWI6jVh3+di1=@7]S>diaHTPlA!>'nuSUEMR<3T\<b$i!W%g0NZ-TIH_d]hs^>Rei@d1^Y>m0Xj;g8l\Rr:/Uf-CD&k8oeuu$
%"D]%PAhsL1jr<eMY-c<mDd%W,N:SYbX/[thV3bqOhGb0b?S-<Zp"4F$`reXlGLY!XIY]!6L5rl\F`V)+)sYIbH:'4]r:p*PB6epT
%Yh<-i<<=KKX[=[hXLAj^rb+Au5G5g(d8Ri"kT9cPNVYo&(hNi=#>rZ07VT5@1Kr:X9]>N'^-kVK?<"KRjepgnIQ1EO&K`!RF/lXj
%XtW$pPb7se@8*c):%M>n:C&>N\&rqSD&SsDV,ao%f"TIea6mi8O48.rGC7TbF<1A=J1ojpbd%Q=%j-#BGG+p+pW,?qc=]BP5O%Su
%a:Fglfc-!bHsq!J/,,a!O@F_+-Q*kmd9-iemc&:KAW,\8<oltp#1CihO3\Q.i$)u`n.AsQ#t*$iq>Ua;BR@mVh5;gQ'(LVgK1;&n
%)uEJ[+5$`O6t^T9Lj;M3"I6-IO0WOM>%:1cJ18(pW)sE8e'@_+Z'9k-Zs(Y>o$_8%TFI&OLY=e?Is>3CrF%7=mhLtZlE0J#'!*%L
%%J`+*V^F;Wj`F1o,=Lm$-"&TPXR4%j_r`Yi[#^#_$AE:A9fQSL'?AUOka=o!GO4S?\JWr?qM;BbGI6T'eO5;ioQYkQA`E.5KVA>*
%Y^<j^rlgSTQ;r$cC:)et'uLe-I^n.^lh)TOEpb4Hik7E5?k^0*@l^&WerBW1^2gZN@Dh87YAlpT2n7nk815GAb$+)snX#KRld\lP
%8"'(S?ba6[heU*ph;2E,HFHYr<.Vu#P1a2pJ*7#B-=U5UC&"oETWa'Jpf)+GL\2&M[3?X1,3fcVBVU:^prN-W]+7)ADW7kAf2DGJ
%I1>5?0ieW'U9@]$>duG@d+8p0)O2r-2LO.\6'^n-V;,8Y55Fp"=1!kMBJUL]JM5a`C?>#"]me8DVk%o$GVZFE$G5LP7[6aP0*<6i
%&>8RL<*V<;dFTo@23<2KGi(h0'_j!G0r@u.n5hr9%(HUkEr_;Z=.],8$26cuQ7NfMQ.0-7(Cd[<_eh<?)otGUn"',N1:GF-^UKet
%`O4%pg7PdE3:3usQtr(]B\`fWJ3UX1XYGYhHc@>^*^\BB21>;df1(,3L^:kS<YYsm]6bmh%E*F*blb^,POI^cj^5d,TTKM`.]*K\
%lh@4%G'D12m]<Q6?Me)K+aP-N:Ops>dq:)4CDQD3#`0u,!dE(Z",'+E1pMu:Tu9-d#O/#9h>LpWZ@'.o9CAs'(o+3@p&3R932l9n
%2tYklUY)@2)QSY94-B8!/S<J16+'jkDl@7e$d'F]pLmL/p/67:FB/rJ95'+NEQFb7bKsp#:\6"jWH3Vrl]lqtg9%!;HMn(S6Su@'
%3XJs\B4\GE;J\N<"OTcHR(TVu@X%pnmV0YdM9Q;%C':08E4U+\9bs_!?M*l-[0#oHo>^q'`<2\9K'Mi!:oqL:(P`3jjX4Re.i0S[
%G".PTHet2UQ=MI8;;);K*QCNhOsoh@-=UV##GZl.-2J!"o.TR4Nt-D9G=t[!9)88,lV6/RTY*bLlTIAp,"u'3JbcaH<kQ0<gNW+0
%8D_A/:8A7?VY+giTl7!2/R>*"#rdEi5LT(%-$1YfPh`n0?.jH0Guo2&kMA)9?hCLZ@)X)^=Z!DPh$d.NhQ=]8K@cI6le_$XE7!pc
%=G_<IY+Mo2J]Hi@2cpL`]Xq0\hb,hJ(LFZtWa9kV]B3[O=+ZdrfK8U140-\6Oa]$t;WNf0aslc2)nPT(Hc%0-:0m>f`f91F3&o$+
%&$P`.hFNRuHXic:KK&n7qVk4e(i.u-mQKPm?>i&Se(OGppGC6TH8E_?Mtd.rn+5["KXCKJ(tH:poGQi*U2I0If=eX.n#a<fo\R@L
%UT"Rgj6`,qID0AWH=%'XNjj7]RJ3"cgM>Y<q&n_"kt9Q3hk6"Cc-Y:Y=3h)3]^M\dGAh\\3F;6QQ/9Yu4*J'<&R4'nfrEk7Xn^q3
%e4QC?rjkFe.H)#-5&3J@/,WW8A48Q:gfb#>>)t0=S''S[`41/$M:XBO/#h]1DC,7GDQI@iO0^@inenoWfsk^t>]m4X.sD\,oGDGH
%XM!W-0.Y!g1gLEcR2,)r.VPunT2sZ+.?0e\DI*XM.sYWAFb;cWXnoEac"\@S*3[fWS[?OXYl7Y%WH;28?Gi&YaQ;1TC?#.:]6^!F
%;QH4TqYk6tnUass]^5r)moFk+X&!b_AQ?i$`i<4e2cnn(;mc13[<3@jX`cUse[:\/@:a:s-XL*M59JG,W:9'+)Xk@SY/u_XmqW0+
%D=:Xj6#WnHZdHSBRK&"K]A2Z;YMB=K7r+0tf=<ab[/."-3BO@FeR(DO[<D9m\F'h#p<e95`pJ%`h;:R]C!N!p]$QH5fD!QL%b>,h
%-,4n.];Vj(SaQC+o3sDZI^db=?%6bAhq-%iR]uebnsWd$=%^^HDcu$W2XBI_NSm:4]toOUiJgZoIb9Hid4K$Dj%-[Dh)N$K[l+R4
%48Tuk(IuFRL!mJjWldPBZk>=6NF'DEZanJo$#Bgqh:kZlqC/ol^'Hr@`_LYo1S)dW2fk#bLRU6V<dXGK=$,0<#^?9mAg[J^fr[ck
%5.7T<K732hYThtB$*k,rg4,<t>KKk>G3]QajAqt>hq37&<(^BVPBLQ=&Yk#]DX;Ja[i&+;^>6:`k7]Y>"5i'Y-g3X<:NUup@(kp=
%4c/(k??P_9:HKttApj%VM;MW8]_f0j)\9"(_GfHBqs]uRD]c<$lLr2OY&*"[lLT2(Tfd5E[ASfIY5\"Mp\CgbIR_amr8H\$U-J0?
%<W)#AM2)&mm+1YV/"Lh_gR/cJG?6CcBP(oCAMpp6UseEfHNF(R-eV(*45!MEFm&0Aa6o0ug#Po7=MG0DZjQIk@/[k_&4;"^+F=$9
%'0'i.oY<>[b^nBdS$P@CGZbFHWqTK>++#sT$6-rR0N)\]AqHr4>;sCabhcN"3P@H`2GRG8h3AXsD`;W\=ko:bX8HkJGPo+C%<^@[
%ql>qD>u4%?pHA7UUpd_+HPCh7>,MjU,t4AHF0!f52/ttu0-FD96,W>@H4-i!U?QaV0"mnOe`aA,S^CNMaO!@:Y1'N5gblG;Y!j4?
%J()^`kfF$M)LoJ2DRY6g9NfVub^3rEPP$6m/QUeWYAB_Y]jc%lm"BeMf-9QcVCHR92d*LUT%iYPrS7CD\A=`kq,b)\mBnREhQ:q1
%%_L<NrUoP10AhR9r)#Sjc<osNI=*J?V>0eUD,JsBNZAH>rH^#j@_6oZE1)1fMN+`mn1NU8Ltdu\+NhDRg6F$,4eLSgf*=uT/0"Go
%fI<T@jt(j(m2[:XV:0[JPO8sukE:!,H';=9&OpB^e!qE4\8KJ+akE?aWigp797&aoD=-a8'M>KP_0m=FL$mGo4/<Vb'@9EtmBiRB
%\bK#OS4II>_M,p,-="8FfaN'>l=Q+2>35K&nMb;<="C-A'^=#SpKkC[h%(L^`V0nObJ*prV,l<"\R%ARDkHOc_9UH-ENl&`4rp/c
%DPn"Oma$t%*43-I`aKu$Y9+gU)c)7BFs_F3UimB+7U)!"]@it885s+Y,PeHaDku0i\"hgCVg=S-*jfUdHrl<a<,X86[nW\7gYAjE
%`T2q`1NqKLN7`4<BJn@!8q(G#*^&=lj&%.E&C5R4-h0h!kW5tlgFFYim!0suOpqU/:H,[pUA]D(:[W*?BZZXKm7UbKHD=&K]6Tas
%]Qrh=_RhZcFfs<!;T3I]F6!f+p5f!!oR)nsSYKeWT%6PI8+1o!ED4KPn`*$_W#spJOpB%Pm7&tH;`Hp27t&+\o[Q;XSpllaN"]QZ
%3BoN#=8aNB6LF$5G-)gUDIjnNVu-57f;F_oaP]1gDIuNsmP=Ym%!p0>-GLGScIB!=hTgMUp\O5AMoF!L<uQ/R((5K8rF30X*YjhK
%k;W>(q0@&M0p)p:V8Cp(1W<lH<dHj\pLJ\.a4-@(>l*rpQ[@s\G;$U)Q/74ZdT8',neTq_E`)?7^<<Y7*-HPJ^583.ddH(*oDIl!
%^T26Wjc=R<MtuP;Y?gY#4SfF`iGbu^$Z0G_eS_4.[9^@M]o"tCL9Bt9Oc(`b&?]C3chmA-=mb/6]!@HG]CEl2*&M^MX]DTBm\TTA
%)l%G8]G6I!hJT\!Xmg28ITF&O^TNE;M5RE6h9uHNh0Tm=EZ_;m%dsce+oT-CoOT*-8n\%[Pc[,6Pb3j=O1tRUpG'Cbh*4(=gBUO2
%Vr.b9o+XA!'q_W]nsLl=ck)g079Fu`HLEB1R^de='"keJ^8/5OnYL>3o=t.3FRM*DU?f#/&)EDSQ7b?NLQUmAjZ\jN/%p&mU):Vg
%jbh[OlWhii/maj>oBnIm;p'=JLQ[+T<m&9SorWU=U5X-aqSB(M-PWcHp?uL+,9FS#YfH4/9(qDU=/f7FCmASaF>]QFGcB7U]!o[c
%[)06+DY(HjW#LK24o3%L`Du+fCRo*7@/;529'Nh_UVHWUY,:sZnj]BZ^J729HKVE42"m(K;WFoMX3Hpak!:f/QZ"dSRFFfDF%bA+
%,rb)/<b[oSf6>/@=$J]WDtI6'@'@gOg!t6us74mprEcj4l<S^!i88J$b)5.hK;oLi5$]*\gYu)N[pG2Pf2W6F9TY)2qr.sKjp&"<
%EItTX9S=FP<1rp"k"E]a?Ko.`?4)_<G5?*'YrEfVs8J#OOGb=OL%gD/LLqeBIUTjD8#;X5pMX7F"RVn2SkKN)iDHB9oK#J6$Cd-4
%5ed:UTpp?/n>lNh@L1AJn)#Nh'`GWA$R$+!UX**8M_]9<(OD3*ARYn;5LHqRq"+c%IsG_MF67amU-.Q+E:`Yt2`.%_hoZ3:B>FA6
%+eQk(DWm:,^G:qKW<N6O$UkGW5Tj@/<Ge\.:`R0.q(Jk"*4.S,2$0(]C$9BtMk5M1i>XkOGQ^'br_.m"lUFN)/sW`nl\%Th#qaO[
%4m;t^%?01IP5sju&#GuQh`1#U!#e69L"LnI'Or.>8kgMh`c_LX<7GhN`=_rFd#;`A0@;egE5O8aa,YppIu'&1D@[u`c_Nu/_q(c9
%pmh6Tlr[/<d74>)d=/%iRY'rmcDEGq8,3To0iGFHTjsp!DQ(SNcn#$K@"t4S&,S*B]Rm45al'V,THoF80>e$dB352)=-07H*e3*Y
%MO"G@5`5[kU(TqkGY,c4Nb63P,m^"g^f"F!TfEna0jG'HUJa!@dkZtH(<pkc;%P".;OU(Z1`PKmQG]O!+nD]kZ.*(^bloD^TcH`C
%R^HRY8f9&=7a&eb+T@W5;EQK$LiuXgH'q)C(eK5^i"j9;W5AYeEAT6jN_(5_LR<5"0\WjU\^*OMFL3\oT%Lb*qJ[6j>Q=[sKR,%D
%(hT5X"so,gLTur/+=",NAJ37IOR(+/7lC]rOJ02S1/T$R(uQja&iWiNJir!-.g7r%(N$r^;CKZRE*E>]ZpPUrYu6mM-t]84:_'(0
%`sPsM*Yg7APbHgi6:M=)nd&#/)2-%iZnm`UV#qnfM(I3Y*g?f\#fd;mO!QE2h@PV'Gl/?\:ItX'+==r-\Xif*(Nb@BLk.OaTsMU2
%<,R8]G[%9fLR&2Pn5)qJMpDH`!%9T:9i(h=$Oj%%JB*apRh[0#G:7$Rp&N!'6'c$*d]n*iK>:lLiJ/k*A@dtH*5r2;]HE5r44XgS
%*Aj2Ei7h*"Np?"B#94`u"I:&Yj;<muDJHg)df-b%2P'6fdGU]pJ7aRPKr5(]:`1i)G6=XhRH4Ps.sR#<3O=-2OGBY>:%8W:NYQT9
%N$Z`ddh8f`64HHk.:*#E6Udr8$d(R\UnK!K6:tj7cIR6[$)>51"IU#r%:FUI.4JR'[lK*V#QU71NtjE$,nm@*>/9FDK;NTE9CSh_
%!]_[iJ7afSE1n7^Gn)^MJJ72tN=[@iZXK)<6F3lX*%`nRp5,BI*2_8(5NnArZoh@p"tL@_6rCtSdNYV3[UI3C<Xd-hbeSeNd!H:i
%!?)Aep';h1&k18A7^06>)_:KD+<l:^1;&F;!*51p(3qkHGTrjm+>&=;cAr40iqNN%&"3(gj/s9m@c.rW:Tuo--hDI;F@X[FfEZfN
%j"NSQ@[<#YltG[E*S.%3@GFs4p#D('k+qF1';Q4EGOu6`K"upmfN:*SH#r!25iNna,]V<Y&T&=P+9C$8+fB2Nq*IoBE)R`i'.4C$
%2HFC]ee,sLSE*"%Oa(TAN%m%rGu6>2!_LSRXIqN3-G#h,PH?bkGQj0DkjV.7?mChb/V?J4VoY@uV\k74.i`a_J,jgH9#/5MAJC:r
%'DiLu9R3E<YX\^uJ@uNj.N[gmoN4DA'<qc_YL=a4ls7Q[66@e:/7paEk_QN8C>dHCMbpg;>nVkp#tdUfTMQDDa(RW-EN7K(MaCC;
%EZ,oNM`V:V=f+"W$S2uPe:EYp$65cI=h#jmZPosnN'bP>?#tU-'L>_eR2mm_l</i^i@9i(E+-CugomH$&ZgS>A1%Af3CK=CM#0X1
%r000-PlO\s6uKAnJM[N;BaI4=,3deWF\4b=-jdeF<^Zh-63`d7EX$L('MbL?kYZe[dg.bSOsoh1%*gj]&ZcYdO=UiXZD^u9OY;tR
%nhc9+M8H^DJ7fWh&1@]2(AD5WlL]q<dEi>Q#N82W?jeg5]uI'0K`rn;,DdX2e:b3S0n"(;[)V-)LR&,mn?PKQ6p[G[U;4q2B`ADS
%dh3#L7S?m8j+o$Y[*W`1Uu("Z+ZciVU6HWX:U?DuM3P<iLO&JZ@>qPAOn$^GKQF^Z-+S]]5D].E>R:95Z!LWXZ:Re*LV"h](+Wi&
%Cd#S0>f/9LER%u>BS3YR3,+#O%=sOUp\pEqO7n1M$([nkYNch<3sO7k84^OM2Q%rHFeVD&3XNG<KaWH<Nb:cOER9.c<9VCKir!=N
%a@jJIgEc/7IO@j09N<'r)TP+`3@&VPSgL:Zj,'477-GIL3X1)Zl)[6=l59@Y#0Dm&Y4J:l.V2%\ZkQUq@<Vs1&5nTV1bL'^R&(K!
%<lS6!5^^W1SdW+k`XEKNqDcOPd';I2qF-D_09g]$O+CqObSXcuOJS@:_1Z=Ji>A1H7m2n&O^fZu'VIIAE_^&<@t<e\ME1sDN_-Ea
%h?engl(]k*k)$\g.Uu%/k8`5<,lpcoJj[&.\n"TGEn6.kBR4d_(rnX+I#bJ*@sU9e`SJ6`4Z:0(l$Jc2GNjI@^3Aggs(B'tEkN#+
%$S7GPg'P^u$KqSMZ=P"1ZS^CQ%=p:%'qS89C%TLeA)nr3:B:ZI,D?gF%IjJn;33phbR>3nOCcNh+V$85@B=FT:4fbgUj7Ne,;Mm[
%aD`>j3/>%['kZfd!X$`;'hPg?lr5rBB;Rm^6=[0V&g/O[E>O]Da%<#-0JcZ6*J$J_%co&Neo'ZfO!dN=)^e0B<O+W6N"R!LWu$"2
%M<>b'BkFl>6XGc]BFQG1/0$cZ_.H=pfYBL(Fs>rD*i6Oik*K)8)(J%r-"d\O=cYW[%N_f]pWNt,l#*1MaNR?+A5Gt9<gjmUV*TKB
%7"@7ANoRA6%%!"*RkY-]^a<dC*/+IdY^cfe7n<\5g.F/sP`fu=_'+6cE$b2rS4a)E+TK5%os<?6UsV'hq1?hJ'+:L`A;T^aWcT^0
%4A9@-=A5"hW1r.PM&dW>4e\u31K;Gi?I!YdfGTX6%95sQ!NcFS,>\`,e'_?2"HX$07^WT.Y61tf`]RoP&SD:hf&MdEp;[b8K*':1
%^C'[0ag`o635q@Ne1;mYPTe%5&Ig7@j(1eE2Q4ErE:>t-i0FNb)_W+/Q6ap&L]Vb&<afU=O:+r+BD$)lj,ShGa"+ZT!Hg`]8j"#n
%&M.p!B[j=pQl.B<d0P^h6c"\*3,,1-\5(J<KSKLPN!"$#@V$O(K0iGf='LBHTgB76-Xsb/4RH*+GSlG/MJ15QoUatHXa+!!_Sb52
%+c1Yn*oi;.0$Q]:rmQm][\kX#5#dUp1LSQV9gk4RESDte$l)Cm&K,Df[`9Br#EL+Y6DKXD=fig/ScU)EM8D;]'kW1-JSLlCUWH/R
%6?]/D4QNb+jB-(QKU==pEDjWo.!lP:PLmI+q]Djm@k2*+\tE7TL$$iZAbLm0rM0Y0!X=0pT-Qc.^^9Y+/2L60Y$^,R$\lUAV>]T%
%Plj.?HihP*)2U*86Bn`a>D3rA+\5EdYoPsp=D3&oK$i[_4RS$j12#igLfpRlkR(_pBHfMo<.SQ<i-Adc/4il.+i/C/(Eq4iE40Hq
%AqgXi/k_ZLB0GW]2L)_uZ;gp<Q=t[H)KTiV]N1]mAJoh4"Ss<\;@9*AMat`6P_*VRJm$5!,me4.'2!i51@[^iU`9aI=<S$u>b#>a
%1lE?N5XH*[6sF)3W"=&O-H9J@gp(hf34*fs((];g5uBaK50rVU))Z&Va*bgYFZ9r8A,\aG_9&Dh?r7!nPsn5=,Vhf>EWhdf$'A?8
%9#rGQi(,t'\nY1iOsC6P/tSES5YMqqZ]O-:#L9'H8RtDP]M)N9KKooGd*%TG$rfd/!Yj#/[#$'Ki_U$2-5h3-=XXW9BlfB5&W@i*
%Ui8R"/s0Se.:<K/#c8gd"I?\oR8XR-86^clT"[QX/7`M&=f!6^Aj/aY7+kZHXnfl^*+V@"R2\CBJ;6EefZ)AeRLgie]G^GM*&/U9
%84%"RW(!a^F<<:K12Vmq$TfJ[@!UE6)B`>N01t.?F7r]KLf1!*%2(akM*jKVM^*pHC]_S=`s%SNh(1NW#,gW43\e;_V?fhN7B%eS
%d15a/:#oG4GKh=E:X^)IP\_,`'(,gP+Y7+PS:j6^PS-NWCs$!<\IRSXQ)O2Nf>[:]"m%9pR5;H84H<kc8jqYqcWCp6_`+-[bY%ih
%8&DT*TLGRt=R4<nc>mO&^e&,]bA\[.;A7WO;0_;_B8D=O61!7TJnQ2BHPdHRS#V!"*$"<<aGbt67Z&IS,)0PuTML^7H3oS=Z.?^Q
%,`4S*KN9LpT<CdJ!G)i01jOHW+gXC%0P&E/Lm=:NM<#f"&7#iES3t9r3(1MA(C=]jRt\@nL-h>f!Le]fF@!40C$Ta[3E6I8.V!%2
%&fP4M`[mq,e"DN&3>r)=YnZV6)3c/hk&b_W'ObN;$4*BM*,_]oKM"Qo"R7fk$'OO@ba9G'D<<jk'Es2q'PGQV!`F;A.*0?<H/ONZ
%-DP.G37XZiL5^,(D\11DJS:SoDh\^[5jT=1A_r@LBUZm":np_:N7J8cnWL=lNonQ/+94?A5Dl3R/5ng*'dtSZ"G_LtrifHMX1hCZ
%T$>3M^jb,i*@@D_"\8e$?u?'#`Q:Mp!C]*t#YGUi,g&dM,'LHqT=fC$[4Fnp1S6r$&4:1DWTA?uDK&D\!<UY=5XT9%<$Qr"0gMIS
%;Z]o<kj@->hoth3q9Fk.mOCUl!&'IXp@@=g06Xh^jptZYRXN!tG5(7O;4!bpDLZufQ5>AmQ)+"I184"fq17"i[U<T?3B2CVSu1ab
%)QcLK!%0l[;5!lPX.<Qb^0c?+cuspX?Y?.ZULk:t^#q5fo:D#so6X4^lJ0upb`abapKV.3ihd[I>g"]7i+HP\[^<L0cd*?i-C]7o
%Q0'H-%!/<$^C/MfUh?^R^o!F\3]6_@0b-b&\;8daH1LahDRG;9'6-EiqCk_8V"Lf`W%<`$AP_dj=>j;saYj#NCh9iaFkNWm1^/2.
%g4+:"gth%4<MI%7#MP0NIK$CHk!':!,iO,D0jSgmMu&6.oG>\C6.kh+o>Tl\MYY.=Oe7%$kD=[nPA>pVh#)tqRbL!#?.FI6-5Pn6
%-r,_Mf10Fom-2sBUG?4+_;.5`8Y%gW?617Ha5RWmTFaJYloNd`#3tVqpZmr9E^?d"XU4A17QQ,c^-YJPCfn@TFhTM<lT.[aI[G2Z
%8K?^n)(Y9hB/O7%<Q8HNUFZsraJf7'Fd/g!MjAaTJ%BC[;f8!jD<8VsSn*NS@f1H"7S_$IfOh9`Pe1AUGtoIrP;2Yja0I:p$E[AA
%B"<@gp'dI?eTE5/-qYLGrJIHac4_t9RDQL:7`nQ5D=t(c`X;5kS&0dGV:Tk*V?n)UnQP81*KF3\YaD7C8?'%2_E8RVVTVnhQ70r_
%B0XK/W&C+mHEScsVo*4]G,b_BQ$^:87IC?f$d*qAI2R/f'k^Zj;)Nt'3BD@te&-@4f;\Dm-[%4ofkQ<j@LR-69eg0G-@Y01nE>&'
%AWQ&:1etfbR2tN5SjJ.o&$c_:Wd,!gg7&I1NE,(R7P9cYb[/Lt26XfC[0qA(.M:i;O6ZT$eAi?0fPTR4j0=EJ-$QFceN'd>`q@6e
%G%B$]&:DPYN*FUG2*6$c=.?1$bWX-cR+"a^G.AUTr&".LYhM<"2lGdMfr;J7,,4aM8LEV7B#3:8c\l=l=4qp\ffNC:#ju=dA@>6S
%>Vc:G^5q=$X6+Di1>;Xodr9!k'6QF-mUdsDkIR_*h.FgW0]KJ64Qj,HnsbsUPKQ,!o8%TnMiA:<l*Zd<*ShGC]<+3,9Xd^TJPEmg
%eFRaM&bAQF2!!&S1KKR>c,Za9'oY,k>k]$\P<SSFK4m-\8E;e`G.(ie#_'0-VWYRdIo%uhMad>&i[](S?Z,4Nde['lIMi(V4@r+j
%,4:?&@Z%QPpK#e+f+34j0f/PO-[,[<GFR_N2puslmW8gnif=Ia>`!b9q$k/BmJ.TH]_#/S2ar^.XD%7tdB&Gde1DEsMq._?F-]>/
%YE>=P#r>:iP>g]P_*<,r?s8#:-GS5E('hk4cUKbgTl]kho0;!iqHA.4>bRd6,Q>>rOBXP!KA+$S4q06W2g_Q`_-_;+NtD$AepGuc
%*]EqA1ZJ'r;p4L!DK/0"JL]K.O]0qjlV5cATEpDreONoA&L9?%oheLprd6:aBYg6D#MQlg@^F]>C_aG$cQZu_1[$k9HWMHTUq+Z#
%_Ms$$NHoqRX8;@RLY^Lk3GOe&_.iTi@o:G8qX[uu`&4F`o4C77:RX5R4Ku08*V!=%nai;4qEVu+,/1U(m%8K3rp7(?+[qS^3GjXM
%jA]oM8ih#1QHbiQ]/Hk\4MV;7lU5fC\!*AW5.C%V177]Bq'b_]S!G?b'`W]0`:nWoGu#="D:p^r\7,-+M8PN\VIl=hb1SGFU>W$?
%kXVKk0e]+>N<)C?\LlZK)UA.I+1J&"9KZmr,2PG`5+fp0XB>[I/tdl@EQp--CO*8sbLb]$VQi6e:LejD1VW!t'uH8X&]oT]@spOE
%jc0%T:W.\:9_I>=ZDSa<IEX$Z)Y3DcF1%^>66#lOW9*98BL<U2U;j@\KZicQK;`f`O2SZNrBocJN'!s-^YC2A<*VWS^/d+8q9oj@
%aX*j3?C[>mg&E5Q0e8sDDl2,kN-=,OQpbu!9T5'&1t`doff;N>59KY/6qdk&VkU&-/Q,[&eXRY"rqheV2HfP!2(b9uB0q7.V*;k=
%Z[hq[Pbu=JoNTg*1W$&03#AItUFrs)qNI`125Y`&LO9$)O'f]NpoCBHA1G@_WpfuMDgqHRlb?^(dsqDXhqs!=H>PhEVQ%[*)a6`$
%OZ3qP)#Tfq(ra27GS-fA2]`bfascs0)VH_DG#K8.9,m)Raf1Z>9)-#r7Y4PuEEW.;a+e6lh9/R"IICnRQ,b[tZCZZ'+:^/m&5Mh'
%:Gp:XX8)17VY#/f^rX!ncGh$rEC,(gYs)$)RRR6q.Za(_4J'*/KfVDKa0Tbiq^1,U>o0JO]oD^S&I=Fg%;$*d'rB0a]m&iN$)T]\
%;^ON+Rgr<"(5Y$to'<lZkt9G8r@UecH6g6U(ah\P^;ssT7A=<"MY6O>2J5[IFOn-'!MBnK0OHX::.4iAj!#M208qqLIA;tsVJ'/M
%kHJ4fkjX7I1p7aTYpr]t2]U=&H?c<MDS'L"nbk-oq\W&H7A[1"2fq[_Ql3/t:\g-/HrNs+aaYNposD/Gh7MRG;K1];(7-5>e#_D!
%D@U7NZ#D3e1"H%q<H!cb']"=&pHF76*cH4t^8N>"+B:YJ2ep4m@b/\6$?'7GheG)dk'_ONNViAk0]W<&.Lc$on]h[Ff9ZN4:.lJI
%E$+[-O6euEg;jC.`o9aWhhaBA3)Wk!E_>_.cWAH"`R@k!=YR^_8:RK`U4RZ1dl`RmVP*Ka.Kfa)b9I`D'40W;#`MjkJSQ0X)itTi
%b2sSTqsAqnf7F9]#IF!GTE`kFEJ%j#c6A9W/fA2.;>*XHW`$JG6U):/IJ>B_?cS;q\$[l(+t]`X^?hjeACSER8ZrB39'\I94o:e>
%K+0hN)'BYuL!uX,q\K.]U;ca"\_+!Q>_*DI]&3Jb8_K`9r<_8Nf)<^>Vfm+7gWQX-nD_A/lDfjFr-2M;V49YE=TmiLnZlZ7HF#b@
%56S0Hli_?QOC"uQfmgm<F'gKCUlOt5]Et&&W[!6;2(3GQlBk']D7'dT&*o"#?rg3=1[AIKZp%jbLY;]8GOBq*Kq*DZ6j5>,MLA%d
%aP)Qu4"nR22*3JZmiN5MU0kToAT:ju_uoZpf,s13DO5AC)>d2V@A.?7.`>U.&O)>/9B`557gTE?hL`&35pcTPbQ3ejY"6]TcA/\3
%l;BX?EiKL5BZL>`[:>mu]+LaI#-ntjHO3gm/Gk^$>1-Cu<"*25q7pt"nS9X=h5b\I#c,VS_$)c4>5EV*QVL'DpQ)gu;1hR7jD349
%ol02\M`/H%^03RFgo6(@EeUjUf'uNSZ7h/CMKi+pra>A9]`ic/_OpcpLK9"3/3-^nE"9O[5[h`q9[`Y3JdO$A:R+jl@ZahQSa<\q
%\\-F(p6s<69A1ERm2^Fk?+-h\bLO'7o>b5XB0Ut6##`[h@mq#t>="ZJVO.\;Pd8S];"cQL\<9eaG@Q,`)VHRq7nAC]b2F'V8cGae
%)%c'JHj%r`r72?%R(<IrnqVqCn>o\RLCYWNWEJV8b:Q;KXP+6OUL,:O=[<i#>ao';Po:CC`(gY0oPmH8OF(gsj'ek-*4#DFGYhML
%BM%,&<o@&&IX2mol+6kYE5eO?4gQVnkD4<N+nYaqk>`n)5uVXCoS\VGaAJ8(Xa>U-+d4<^Y6QPM/PT.8mL/H]Fg-.2D,*obi?S$,
%Od1;d9C.&b2gOns\0Dq#Zn!("5?&QhSZ;H8qlko;L`$:7Z+?VNJld#V+"1(K_6lhV;"ac*EQO*/[7c>0ggbET\<M3u;ASkq?eE$,
%phj8O_h_Cf5A-0r+%&X!gGhn2c1^!%8OPY0bO`1*^nR'USqoI@h@HI$SJfGd9V_bVo6@\;@W*nDpYthAkhWJ;*Ri`J[s+uf%\8,%
%g!`fcWHfs4UPUWG-"a:=aF]n(GYB]7N@sgoA^fb;'\hqD>?u'G[V_hu%s>0Q\)d,V6L?G`rh=9`Fhu4,]JW[7PU$XKL8R,D]=m\*
%GX(ZTjlKh;e`OQ&]iW65VraJAEcQS6mSDkqqrG>nO4:!ci$Op;4>":=ai0NGeNAuS-?&HP-Iqnt\a1e^9M4ENI&7^[`sXb9CDuQa
%LqUp82c!a>qu27YnBQmc6h.;M:0kSD=7<-c?/;*&+3R><:]0eK,?(Cidl-cg)TcUVO4FP=%o`5(NsCa'(=b$#;Su;Q*ICUmj'`Ft
%WGDa=n^4R36QuFE8t*FCkt%!i.";+[SYDh2#\8WX=+iXAA7D7./*?$ZOt_+YAa4PTCRuRD7!0M&*CKM;Hl1cEjZ8"!GTg+Cb2B1j
%;4*7ZGn/q4qV#D?^UIjrYhpmTFj/aNT4/kX`rf]MmhlbB-+E*TiVM`QV^L%]7eLbc.ok[Y&(G<C*2_NOl1P,Ege=bq7Dt4rTP0UQ
%Rifo$]BAXI+J<\R:f`;d3rP5lZaGngel:rPL[K+5.j?D^(;"=Giq.QqD(*^obSSKHGD1MpV;c;T>[A9T05QN:rUE6pij6S8]\]mk
%k&-7#MkdX<ice;pNLIh3L6n66oD2R]^@?t>W[Dlfo%Gn(E?`'b2\8`Y4A)@i[JpQZ^rD<%_W.k?:Adr?ilkgaYF+jOm;?)!)pe.J
%KNqhURhq7P`OBYocq[jE:l#'%j"A(l%l`DE8pHs3rC/72GjPXh3t->Y`P!L:0>;q3X0U+V0D@Y)qHP"_IJ7d0"TW>mdMb%sdCo9r
%^W?9]H(bT5[Dnblq+;U^BX9?Khjp)2^:cUXioQM-j.tIJQ/K!Or;;^B]_*58m=<CG2;[cA`fBi#b\ihEQ^7p/hUL8JANrRVB4LF:
%?J:,Vm2Y5UMBcH_:&:"6Hh5uZ(l7AV$"!I!MGqF>=c:oT[G4X$6F:4Nj_aksn.&saqF4e+Ed.l$H">5T]`E'`l'**8Dj[DI^f<cs
%p1uo.C]qI*I;50n[[3da>DVpgC=JOcFG'"B7OS78jgF3pOp>sfZulq'L@gNP0@+umH0m*6TCo<r!j%<I:XldL,Ushj.NR[&GbH.J
%VKrq)jT5j$Gr,h1nuS'XE@Tin?nm@kH>fN+BD+#/(_>#LKu#3q1Bi'qr*/_oVhjU2gK[BT45EoAT#La;dA^VN/9o+BFN_Ns8VNt;
%@)V$PKLg]kgCLDl^)fS*-aUB_QPe%%6WNUCi"84_2UCBi6gC+,a@gA'?GFX&X]bW@>g]8B`1HGFa8Wfd]U5T9I(JTmGg.!^*97@`
%Gc)k#]O($nf'Km9`Kosfa8R4K&)I58^,X@6K>5)Fg\XAE9mF*=5,`r'aPI_0`I6;aI''AGTBZ(-W10VedHEqQ(0ksSip).dobgRK
%WY-DrhAgoO.Ml%6&-i7`b)s^W-"+/>S_.:%CD@<i_,(6r=<!&''[m;&1F8KY-roD9:@2uFp6PYRbWFj+ep:0DS?53H:.Sst5`]7b
%EEdGX6?I+aljJrgj#Sh1e:('!gUH)*(WW7K#$O_5cblq&?#9Wd;%aI5oYgj!?qA_tA:6cA,3>osYp.FOXJ7f/L_aX'RB@63g4U#3
%.4?@#oi#uNA'''-=(rte;U:-JDph5p+KF]u/fM'LVmZgYn9$a1`JAjWC/WN'D.61F;3Qo6XAE$""GOHKKY%sD-TUs%]^[U_-+M\o
%F73[/J@i'_Xf+!8<'uhV\o"S0dt.F*)#d[]\@gB`[b;*D.DG2#fYG%t_Zjcq+2q.&.Xr`=<._G0Y)V!K(469tgN2,_U9iC,[eeGl
%/YDVl\@fO2qs1Z)MH"]@bAgSj`K@=GS@`Dsa<%`3I&%NJ&B*LrZKDs&,iRun8a&(<'$I!N]pFCeAdM'.6Za8$-%^"M""d2.Z36=1
%A94qD?&,4RR:B<II]0@U\-p,*9=lMbE1Ws)J#l.l=L-Jr\HD8^^!M@NiU=IigNu,gk8@M'nq%Zpq::kN^#Xo\`jt395Eo+4I!@:t
%A^4V!fcKDVl/1?^+"D$M*>k*XY`e]4Id8&YfIu%!8(&Jc?L[@!]ia<s)QBgRi%D'1Hhp&>h5[Q'p%F(h4K66hM]\o;VS<oY08)ps
%agud^;?=dpcY3FpL(!AHOihk-Z?R4;>SWnZ7@b?$>1B@^^6B'Ife![2!7g-UN5G8+C"9%g2FZeG`[L%p>FU+HVGL5%K4.LVJ]RL3
%P0h([n=D0'&8%d+boIN]3VU[>"K-Y16W#0T$<Se2]aVaMOq.=bp0.1P0lEM:-(>WsVkr7KG?+?QfJ-EPaU/D$2;G9>DSC(_Oq?rR
%CT1Cm[."6ADshc"GmT0"a\ZRAD-<;3P%U5FH2Z/JFn1E99'_'l?,dtGI@`+Sjjb)nEEdWGqhHrEc5PL"ji)_k,W6'BWu:n5RsR2p
%Q^:3gH[7X6r.j"ZPKJB#aa%64kq,E_=V>XPf[$kunqpF`1u=90Wpri>r\7*Y(E1Eh`,3i_Q8A!?pl3ENLqb'&p+kfbHm3EL4@_1h
%I5I.7BpUUgN,_5A!)COJ\7DFi'.$k%dY(8?lq]jZcF(f2F?0';_V(K>+(""jn'U7iDXQW\?3Ahq$g7-N`g_@IhrV6uZCggX$f<q]
%ZYFc2WJ99/I!_kDJg[R4N#TJ$XFPbFXfQCTgD<KO:1=,VR,+0]>[H[3HaS,qZ?4@TDcTG`GnZqj,e'EIX#b9)@>A@OI>,d2-,1M"
%&Xf=k$*:&JQ`8*GlK+mSJ`j(ZKW8b=WoQ?RJh,Bc%"Oe9jY8^&g%UdLYFE(4QojI,6R``4_gZlR0f%"L7sQEs@-j\:A?G4Yk1r<d
%r(1,Xm^i?68,I[?0<[TMpW;1?aT70!&,*t4Ye2Ec$>?%&3=_*^hd$><-1W]pRGIQ4Ytj%fhNq=$\6k:["5#Dfr@5L!4oXm"8Fb0D
%qqHW"j/9Zgh;:uPmW\^/a+*sAci<Y3s)S\F+91;\s7kLOgXE/d_m$ipp>>h8s7l,.J,A\!r?%[2CB!O;s8@H7s7P8uqEOYAj1ims
%cbDUQ4mn%En*`cAG,KV:f_33<Uo)g)GA+?FlH`9-$+8Z"QW1jf-.aag:aM)K"md.Hh[^l0PN"YA[\uWCiREo(jRd-,Who[DX`H(Z
%8'sdXrn(jV/K=YF$J8i\IEeEfI4+$_qRej3g-QVuWd>hGqXhHc^B\d9cqrq&)nCc&e;AhNJFR9C:oBT:[8K9c==Kl(!o-Kl!2qgV
%nd%Rk\+_tFCGu7/O_!8R16!G.bm%FjUss]ebgjjXr]CD]0aYr`K?Lb)E5:<Hr[Wff_9nn]=t-G8@b<@s<Ei:uedVhZ<%hNU=-)=R
%3,;;k#b<1TT33e<epXJ]7ku@`gq9`a^k$Fqorl_4G>_PT;,`A(hmT>U<dDih&&pbIFDC;_'gWE"C-EuS;K!Af&KTC&nrps[:X]=5
%F7fn$/2""KqLf/`T,p,HE?i15K;aj63Gc-5m1C2pd@2rBOW62E,"(`=:er(3.T?N>[(^JeL'b(^J]UsSF#X4q2V<:`DBHu9guiim
%_c9e69hFZ[adSkH>G@Hl#*dp,@+oT8k\r,U]0lk`[P)+WAO3ADDAl67O6#\V;Kab#K@=(r6UZ_0O%5nq5]sdQ(Ii+F36e*9Y<$(^
%H4B7k:19+0(,a3I'o[S6AcoN3!PnDBrL#^-bBgh.i[[+]iCG5l]s19>b)b*s_8]1ROZC\)8KH[Y9SVqi;1g`k!WUk(:'(^ufm8P"
%$W+NNgj.[^I,TO97Z4;3S[?nJ9%7U$[1DTpnpQ+arhK`5",lGRVgTWFClmsQZ#h2P0WYd_V3&P(=o\r?k1-uB>P(*Q>;Zkt9&QYV
%itl=9rs1VdR^^.rW?c4:]Q!iC8>[sA*!RjnD?lcU&a8H6U,VD-kO*Y-+$OnNqWZ`e%q:1Zl0^d3!Vk`/IY(1MH***gN^"Ip7.iF4
%&VN+SSZa#(q8Je>fD"$PX9D@fg&Xo#Jhp4f3EZ9,+l+d#fOl8d3.-R@JIdS:FmjEu*qdFIhetu54EChfb(@cK!87>)F6OF/fQ*2s
%oD/).k7H<I5dTRi>F,5F]C,pp?AS%Q1QnepM+96m]^=C3IjJ9u3k%8#_Cl7U/JEKImEY9A00<Oafs=@aIoM`;Ze@a%^SCns[=u;+
%Z.D=LHp0mh+K9=SXE.YJ7Eu(o.o*g@Sei=k?CR4Xd]^g??@)#bm7o-\gN&@5*PbP>(=9/-3Po`W#Z4ej_@e790sbHQYP?G8=7,e:
%2k*8U``!5b33F\po?8$+FjGoR4R!%HP35[q'+.iFX7J0M)r#i<kf_-Qg'aOTS9i#ZG:WU9^+UJ'bR3c!/WmaBPl565H1>M%O8%9S
%C=!a8)psto=NHrK[$O2+>'n\0+/n78>FS*/raRnNgZ41kUPl1#-'TpA@'sT&ZodPgC0A7-T'!Z`[*<tWYI]2%Dlk"T>,in;+>Asg
%cU1^I9^L\V3#WOrG=.K)S7j?Y&T"dtAki^;>eSQQF^blaFX!^41D3?,KGG=\+%gJ5\&[Io?o!3(34"&=bLWK0g7lm7`C2qS*((t7
%ik=9;_dW=3i1qtBpd6X01^=#o*F4>ZLl0DDolbXXO02f%$9:)d,rJQ%Fr9t`frt&[U@qisUUZOKYHIJF("ntL_.Rb5Uq6G38RZn>
%1l-AFgl-1kg)Jo,fa)SW]SO_-X@m^b01s_6(Yn$A!))SZ[P*cR]IOenWmRZU/)r*741-j#j+]H)l\7T_i'Yu?UTBbNP/^.g0P_3k
%U9XJG&W>cI$"4u(K,%b+nOP\*<Mt'[GJ0)s1CXcu%Vb0ZakGLt])B/')Wrj=#a%ULN`snHpB1"Llk8p+qg@55NB?2qKE/*BRLc3]
%V<hUZc^F^fIV5Uhf&(dgEHf1hnc#b<a*Mkr.E](4X]fLT7[P]1NEXI$P$Vg/['o<3G$UtUna6#;EkEl*>@le5@1&sXCOYa#4!Vsk
%`X#BYp&G^QX+B8ql>igL.CXN!Ai%:Z60JN_*-8s$QihMhoaej>5?pQFV\hn:>qN#>Ya18meFU1/aW?W>V*>HjT"4e\%V_(i#6+G`
%NU;e'HUDZ8:NfMs%Jt-^`tPO3bJ,+-o'S9NMqVCF!@Y#-d%u4;<pPQgcO#Opj=PlFhnpO@UfJ;2?:XWUI3E:-02'EaE)4FkW:f,d
%ln6]?0C"Qhr$(Uocb/FBn3t.jXD8uJI<0fI5B^2$/]VJUGb/4./1K-4hgYT"7@c#%%=fP!=N`H$nL>o1FQ+"ueoXYM+S2N,^H\RY
%1:XSW3+mR&0('B9B"u!g7JtZIGRdoE\8S5NeBTq(Bk's,a3?H6&![e2,?_o1ip#7"YP+nPQc-]^W-s@#N'k\u"Qa\#[.3m?EO.$o
%#$m!3p',<W=8b"ZrEtF>V39:YmVkDR:#tcBB;M;-Q%np7Bu"AC7Ld[CG[F6*cLJ/L-a&9BVTuL,nge7iD\G_"hPeS_moO)\T29+J
%T2K7\T1P5P>MS!+HiH3s/5=)/Uc>ZZ,k&G%%p':,?fK!.!/",AX[b>rRNUo]jE3q6+MQL'60KQF!?Xd0D9:qB?WQX;F/-(R?>$rI
%6&_lR"+2S=E*MS49rGDQYZatgAN_If=m7kG)=U`-l*'7Os+e@\h"5OaHAm>8`GkVE?iFF(N>Q0%;fSM!hrTuXf'$aXSr.N_[PQH(
%pt1W(2D^ZR1i-hLi'-8Z]FudEGo=M_)^/RdS:C&r[NEcK_H9bT\k_X@;00HKMr$otEEbh^E#:<g'/A8Og:`?H?<('"1YU50C0q(]
%m%(VZY1nmr;Sn]fDq+%o7a1Gs[ZIZ8=Djc#[('o/rd4sTl1:!qVt2jsddCi$SqsNEj7."7+3.X[i)KZTdp$YVs.ITeLFr&)kb4T(
%d>L]LiublfDsut2?%C=?0AC?uIZ'uqS%OdNYoS%*ct(u9p%_*AZnIX9"%ggB+!?g%?(shmk\LQPocN>r%<GHWm!$'^>3hNe_>u8.
%@SYh$'410h8IZX(P[*I"cGd9K*kpLu!mpA'R)\kPs/W7gh`=[<Z'"K7Dsq\4Kt&`l%L:l``N"tfm8s;+FZECTq@);Rm\nD3+/jfE
%U)JTuK2^*;\=VB'I92Z4eiqCEo'/q&B(b-k</\Mbq?GhU;/4Fl4jWKT:&\aI^9@\s[A3$E]V!r:n(=o>=/+Vr"j9o?DW\0ffk98f
%q'A&3PGsF4RS:@<J+!R&<hsVdYKn_6H,r66DY)#>!S1krS%u:biC:19_;k:5pb:k-Pag-r?X=e\(E:-DT`&JOgTAEU`V6Y&f9L#n
%>@IFD?cdUs(r#<(hYN'GmnV>THT)01OlG,B(t@1?;<d&S\;cses7QO?/(WUDXSCO3+@d(-$/Z/bHK8jc3'g)l3*/A0j05-b^p]os
%--)qhs(]lZ\V<kI)Qp+i0Q-Q6aItdo#=2[MWJ17LYS+^>bH"'jX>$8[i.)J?:("oEPUn9k1%gQ!a?@IR3/h4(j7]M)7Q`VPrpUJ4
%&+@Ji5l1ka8//quOJY<V;oY,'fqPE&nuT!)oASgS(qF[JfkYq1nuUc,4Kt!$["::iP<([#K-6HK"qg\IiY\:l3OrL&D$p+tP0#,s
%Qe"chrEMJ1kknqP'7ougel*180;_6^E\?^58*1%a.4-m9DM39BFPUpH9g.sG7A-D*1BQ!u<F/:iBVPMm68DP8\:g*+,V/ViH-1^W
%]7b-*m$7$(\6kH\/ecF!^nV0,l#'i[ULK0NX[*=`B;O#R=o,NSEC*JJ6-c2Rkk-LR\(V8'Pu/KW\tE[H+GkNik.W5?Z39Ua=*$h\
%bsBNNp_%.3C,73'-u6;].Qo):7Z6sg]nUY\,bij#6hMN:9_ebnktmr!DN>R@rtZ?f8s*)0U!YiQ,/oY&e4:ZeYDpTlq$mA_!:/#r
%,"5^d=R;hWX/Dl$<bg7r!YTN[nP>6E=\!3<JS16`cr%W-Kd5TXH#^Fl%mV/2%r'LM4u^OfQY^kG]`MoJDKT6;cjq4<17"kSOH8a`
%"o]Qrll,duOWO,E*5FiV&n"A'A+e3mra?f$TP>/;;3O)oDbn6FUG[o#lI>4CXkQiQ)6[pRd,b<#CgLJ`4@qOtXS^dJHSg_b=27[K
%Zpt?i*S;(B:Z>ek3\`bph>.lBlGXHu@]rHle.CYVlT$g4K@G=L62iA(dNl[qOeYD._"_Dp8oiQc9!<la&N7fuP*6/'Fu(h*)YV,j
%kTEdU(LGR194(:WV;_\W'HiVm-27rGQ.!61&B_l:6mf;L5R!aF5Sc6WT\'VQOI0l;<S6(m:"@,WL8jg%$e)X=AT=T?FKba#%F>lr
%(2^F;H91?Fj!KSA5XUj5T@Kal7TFbq5+(--J_o;&`Vdh<SOF9/<IR\"b.u3%,G]RE8;&PF_4oT1WGU;SMRX*@h"2d><2LJM?IlIS
%riQ"TT%;k[@S;(NP#7j*5L_k4&#VWrKH$gh6#__)gOWu(%WTR8,_u_>NB:g6?Z!Pf%CR&X8c[UUl9&3SBP0)j8+hifPKc%p[NjN5
%Qsr7_hfZPJJKdjDn%JRO)'u,%aG0QUEOc.a`C3B^)/1]qpB.EA3QR^4f.2)VkLC;p=Cl/Sk0BA?$@di9!hms`2LA5$N_te07>_2:
%KMYKgF-m/YW6(jC?!a=LV1R(IA(Q-<nL1_DG%<&X7"5HF9KE7=[3>oslDlA[;*e#UJ_rc.0Q^Vl=\VGD`.dl97[WPCq1Rq&"]Hb$
%c`QhZe'J+-`;W3/.G==tjZK"hQjSr1ja<MiS'[^8'4XJ7i`;6<50X=>W!7&7C;,J)>VG`PN2o)KqQW,;C_S6ITa/SQY*5$8&iYJp
%%!s0g'1unqNN8'4l)Zak]m@BSZ'7.H#q&uK/h-+B-K7R[FieJ9FdXJHF>+SQh4f>"!9h2/(Ii,1;@?FQca%k)L4D4]"d+s'6rBhu
%A7=fOW//-?&=I@IFdRKp7K[b3\WuO:ZEs:4f8S1Ac:o32BM7%IJUeV,3aC#j50G#WZ+=r0-kfGK?tk\7@WHdi-pL>"T'CX/*c5n2
%QH*TbQ)(eL'<0Z/AU%oo?[L]Rnn"5u9"q<kS.@G!Y3#Z*[[_CVCL43(VVG'&2Z-f*l()W-]4.[)9N=&aom0ZMTQf@!"eMgCeF"o=
%)("Z$(4SUs&&-r07s-%QK/@]DYt7N;eGN1[Cl)&!=HAbEerq9CB12uXp53VJV!%m@L@6q":G#/i2RDkg2_i>7T2=#3ZoQ*S]MWWM
%@hnHY^)tV%Fj*Zr4bGO?!1VaGh&$eK4,2X[.8U^GRZb"He>I']bJ.39Vi.SWfNEl@eWLLOg)mRI_6;MI.uVXTodn,mh)ID1B/2'6
%#/6<1@Vci/3A7up)'UNJ+KLFa.hR0*BX]79'q0U"B\i$f.<C'I'Wm4Gd=)'uN0]i`)/D"64qef(KRC18>uTWi1dW%lV'TngPkWs$
%+ikd1^UT(V,-%p?0`0C2me3^*V&'qb;QQP`^7NL\Bg__ds(#ic5'le_k/Fg'.rA#Y3D<2m.SoFC66bAg1T,'oTA68_9*gN'>o9Da
%dWqO%GVZt<X\<FTBT;lipEM"*/Plt_N*sh6#[(pN<T&CRcC&:2ARDcHH#5]!K4=a>F-<6H_p.qTF;IePo`kkmRsrqAO2>tB+O92,
%IVL0$U#9q@"Oc6N#X#&me])[P-(k/u*6#oh4ki,f*&+M8K!LnW,BC9(9uf::18llYLYbNC_sH9)Qo=IP`d(,:Xmuq_lB8Y+gC7^=
%]$uE^#ZJ*s4=t"j<KO"SO536$e[q1*/E(e4*288M(.#2>D(.g<-PZ@lG[m`)#HNdcetTd2TUZg5`8GB&b=Ob2n9Gfd6$?Yc+sa05
%jQn,'KS9affs3`ESM-S52V@Jm,<Fc;f:%G1DRL^Zi<WJEmJ!Z;dcl5$A.NG,h,s)>o:88^"[kq*EJCT(TS2&KPeHm6<R$f)`!q3'
%E'cj4630X(L/-@`P0sZ`S&q!o8OqA$f[kDiIa'XELEZ28Z.+B"HA/%@D3;O[F\>KJ+M4:Tj9E6C\38ZfX]G]^Z9;l88`Bkn9/Q6u
%LdH"Zf9IQmr4uX<IV&nh@Mluhc!T,ZE.Y#V1?n_i]H2'0:2A+hn6ljZhA4=<]8C/:>R0tH4T)(!m\NN23D!&-Lrp1GVD_5r4FkTU
%PLYJ?6WV3QYh3)0d4%r^Uge8eCrr@`#<tr!p$KR#l815:;*]\o]/GtUDlg!a^mM3KMah*%/ti$$Qm!*"#[V_MKPAL[K,AE2o0+H4
%-C6L66r9m9PbY_\gnAUlM?o8O09iqtT93\1MEi_doJ"iiX8FJMY`iqhB*,<agdA=O9=BgR3F1G^JnAX9>-W4Kh%jU]B]CpP?*#H;
%oSYjj\'l.BIGc8sNm6f*qXUsPrsX)Z@mH8<B&kgW5n?$dNKcV$8OaR;^#ZE[RFUM3W8k$t@:$N3+be.SjY4qeMR[h8QmE3A3=Cb7
%jA=&[IQjW9QWnn$'AljFpE>3_4q5K*n48DXTRnkCpd\YA^sHgsODl*HLj'ik6eYMdh?7rt$ab2^A?SQVZ6Vj&ch3\c=^7&,j.86`
%O0\Fd=4L3C:9XJ<-Y<E$2J[+ukej&dLU;F=1o?-2![62fobT1tN"P/NWe@+mEjR[o#?pU"hrf3rpC!iJ<0U;i7k@\,K\)gf3-*)p
%2`cZ7P\40rB<!#TL;.pNm]D]O9JFA)YRWHH0-Y"DNGpg8c::dlhZI^tm1J'O'cHQ2W42:\Ft\.8Oa3JM7C4>NSuBd*.P/duAJ5PI
%,UYbDbAOuqpo8$$GlFhZ1/QV`8T72RXN#/.hY6-)1ro#:JZ1IS6bMt:=e42n<rQ9lHKBu_LJ=+e45e$LE:nBP!6_df`;-EkUK5)C
%'Dg+?F3ecRmtYo1iD@'iMl19FY#Jq((Q6*JbiuQhd7lX5Q\RJHb4r1silo-pH+<TD[e]c%BtJ4K-0bW;biGdim+Z2-+AO0tYN#Yr
%ahbquO+(o"HgbN+J>8LeSK(`^.8XE2d"tl$XV`,/>iuu"da-YMXie;!;=Z^%>NZ>q\;D`WGMtjeJb`Q8g81ah22UWO]'BoSUifC<
%o,msX?G!uJldfrF>s4S$=DF(#eLV>9Bu>U-O?PnD?0+X!5*4bgmlb++@4Aq:UV1p^I^<AM)0Z+!Yg8Qg<bno7)5g7;m8;_i##W?%
%W"6gi#in@8!X!\&=;9Wq_Q900rCkSM#e15'FFSZN7o8:i_)Og"g5;9"SG8&8>GWcap)gnBHMaH:[Uc_jMSWkL$.i']7%Q1hLDo$3
%m-rfZIcqR#]b+,Tipih+mDaRd0RZn&0<Z'Z)C0%B@,KM2X>H>5&&`"ij.B@2h^Umgb*XcbOJ>gY<NP5f1*Q-k\@Ad@J3+sG&mBEJ
%nA:io4/*$Y+7`q9T!s/<;LJ,#V0rp8:h*`QGOC;0qVe+^J*'UspI^$e=WHC\QjE(lF(japR"a(Nh'8&g=O)tS38j<qJr>&I'"A&O
%Dr)/tE7i#s,59sPEA">%QZo>Sii?+UjGnIgNusA5&l;1W3[Kd9EeVVVYgeb*!5V)34B3!1#AOHBqF$m3O2]lg`V/:Fd^Z)^ck/8W
%6m0FBoFaGU=GmCfGi[\U+%Gu;D8Ic;D4D2OCWqb^E#.q/8Wjbiko2i^?i=SjjnYAuYJ.`6%1pbR;.FfTM.!=0jQa_BYWoaBHKUNb
%(\dK8)lf"*5\+\PbtD3XangQ79Xp5^b7/gYP\Y:*pH'CHM*sp<SO!ME^&@SSML)>;.X)O$4R2r2oY^8lo&A^Ec`?TZC\4hLaVo1^
%&pKhY58Lkp]K>_'F:SMrQ2[^C.Pi9%-d?2*;!o%*o;HSuoZ:B\H)7[X:i*&VD#&Xlo6K_N@p;lW@oAMA@<O.A'91>%gna!T:kNU0
%GNS;<%,O"^G##BQqMh)2qTB9>J*1Y&3TYEBqSnb$@[]0,Y2laM7;VP]At_"6`U78TDp7dC=(pVVinM%B4<L\mZYB#+3V*)NQPU%6
%3BJmS=Qq=XF(l7t7Ll754=MZtXlW^0o<X&Rk]`8tJ\3q;2d?!iV9>YJ<S*"Q0W0k5<Q15?Pc_3;*X$`RGGt1=rI8H.1nr(E':n-e
%.hCpIWoKA7[LW8]0=UK/^!``9>5)&^heDZE-2QSbBcKlYBPND0Vb4*t>.fi@8,[\*@eQVW/h9iBe!]D+p?Af1251^?=(_"de[WJ@
%U1RAcLPb9)n@t'WW994d[hA>:XW.^`9U>OGm_\gd_\e,>b^4("ADu#Ca(K.`KH`Qn5Nd%Db82t6j+kpdr6V<KMpEmUCJfRiX7k9d
%J!+a5M4+iL=SF@W8%YG#V;L*U.VY3ChQIP0<l<&o*iVXd<tN>:CBdRAp>2&r+8sC+>9]VJ6QIL*mQ:[.SYI^Iong8j;;9k":'VQV
%B?G$9AW8+NQq$\=]c_ngZbs+W=mJl%.NRsRr5X!1pWiWT476_jhcK^)q[%l)':#Bn85rNEa'#$)IIfn'X\!r0oH[''I@+A2Kmm?C
%g4?^'[&E.Rhe_OTlnIGJUauC7Q,S/1^IgqZjfq#]c&-k8oQerqce?W;@hq8k<^qCW?#%eJ`A?%WI:G1]A%l7Js$e)V(=(R]SX;H^
%0C%hK[jdrcnZ%YJlP@[RgQBaJDe?41+%sr3R&iuA&N7aM"h<K9C/76Tc*-B?lYN-3I-[$eWOaLj9prYB7:P[#P^_t"P4V!qOK88h
%SO\(2DI:'mi,69>.Br@s2`1D2*cLLAl+NS?Bu%2QG8ffs[jQW'Me=6jc#"@$23.Z01F;(!C?GWT3aW5b;[e`Y"ol`FnSWCMoN-I$
%mV-5r>b:)$*q??G(=q?q%<qWsY0'8$?)O_oJ%C^Y\F"B4J!Ko&!j\"99qsh9FJ2f]k8C"D,H8QKJP$QH=Ed`BXS-2n]V,6SD50=Z
%f(YM2\:;*so.-?EDj2:C>b+mFb8XF2CXD33c+,tdQoeULSZ;+a;L<\A;N&5ao%+Q*S^R8MDRA^'.`IJFn)_%E^EN8MMZ-"\q+2iM
%p$[*>U<f;!jUI[LA0*rmAMQJK"`F)hl:+^%n)lh_ea*,3eOh]!Yi.Rq1G--THp?UcV158=r&YRYa)?X.h$Cg>.q)$:>nZ>8-Vj@Q
%cR8a>[GS)U9jB.grTR%c@+.JJlIWtY[Rj?n7%@VJi1k>K:gXiRU]--%mdElmq<mm4^KA&RiJaWjTmPd;FP2.f`_WARZCZp1l,[e#
%s/Z:`lG!HS/=.$TFK<j(A\d*X%PgYaTM>SZW0Be]#?A8uWKUjIoOl/7f>MfTlKk"jRZiRl)$\W>]%T)<hLsbTFPVG#.KA5lJN"Lo
%cZV&:./:^YanC\O)*H1<q[McX29F`hBKmH_(p7Q'n]=<J#9c:uflpZSheTg<2.?C0d(\-9%dd+jS@!)D553Y&pKHY8CZ<+VEdp!g
%WL]_Z3B^[RQ*?RPn+qLVrHiqnmo<S0=pqu-FTDP5W[/05lZB6T"U$,oUQ3(rs.?@pXbABAc1"B12D&X:'89TI.O*Ro:45[J9SNuH
%naQ=>G^KA%>A>Q3Pre*,4OuS<3>L-4%BQT#P3*:)lpc@UY<P;'>,jkN]E-rMMP6ZE/(O^76+:8q"CNc`<e9Q5AKC2qRBjT9A6Gn,
%CoHK!=gRtWcLn;T5uFcMR,*&pXF/B2=>N]XEqtdt'nb&kIbYI<-/Lfb7VO2oI;Uu[^%AfI^n^\?,(;Wc1T4$Nl!>Ih&oWiG0c<Pt
%]/UGN?LK]JH(]6CHn=Q<W70B:DJ5%EDRtLlO%8L,\F5]d;qoT<hge>I%!;M*cp@r>[\t8Ye@FnUg/MqlCl*A^^N$O/a'JrN?8aL.
%XIM]R"]q.l@Nu2VX,ud]Z0]f0/dT/jM>B?u>:5F1;LP]%c];m`:;klJ,[A9K#GTYL='as7HqV+8rl0;@BC=%c/`q$tU4uXZ80lS'
%nrdjHlg^%lR."<l!$>8@M`NXul0IQtT(qh@'XkAm0=X3[-/K\mCB\:JeRa%dXP[A"GY5[p\iOI6\2#@D2<fVbpm-/Or/FSX^!]4!
%NZP>i,m\hV8p-g?Wc;]g9ge!P5/3lK4oN)4QXD]G\itlMX5;5,'!5kAh/ShZ@SaA/5;jb#pJ?r5.j#2uW.oH4\.K+n5O=]DW>2<o
%Bg)<t)t0oXh*DH/VSKS(6$g@fXB"f`.lqPde9ED#/f4Kd+L%VVH9<,;3PFtRS,F_hPfYlTbu:e*jgR=AG,^YZUrmm2d\hW?jjsWO
%ISC[CSbWeo0[/Y1KOK=(E9Ec8WDdp#nnXsM^ER4[`^udi-C8'O1ANeIR!2=%.26guFeOoc%BmFl!^HKL/phf_DtC?Ke[tM<TXsLg
%:;=p2p#jEG^JF%Gq#>f4kOG\BhC"BOAabHRD*HnP!n'2ceLiN'c[KB&mYs]ual.a&HguSa"Q>mQKQ^:[GD#F)jH\4+KKs^W5)QlI
%*1_MLqMUm;?'b7LT3MYal%+#Ll^JWU;n_b`7o#)uen5Pa;aYnYW:`$`;>U\HB8?FG'G)7V:A*<'WpMa&-0h('CP#Rq?C25mTfDK=
%kZ33.rP?<uGuuo1fa$O4m;Ms5F5Z]],&k*u1"oT,rPkf'>K+W].G$)oVB*TQV.7_imTk[#ArG&sjcRc%VYNUPDBh<6*u62+%D]Up
%7e)7ED74T#-fT[hLCn392iEFoMn6.A]ehVJ\!Wa!*O[X4]-=]X/aU57FC"mjm9g..eC/eCU5/gi&#!*Hf[L=PHif5T3%7]'o6]$H
%`$)p"1"=d:bVf9cXj(oS)-Oqs#m^=^UER9X>'UIc>%#%jkj\XIhB^'/fVTo"ko^$UUCcRS!3&Mq#t<u3Q'TO$5Z7k5e@Z2BiQ+b-
%4T8t+d.""Doi@XpQ=)tn&0smU-d(ol7H7\hTVI]_E+n+)$8;NJl:edf(K0r;.=esXk!TFPVGX]"\]i5Uq2,`Goj?PFY_Cn("K0[r
%VX#U8V[<)(\MYL>;Ygef%M#)1["P$Wj#2u<,X>cjG81tXJ1u,Q/ctgB?S-q1#mNZ;EBZ5C@hS-.J:,dRV8<\!0Qdioo&-=*,[4s(
%i]jIDb!Lr,EgVLi%PjY.TQh#$l#*TW4,HD)On<4AYbapJp)o1-BT`O0;o>4QY=eL7\Z2IX.%V/24AbQ)joIVN9hOQ.Q.8og?3<"a
%@:'O?OW&a<MFKT9RFW72UnZgG**hqcp0\\Ek@=^gX/_`WWl31jSK8of+%F@+dB>1`"j<@@6%KEBK/NbG)e^%h;\/"d`ftPgdR2h^
%].1/'0pS@t>%[p+=URT<6Zm;O]YgF5KA)R:n2?q'ePAIjbrFH%TRHDA"9F@[&U0lgNV*tdgY5ulGT'^&"T9Jt^n6d?a2Lbe.\]E'
%d9p?RYQDXEoC_BiE63eI5+e@VAc?4&f-$+c4'g<mL3FA_618U_H)MT=Lo/mt5n>;"/=mJ?4&''9'r)T9ds[bfT#XKhBFL04f!u%Y
%.3?"@Rl72pd#trg4g#7:^^d^Go/YQ.ENDjhZkf3f:0<l(4+MDFo.Yn7^X4C?IPQdm8e1U"UXdm/HqK'`de*U?))dT8N2l;i[]s5+
%<ulN#L!s'$#R1`2>9DYR\:,G'N8J30'0gPEJK\*9g2=St-6KBjPcBD\fWNJ6%YK5W6jJ]qoW,-U_4([7X<uKagt(9WH8#SpH&S;)
%G:_3XK/8"QDNr)IVh5:n$,>S0fBVYb1iUQFleJ_#2D97$*"+*/B.2A=<W/1XM"IC&!100q4p7Ch&Ab[_6?)pheDDLWMc2DH>^<UQ
%SaoNLD]2?h@:PaG]geJ*K/+hTeZ1dD?a`M@?kQ@fG:!AK>s,r,\D,!nZp^X3F#a6opM>.^G>'Wj'Ke`]J=Xk:U?9(9d1SS,ZeC;5
%l9]2kZEE(Zi=S9`mn4s_307;T0C%""`GLA<V%UXF"G]diCmJK;3;-d$Ep?'"FTT/Nb?;3e<=Mfg$4+Uoc0/SGpb;i3DMCY9J<r`_
%!A1J_MXVI`?XX_CoFbqSN6,q$$P_ZC]$^sr"4V;U7G`/>g,&eXLSk3<Fa+Ot'm*tOg-QWnSm:Y'4-1E;0=%39FVUWF6qKG9;1]u;
%aT1Io%?tH]DqDn/`1N0#e%/0CoZJ/I15!"9b-EGpRuHM.`C!RoREnh19ZV<=8G`O#(!YVm[(nC(#.#aW&tqp*/0Mu7Rq:!I'k(9=
%L/5de8qKN[q0p![MbqpUBh6TP,Sac(CE2A)h&$K^B<KGp>7`62V5m`^G>c]I$LN.kmc:>1m0/=6Z0nD1gJJ.&d$6_hQkYuC:-m(c
%%+c6D7dZ+>8TeNqL:.T![9<YJ0M%'rMh/S5WaRL<U^%p;4VYK,#T;A]]`TCQc3oDA'+lbHorFTWGF0m%q,%@6Si%8,%>5i*g7L58
%J>Q@>oP^IbLHrS;D0,n[S9G.s71iSoATJC=HIYOoUQpOBCPdd$a_og@2TOUo,FT8Rg`Ck5*O4Q#-A&FioOR:2eiec;(OEc>%Mc+(
%ZX'DdC_7iTi-#l(SZOTB3Mu#!?hHIVHWRSB\J0/AP)`PCfg$D$T\b09PIF-G!S38^CT)%RZo/=%6VlAQ-0]fEhKs4sk_u>RG.]o)
%^k:4M?$1*B"jDI`Al,B+s66n$?f()U,9nh.I[=a%E%thGMmiuXSRt_M4&^(ijrkdF'gh!@d.6q343LT$:t;:MhY0EE&IbmA*>G2T
%,/N[9"q4R%Bbf3-Mnldb=-[U$\XLGiBo7]-Wbg0S$U<s_"EDdJiH'oF_C$9p6]-^KPq48PC/Iem%F*>YQYG:,NMq?J9*b?/i5;;*
%c;QT#DO\JP5*o]NlmXQVGqCIe$bVmqdtRoj=8Gm]]@.f'(^pWaOAeN-i>!#$.dN,[-qCe+$d9<o>md\6%qD8I031WcWoEW,8?dOT
%%hh=\H>J,qTd33DM8K^gk=-OSBJ`k%M6S+e7m=tRZ>X8]Rdh*)(Bb.RB=;8E#>I"2rD[pO@cH__P+NH-igh#JcK]:FL\Z<s&P.s$
%f$g(JAi76//KMo54X_&=lY;+ugWlaeC;U<J[\F\HT:7Y>3s`b%*mat:.Z*=g[:\H#l8k:HhQ]]nh'1fWaV^D`87NPJ?C&FF!Kn$Q
%cfRce5f@#>hhS5.mR`C9Rje`<aB_rZ%t*6H%)'QNW`0d5l-lpqk46K+pZR^U<G=:L+BN']B%!OJFgK9mU'irA#nMWT'tYsrZj!-8
%C`%=0i\V-f(/>\D^$apRUs(Bt-oJ1Z'"3*?cUMdDfMg*Eb&996kZ+!c3jtPYRZW"QVf>O=)Hog'Mc%YXM'V>T,"N:GLT5\s5GQ1:
%n`*6c:8HKu;,"O'FDu8XUKY(jP:5#>8NM+fgLJ047($tjMA(#S_NhD8fA`?_Z@r85h,'X_'r1l=H0ENb$NZfcD&.6^8[dLg%M5Ar
%H>(8!CBC?3_[cc-g;`VO/68<B9G>!#WT.<GVLo*N0BtijV"Fa\AJ.^7s(YoN3a)cr*G[S3Ncc)d`!sF\OM91!<r9`V[aF;4B&?<k
%ZBCVqJJ.S'c_Nm.FAFr4'#.>VbB`glXIhA.BW^@$p&B"2I]_2cPhaU!dL<.eD=N"qfA$Hf+"s<HX[4Z*pVfPi[d(+19Y!j,fY4MQ
%LVr1Wa$iB+6P)1?$s/NN1cp#No?F]mdeHi*'/3HJ#u=0Vf*I^;WV2un!91V5^4UJO])&KdYjAOW`UpQp3Y`cWQku_]@h0%)c\UiT
%]Wk;H__K79iNTYVe0tgf4B=Q.h/jrhU9oB_2huK^)O8GcK.#(fMm_:k2-5"<*$<A'dM0]R<k:e:-IYjggcWdiW">8HXB=4<q,doO
%Z0!^feO/rD5MiG^/f->BQDNW<@<,;+8uA.("rb$r(an0NO3<FT&D6=4g1*mT/.tT:Ur4EpV'o$JVELVq35a[s65C<#7-iu)Do3@8
%]rB#Kl4.Y<6+;T"eqEM`MNQ8#MFp/=6FBXbZi$$<Wi@Lgq@ouC`&CKs9kD*]QVen\4-'P"2:l;&:;kb9-Ohp?QdQ[M(BtP)Cs:tT
%C)5)@D]I7%,7*SWf`Yr'ZQj@?LSJk@B`L&@e>0Bmg2.;U4Dt<"'%F^4]h1Ef-Rgq=8eAV7..u@TB]DX4%dr\\<f8.IV9-)PTnomQ
%kt!T]BU+ND#VosKBtDSU-q;:b9'?/kO:G4\.^"h'F#<Y$6fUSNQ"RF3Vi$-U1c7%(>ja&K<SaKOV7fhaJpQ*Y&.C?HdA#%]4uY>J
%%A/e%XX<!j2S*$d67UiD/2_LOo$fD,h&Lj@(ciUn!=eC/3(Bm@)HS#?Ss@:XfRn>)L(B=[fpT-qfX(FCWGY*U-,YAARG_K06SNj+
%3ggoM:7CDE/;u4GYOb[&<[VVYK"a0$drM-6SQ]H>hGmhtO+\u+*5r^US+O]b/.&kqNBAhh@Da"Q[jTA8OECqkCdA:[-YW1-Xd+H[
%bq^bjS[A=aBRgDc<E557kc'??P6=DSKIO!We+9OCKIBN!rSFDl2@aLFT8>p+!@A@r58m\`%(qnt0.8?uA58&+bYaOUPe,-joUEs;
%9KPAH/;WX*c&e=U:.KWYMR*3UFB#l(ku-p>:1["M-MK88_#8m6:do-]i,Z2#0Q/t.d6rhn'M\ZY2(qbVQ4(5:Or7MiMK.^f@N1SJ
%1IMM3PGn/0mQi"VdIa9_bBiY<aR*/f.a9Oo$D;N#puXk3U:04-mZ&^N5ss4!TNumC"PALK9PBE_s6^ZM_Bj@r8/L?iLIYl1.>pTg
%QMtprTZphC]da91Rq0g`;^f!=7U:or[FDm1Gf,HKNft<P2ma,rE;)pSekV:!N!a7n0p+aq,B8Sb-SPcM/)u>^d]fV2PY3M"2<R$N
%\]V`.jsI,E.HI:.cps'emEARr5"P*@]^68j@M>mi+&,(a^Nmu.##=t14]R_H^1\UHf$0b9N[7#M:+4X!fa661O<Dpfk(G/F"#a&"
%dTjBh!jK:+aA+F4CUA>]fgntWS?d/MjpDZSEjp:gX@p12HrWR*^T'UER&WoIniW5%"nX;CIMgKAL8/^>0Tjc5NDCh59,O"NSe?2J
%dQ>m\"5csT+:]^5,'\0<_`aFQl\^-fAZO/dI'SGW>Bks#Rjm3]hklj9Ku%'Q4MfPDJAmHJ-F!cKS)LBGRagT$H/ZEC1c5)J_O_UZ
%OVQ@oG'e9!#(!ohkMdcZ@i\:.:[.PgXG?-sCAcZF>f6c9k6)l_Ou&#jA7Do<-\R%mCC\[eak\R9,+jo1Veg,)_+i&DNN?`G[UG0^
%Z-NI<QKC\>*#B$<XF(^1H2L#'5KgZKJcP5*NHWgF;hnMZY/3<R5:-+</C'(dkFe;E2L2U;4&5'ADE;!`-r:.qI6eoOP=_2OCp@-t
%7hW#LL/Esren6GR&,qmJ#G<ruFZ8cO*H(dAU1NG+YZ>LaNFN_DK.K2tK]`5/Z*(C&^gKYh*KqaFC02V7)m^NS_h,iRpb@f.g8RnQ
%BB5\b`cr60AmVp-Z>7':e:o'n7XJfd9OGi-6T,7G\M&&.&UE1gjZfs^a9?%j8g>d"^7$1/_[4_U@W$'M1Zb">A@$u0fEClD7m7<i
%)uB`6aI#=+[k9.YW;J(;B^\ucFg7!B2l9$e:rmCLCshoF@]fdknr.ZJ=uXcGQeQZU!u77b``.(ZOXmQl'Q0;@6W-V#2\t4E;R[Sm
%Z&.0YcfHj'4/"ar].oWbNt4=l*k#\A:-'PURIVtppd:5t>n;?KTe#5+WMSG=.h-7*<'7e?$<>C3S"p3*-gc/p9][eQji(LW%nUmT
%h;Xh'FX;30R5HhGZW5&>'G&-J\[/"k"'[fU67ks<#`!+\GX6TkP";5!MX/]28;i.)!Q%s(HAC*MqR6q`g'`aT?SoH0aWUr0L<VCd
%!Nk%8i$;:nU*HhSf=+7;'FmHc&^rSkR&B/I?&>4SI:Nf<#F%nJaW=tH+X3N;npK#"8U>ZER"IV7o9X0)\\8T4_-'O8jgK6tL^2;^
%rAZ>tVP9;*5u;/WCQbul]2o:YBpe7u^m#R-kSSb(@^@,elIn-iP7>ou[qb1CW@LC&CGWG7_m<s9bY-Ai!R,HOi=CQkMcMQ?XZH<3
%V),'Z^&+o:@AKhA$eq,dl&OO2*=>c1in][YOjiPACkPlLKGd!7_@6t<L+>ck>-hnj5#j[Bj;.S[3X8u?8KLWN:`BXLg.1o2`OH;E
%7I(1>55?#Jh4)jt-!#lNDb<iBk++ILqX4q2'0K95(ELo[*78eci]0d/G;0GNl^e8;G6a<s)5b9NZZ%W=<:Z^q\]dr="WN5?Ng7D+
%WVJKAO<%0YL(5e1)dHAHor4Bn$@oEZTMaf3KJON"P>W#E?CGjOi)Uhh[aiJFO`%ADL-/gh83rc>br1b.i50EpqoA(M&KooDP.m['
%.K#X:Hi0Y+7n7<9EPEJS1A<';BH^\F2]Opa+o#JpJ<OmrjeJ3&;E1,t6V>V=BH^9o)G#.m6ZO$IQSU/HNuH^sKOsF*]U=F5iaDkG
%8qs1q?@teThUQ<l3:Q5dHO(p5d'b1#0Lo=_>OU_(**bW4LKR._Y)D>]j@mHC],lhBQJ=!X+br6O]4bWQCRgYMWc;B'mf"]";Nb"K
%6"G\t-93!D?mVi!)6D*2j$kdON>/-sI]#fj5`u(SLGpB9:8doinO8&D]8FZ+7`rITGF6\,[9eauWcaNGkZ8K%R>NuX.0$?uCJ[*<
%0Rr$6W;nI=C]7"Y$3Y^;+7;2Fms"5FDuBfj<.5t#J[8o*J!TLaS2qArlc(/hDL_hEFV4YT4/M<&(aqWTeuHcsWfnU'Hr8Ss'J6>c
%JD&+f%V-'Qo]nn[3UWa_"jD^N1$M)"-+0b0[idi.>)i6n+[2cl(hl.%MNqY6$>DGdDCq07:=Z19XV=lKntD]%)hCn`h#0gCLZtst
%$,]c$&n1GHb-BAm6m:5d9uiM[KHa=M6\.9<SN,'Q>:O82>"$2A6`J;_#FFN$)^f,-&/AkmJ`hpL!V%C<58PW:>mKYd)1rc,!M56<
%'4l=&XEO/Ms'S&a<\oNKYk-CbWeo9_(N?YZhI^\6+U%NdY>Jn%=TibPnWPA7+psWh^=q"46t>QP\B"8I!4H==Ejhu0^9:bBX,o*(
%XriYZ6[61Jf<:'PK]#kHh8>k<L$JM;7R<`.nHp8_0l.Jb0/(h2d;le=,*WrkI"5^Akp//._2li?@ZtiIK9m&ZFUI\:J#4qt41lg]
%ar)D$:%cpOgDaVjL*m`mMNj\/!q0DP1o<LrFshFdaps;L[cR\2VD@u:'Z>AJYS^pSIrD5.$B7hkd,%33U`dUnc6cttW1sk-8?ZNG
%:/HHF_n0#Z1X_RhKk)U@*$C;.o!'DVlj4UYoODo:os'>U*-A?n^5!MT(3e@BPd.lN4-H.u"Z;$g$!`_)JXfdKO93H;^6%j4AD`Bo
%/ObiXcZE.dhT8$gB6?,Is'9=OJ5=_\:dE:u%\\ceiQp('%hA@ReTj_HA/3Da#HOF=5L/hn!H]1l9u_:Z]L_fsk-9(shRAFK55DXP
%@P[X5f=lFcnmTZoDM@)+'bU4rcW,Gm@E54[?[0#Rdb<s*pkA*ti_Z\J.k+@*]<OCMm:Q5iik1Cr'nBl+Z12S-b(n@)OO'G$O;B@8
%(=*Lql:rq])d/k^*;4V6dfN45Bo.*MNKlW$X!kL\dW(WjD^/<>.^fUd8GTkf(%&mYn:JcP$]mSq&k8r^V4#-ab(7bp01C3LCcgMG
%-,c%%:%("C:Llc6gu:o)`=<Q`i/>%4NbO4KK*87H.!BF*ici"u^('1+QT1.X?k:sS_<+A`/)+p3Ug>lU$Ir9Vojjmo??#Kl-s)BV
%+Y?=::pJ'[_[_mFSOtmY@?mnA.E@=k%nMlO_rGRMo0sbsU*ZA1afqhHUgd6HX?;C(8b]SH`L*hDP@#lqY-t63;#8ld=tXiuk'\Mc
%XUbY;(s(i"c_7uQB$mq&VI[>nig@<F:1e=;-$2W\[d0ht0Pl//M+<"lQ(+W)CF)4TJg.+o<iaFVTT$c;dsdXBU%%nLCH%V9PdlH?
%UiJ`BdJ#LtbE[W<X@0:s)hXalf3T"&;_.(!7`IqF9;u>?#[q+t(obuWEkJJ8fuQEdA$*J2$ir:J$'R@`.lP^9?C`(2-%KPV6#f^(
%N0YToC(_&0T*:j=VLUfRJUMkh]CuR-RBl;JB6.<I$h^M`6o"M//EbDe8odBKUEoXiSG&'TAj-(WQ"Y^NBYj+p8nE,4CU>;rk@e$Q
%j$$;6CKmA.P6;2Z:NP^0ZdfY)Md;uaQm+gd48<;Qp'r'Ng3T3Q7AC8r[qVLL\AUJk@Q^B-SXb$de[@*XWX45s(p5JOC*HU^@=ub!
%Q,4F1YTG/8E#mQ`.a0DZE[S_&oA_+AD""K2Q)kfigqjW#0A"0pqPLr7W#TNjc)1alX$eR:oD^OV6QAAmYqWC9Fq&GENgLTm6iT'(
%9snS68LPlYU'WbsYlZc?@"RX5%@0k]fTeh"6JU#?0<GMtI[ScS%UPZ:KrrC,E7ruM>k8r[4u6;eV#>>4V@0bh.HI6'Z;nf%Kgf4r
%."4M+&lSOleMsM3k\uc\E;O53@b?r^rj4#%QiP-VY3h+;*6&%kEeb9Im%Uu<&%7t+:'?]UEKJU_k_/1-26*RpN>VVLEEG4RlXe/%
%\?-;-jC#BIabLjjS<Snb-q);2GP<?YHV.'#3m6L#iAa\3IL_urDe6&_r[FS)2#Sgne'WN"+"oIZ"f!ubEr@c$Y[2cA8B480%@O9c
%7<'Fu_T)96?1g)GntQ`-"jQ`BD:dZd\f.c.DoCi.jPS9/PR]Ga%9Bs=&kk^CC/MjB9XY;%lcN)5">Bc6c]r+\,8gP*I[=jN)#+O&
%^T*0FZVf.-`hB3.j:9#U7#<Ej\#Qjr(ut_BT:tc?7]R9iS/1Wd#sNr@btMDJ\#LMo$bDM`5cDE\MCBT,700H\j;B+=;U!dIR.]-#
%M7QuS\jH3Y21otL."sRT+C\PRHb_pikeIjPoJ0!5[.V<^p<k<ii$pc9'h85Q$dO\1orV6i7.dlJUm<9I*C3BHM7C,cE!4`[:*G9A
%K;4U)B<"0ehoYYHOteaWMb5jYdYQk*=qp9`00h`C`5rnbM'!qA)Ub4ri9@a8V=ZRX<"/]>aX8S4W/W_&.%a^o*Jr2bDpYjk.)nN@
%7E+Z1'V1Q2AmeqF-U;r0<R6qBHqW1a.DsZT8[RL%,i7)%Hb_(a(NgHZ'VeWO"a&P<$PY4UW5cD011DTjgF,EU!Y.+>0#5%>3p!S[
%<K:H>)m<+IYcY:k%M<f`k/6J[J`U]![N^L<1>ocAk"ga\2L-9tkih`5`JK33IHL@UcO;smX9k1#3E#dk>15MHPAe#t_MRLfY+K.G
%FREP9CN)9qKI&;EM`_jE##IN2XG]u^MUXu7VWpC@#>_7\-2IugfjheK/6_YUW`0L\WT6n&9pO5pO/X,P-Jsk19fWLkPio6dnK("o
%/V!uldFNB`/cnU;62.4pmZcG3VHIa;C_'q[Hd:CmMBiogEkMhE0l2'6b*+,9U;bfmJD!^-KcsXmjsOs4QI\$bI7A&`%Lt]5a[B;1
%8W>Pd8*4sQ&p/Q,;Xj&@$o`h^(;E[/fL-6k"mCiO@$IpFA(@422SjmnLE2,eOL2%)TQ]683RV+L?GVE]hH8n9?'J>(6?\,8$6:be
%hVD,_0oZI?]1jJ:`.Be`:;ZRLP",PL/\b6YkH^L<&]LpLF$1@2H*YtS@Slla,$-0,K4(LJ#[a5hBZpGV5^XR$eeuIA4tUepM_%pO
%S7DU^]C9=Z?7Dd!pb_&"rFG%HWCJGKEC5#C;!kSp=bhjO_Lg,N"C'otE=^J"At2"#H@KZ7TSZ\Ce()RL[5d!VObAV6WEDFf!108F
%ZR6a#(+2nQQ_0PorF\E1Jt:QIU."VP'EPGpelgai`u=5n+_u&G7i88Zr#=Y?S\bI^4QaV'`[C0tW@Fb*]7]`eF1C),L[B[aJ+m^M
%q!$]7m6CX@dpN(ADl7.Bh*:r0T76P+5Q1Q\S1j]!s7"'Yr9s[Q3Mu[/2YC8T3?q\HaodWfeIFP#Pl3*3arj3J-W>X2m*:F)iBSTt
%"'qbTAo)cP(bc"jgeIYCiC;]"AM:%?0PlK/1!Dk\N_8#$$>M64l(qiG/Gig'&7LbaQEAf]F4B`X82g;PV\rdHeU<WO2k2@FO7frl
%Ak%K6-i^<AY81-[6;V7<MFuA_ql7W7GM2.*lI1,m;cSj9>,5Ce/d2<.A#j/sA*O'GV#+%j2e+d^o9.6oir,hP$GNDTpbVReGRQG7
%_8s_F,F$J3l\esWMeX-@XCOj0JHr5.fiH%,gR_EZ!`e=h:<cBiLd4Vkc4cJE3G`&NgfPfF%>sKD1e/74=p1u@6+([L:g_3cd&5F*
%IS8,eQ(#j\qR?m9Lb)]?p-T`*>SLBujIk"!55Am+3mHa4Uf,^o*JP)S^339@-d1X(=?OFnW.m/r[&uu(T#6S!U/HkqVOs1BW(A*h
%_4ToU:enK=`mI3+8kKa.'d]mtEF@aQCqo<_Q%^?_JGA@K,[j"V!j5G\n4lD&]m"\9JU4"UPgF$K:kbMU&r'`]MlrC^D@VN3H.bh?
%F"=9a\(=?l0AG"/d;&!2U9@b:>o1tX>#P+>a@CFJ#A.LLeDO(2\AANcS)*LP.cLfQB1Bit<##o/\!*hbZW!@X=+f9R+85L<?4k-g
%WA2>t8(3413jPO`Hm?o=LnW4$,7+>i<Ti<CbhYP%e)?Q"O2U2;BV6uHK/A`6LVE<sOGr>7?KJ$RC!\7EDJs/;U-`,6YZ;tig+NC=
%GU8C>!B51="K8%Ud\7NKUr/s#9oGX!.#1"M4X44BI-CCu=X4]hBB&La^*8$4q`Ct*XYdu8Y#Gu=3^?qVY)6%J6=q4clH8,+UK]g6
%].'7?I7_uV;rk9"j@E>6`J@,J[lKhK8P8-QqAPd7IbBu)l<BAj=t_1QE2n^K)<dBb9!!>&1__`JbiF=)cUY>S6L\uQ>`d@qd&X_<
%\5/EWE%&WQ03RoCAF2J8#>nK9<K10tc&3K7Ns:n"XdA^QU>[B'$I/m7ZIo)u6G!\r"`PaP\;jb5o&*k>X=bc^B5/gIpbSR[__;%(
%DdF$jiE;s?J86o>TeBF]<D]Ie.b3anBCVQ1%p-JaY8g?e@Sl*"cd^!:]cr?37*d`Sa]`Oj8K]O(RSD8>]:W?Xl=P=BlV>j&Ye'El
%\Bmu6X?S."$f;rrN+B%!]'8]ZD3f6oX*hG(@&HLEcW!.aU3A3TEOik>a1>ak$hDT.Me)=GN"Gqg_N?EF6iqC8>mZFUGc9ah`,VWB
%!u$cld`^&QZc\UO[sHZ_W*j+V=8:k0Fa_6XlFs'C1Zi.[4E<;\;o]RFf._]GeAf)fE3eM^6(AA7.O>.Wo%%=qYND0HKXuqdKW7C\
%V2eB<Go[$U?*;]>$]gZI2[7fiG@0T[WJ)V$Fe;f?C?YID?;ec%W:&"?X#g.17oN;^rB"3H@r\gt(`TD2FoQ'o:!iG^7H-/f9<'L&
%(3=(>Mm'`J)J(X$inPNHP'R4!"(5o`FhK>>?6?Z15tSp;$L[_.NY?J_eLMj8;PR>u"tH]hYkA0poo%AlpZ*5"5590"5XT;3\L<,q
%gPS%FmTR>>qjT6WY=nC/fhS\)r]]mI!";6;`^fKO0.!^6;\\AJj8)t15#tT<LZ7<1j]FGg2uj$0C:B,_WKt[:V`cT>O1Qrr[]%UI
%=J^,UqgP,;k9X,t4LMkir"!:rlRmC4$=0WH6VP&k#a&AaAk-Fao%R.0NG<q*/83.K4VF'bVcMic>YgCr3;g-9OU<6_9T#cC:-D>F
%,urq.5G`M#b(`6@HmpOJe\*>UIQ.CQ,Vd)%?cfI!X@1XCdBmY)nN?)0W[:R``0!8T@Oj:Jn-nu2D`eql]H98WR$Rt]<H7NM,BYUM
%cbmJmC)1Z3"8P;A&1=D2Y39Mtj_E[S&#N0$I'c=:<QYc]ld93pe%RIYprs=mM!$h!o<5KQFEhVaGZAe0>$TOI`2%\[js?+pO6paj
%;SSW[<g4pN3L@QG%LF:@r^agU\CsA!?<%(n*NLP@e0,YkW_D.C/c)jD,YPME#Z7'Yc:8W,]&3nFl7qE,peh!M#J>(45^?R@@.+e*
%QYp`"/(tLM;"d?]8'Gei-_e'iN.dPoU6`^/3!m_ui0q;$PcNCb;:bc8F2.S?6-Ta"8)]W@$V+0aT;'me;5I,6L7:!"8a(t6IC]b`
%abs]"YV!9'df6%&^Dp=#?d+:('Qq*(6U>Al;1Q.DO-&3SMG`->pI@!OMb-?YE`&W9q,*-_r,eDQnri8R`Xi-9FNif81^?Ug#>mYD
%0'u!1<%4fkXls:,RPkUdNB19BNZ5nP4P^#:Q.N6WH*]ohq3=Wm?'!,`q8K+T@4oBFRdNi62`E.Z>\\Mn&P_[;8?/QIYTA6qOT\&H
%G>XX&2_c%;mS?bnU2=a<)opM*G^A+;Wh__AG<!r+NT-Cf&G_@E5EF3'*=A/S@s!EEoe`$hM"%r:6T;osUbW=`kleq`<LjD7W\kc]
%A(ffZqQeG3J^tk4],lD$8<4uWnFIcSl1,?I&#gD_\T[;;$"3M\R'bAVB1r%_YEr3P"$feF%QG'*\u!W(<*)'ijnjHCblGTbO:uNc
%J;)U\)kL!o)iInZG]kYI0Zp#)Z",PeZGhE,MLOo(onrO(HJQL;^Z7Xlo61:$WG!+.09lS98JO*=gQC9ek,1NG2<]0a$i-n.Id^m<
%_;Gln_D?=r;tV#XHM55Pk?5KkBb0\:Pbjuc@+6Q#/ZWP>V*U.9QB,L1>L_YYH_uE_C9BG5Aa>l,I7_tG#5$Wo_2>e%"0J@H[t."h
%Yr.qrkd"LuJ9=#d;frIC9\FR8@/r0^RHEMlnQ:X4=P1N#!Tt?5,&4]GpmR\JlHaH)l;<bKO#dqi%,.70O!^d_Ie43lb"+$[g_N#5
%qi^g#^1<2RN1!XQUR;;nN^3T;2@nmp&9J&X>?!+rqrhW#>P4$."aV*\-.V`B+7`S+LNNuNFT2_9-Pu1GOJ^oo>%@#ZWi2:S#g&Rq
%SB$%LAK%Zfe$I@qD@tk41>$HdmJG.=;1XfgF*%A)P=uKV%90'NCkmF1rFSRFJ@Qu5LMmJ*2F>^&;El5%mAb]mO0GNGNc:ll1k\M?
%Snha)Hl=<LH`@ShjZ/XqHX2DcZR-Qp<&a*`8lbt7Qoo+LT-.T`PE#6'*UPmSpMn6j!J*:35NfT@jP=,7UNqYaGl8DI&5mm]ds_)"
%Qdj!J"]3Dc7l-Yf=DSYpJ&H+?(?5Qr9BVDL?b`UDTc>*NTOdl0Qso4,pCU"=6/'!=,up-rB7kEfC)8/M`McDLqM^<7qD.4N_Ol1L
%->S<V)rY9gmRuh(@o3HlG!?G7q><Q7K]KapUf,NpkO*f_c+#F+hi'u1^#a5PX]^D)isWu!K<mcTaXWHKH2kVMYV3!59Pqs>cZkh2
%5RX1@LC,EIqaW,=:23%5s1\*/0<)5q4/'[h1^d2=XTurG$Nl*Hj8$?<Ho\"JhnSYCmRsRsct"/NVZWAe8,rKR7>oYXlpOirk/.SQ
%j1_=<1\3d<jm.@67'*-Jo'bIk+;=[j,8HLDBsTan^8-4)H[D0]5">f5<K3=M*D^gcISpjX$fEl"'Y/1!C>'8kLc@GHGW6*qIYe?h
%8_heAaI@AdE).[73(c:7WlR7l,p@[biBZc_ggibI;n!.7cJ50A+1#uS3/fIB,0(&(?$0n":u[fgj6(kXd9W=S1ke0jj23]7*D[qI
%9p27DVBf&V1PSX%-nAg5JkWCECs-=/a?a[YV.1C@LB9O$nS8h]jLdVfQ$`m#Ouk\aOO\%f+JVq$<W\'^M2ca_EX.jL9_!rF&>puk
%8TJt2=Y&?*.1<V%4:qV_=V$k:HWEt"CIHmo$;Z[#@1Vc9\YT*9Oa(6<a4&JuO)3nl!e=FOJG(Y=S[j*;Y`@$",>f"lL>=-9!prDW
%kJf2ePP;#2fMtChs#AP"`K:P27&iSR[kjtf?&uDXHFO-I/)&V=i;M]/;G&rt+HfU#9)!ZVNqm.7\FRLbgg<ugGLuCV]R)c)@[0i>
%+p.0h/cTtb5;q<4G`I?-gg9/jJ$FhVTaKT2@:6$l10&3>oT#j)35p/6HQUlIW1A\f,Fp+;n/1l35:e'^#]]QhG]dEkiuaa6m;8Nj
%Y7.u)(og#//Va+lW?<&5'VDACP_M>nUK;Ye8$qtcF?f]<ma;FAo0<6Qs7hAaq=u-3q7lmcJ,dQ=r."^ts7ciFqtmG/H24MUrV'+,
%=Oj<Y@GOqBV0`$:0-WAf3SP(okS6fS5J"JX<AG/F=N`RPr:hV*V@?l8+rOB@>&uj>UL%#Ds0>*Tk:'Zle6!mI!:H1dcoe<=)X<U_
%n0XdD:t,-4OS^/`Hnf(KccIf%r[pMoHD[]8dSRm(Bn[9$BS3bEYJc2T/]@orK,-TL,HjMSCfM<J.6,k8QCb%3=sZ==h8Lf7T\-E"
%IV`?Omh_5;Yb,N:Hl"#>iN#+RRO$39H_tC`6*W[pM*:,6LFke50&]R/ngS)a?e>YS)T4e?/(in*ck#a<li_tk<"B1H/)CHr9'JO>
%Vh:LGj\m9'UWlYmWd0"b0f6tLm$2,.a="!q,f0snU!)Er,%rKZmeK:QQ1"#2]_n7#:=!:0BEEiO8@'KUO*^9mX+*.LK>f)0^:Bi:
%CG>uPde^1#qpiQaE^)m+*hqjj97C30#-q-UhNd7?I9aJ:f(b/0/C*4<>+?Gs\9\I8pfEH"XBDMBq"\rR5dL7XjZL6@j6CRn2DE\L
%\X:Z:hMXIcK0'Pc)Q5I1[#cMfJO,g=a9mG[;4h4gi>+X<'fZlJF9[-R@RRD\psfj]f0,]qIDa2'h05JB-.7QEp:pXhJ,NjUqerp4
%ln+"-C%;m&MclKB^KOJl00a:;LG.GHpY($>47DiVeA(?=-1/?9)ZY6=Me\n'A-6SR$_/B!17r6'&*[KmeXp.fpcR]MQ'c&b!1_Wr
%+?-f3WErLHJu:p@9;5dmmNEkleGBRgGSBMi\Gj@B*]D4?%d^TMH)t6Z=2-]0SL,L4_W95/VSf2VbM?c\[XNQAf&([H:N=/=-9Xe+
%K^T6lCm/1SUau3&\Sk'<g>1d)K;LIXZ_ILl8IQ4oKM1LX4_Lo>iC_<p[_r/S<Mc=B]i.hGqK_b`&>K`]@M8mkdRVMCNTN@?PuuYO
%W@JYT4R>cqX*mF8;KH=U__f;s$$WIUI<L':P:MtJB&2`,Z[-5JV1_!kHW*=Z8cIfV"f^ou$^Lp#eZg8K96q*/.iOk3Yd(C8Tql2S
%Sb'?apSK6@n3e""nm@?E7U(#?]fLNAhMl<YD"2<eo<;:8Tf(/s3KNJZUlK^?$`nniK8WU-!ORr*eFM-t(l%IUk"t)Q>@c:aW**/.
%q&H;P5H[RPWN;ibLo#MSlEGS9V%]u$UuLf/;:EZpik,-kj5H*%k@+=;kFAZt->1Ma$.+@;-Z(.?J74UeeLMk(]A;Y%rT/:J^MIC%
%QVHfk/lC>d+<O(_-F,g48%f+d6X*ul*Y0(,]1C+P;Xe_OLP9G?0qW8[NIcL/.Fp#`rCD'k5TEEnangP*@oF5QU!shK>1'J8Qe_db
%2XcA/(qVC+fjM5T6iB<n'"rM=k[%KKI6hio,&_@cOU%&7]*,C(X-A'ZfhG'\?5Jj-6Mb/[]irO9>'dc7QLCfE3o4g7<I\HFobq@X
%l5_3don:legQq=m74^T^H&bujQgjW94dYYSj.QE6#]DT!>fC#?&f9Cp;Q;_dGC-u':Nc">/S@2Y((NT;Th_V6Wo%?5/C?t$bu8W-
%Du7&a[Oh0FcFh-o:QieR\HXpUS)Za^:;$$t.2<7fLEEYY.d*99*`KAQcu)U^>%1g;)#ijRc#?MXT4,B!c*s^g5W;<c^%H\'YKT8Y
%(br-b5DJPhXLcK#CgZmUXdADZSk<QFWEq4SXhfb70tXK`Zo+0`?A4a%:!tKPO0jdiCMd.4TGO!r"(8KT7t#X:a42+fVs;f]"%[TL
%"CQ=.0A@Kj]9EP]0_c#KkZ?A?D*GGqE@Vu//d"-V+$&2V%kh.%K"N>GIP0IS@O\smJQRc3Q_5XWU"0TM?6L)a098Q8-354.0<La'
%[6*CHbAOmY2B.,O_TYsa@`?67]aW%3GL5<V^L?(B$!"YaVj;F!Ls?4nUb:ArhbiiK[M4V^]'[\U=`rJ*07'bT/jbKEdbcGBL8F4?
%Md@QN:M#]Lag<Q2s3'rL9tp./PAfe0]1k7cD[];*Ct:N26k).^/)n21/#/bki\0@Ts!:#6*>_\`pE,_"VEF-S\ZO8*YY,]HdSB]#
%g!tZI"qMu0Fan=>B%*S'27Jj_0'Y-*Wg8*TIfI!Bd=Hb66G%"#e4*(dW.djUL,,SFBk21l5<Y.k_>Cq/j;4Fh]>DjM)#Y,&UNi>:
%IktN_g`1X;e#2sUQuS!"K+ZY7#;fN:/4Q3Mqb/\#DFU_mfd#cSE&XeH5kfT3o@n2LS:RX0LTjZ*_$,Y:5=3&V5E)&b8h^a^s*Z4'
%i@csb+j>i/c3GS?VR@D1I;Iej'6[@mLZB'Ai#W\2m(/SXl8S"F/dnnJTbApN,:UN(IW'k=_3t8+XeL!;`IAh2\H^o_-?.E:\iQk^
%LCu]XP#l.T-ucA39t%=h)[p#_]$I0]1Lj8G1SPq.QA`?:.jXVFm0%fKC-pK6ZTJ<AH826e%GO>Emnc29%A*OS&Q-lM\Va&hpr()%
%VT2\O$dn]mH+;-Qs1$'!c3]Kuc8m=0rgEu^?(0h]2E#QRf;Go8>ob0]90P6[p%U:eRcaD+BptW#h,Y8e&i/Ke[7hWs>rJ!:Ju?\%
%^SsJZ)Aasq0RDXZC^$m-+@B`l@Ynk4kod4sY/aE<D5\:gbt["A04t5A!=LW$=f$(pW$\EKcb@9JLQ@t<Ana'hLBe^\*Rjqm_\##5
%OHe&K$WgDEi_r0]>L[^\mUk,O/^1*(KmUnh,W\/];?HU'S$2B;:ZJS[F%Y`ib(rank_h":D<Bq<=`gLt5Gi@FE,_$+\^/=O-Wt?9
%6JX(Dqs#WPEgshS:\EN)A%p$h4MC(@>"A7MW9M`CPLR.h]\I-uDA,:3+e2FcV'53S2g79JYOX#aWLi"Uad8@GM42%maqlLi]:@/b
%]/7^Sl\nMFS^19X6Cs7c2LG&M4$('FH/dpLRMplP31NoF?_%#fgu83[hd=-"8^c@HlMW;]H#:jII]Fm0&cs"tnSKcrI\G+tj/IBj
%:qq,ZKDcILX/@n_=`ZQ''`kuca,s`PVnFYY[LEmW/7YlmlI!Rb'Uispo(_!u*Q,#OC$5$CH,kE.CggP1E=P"C$=N=Sh;>Y4"W,?F
%/E`g\TO]7-'mWU*9apqgXk2lrXJ\n[2Qc+AT#30.6D!H)1sLfol#ZE,Gp3lu.d`&u)B,)?/GjVJ:H90Em#)[&PM_j=.RnSTrFB4U
%<@EJs#+e'Em*n>NiF'I:qN2Ul@(>hIL4c&g>;%X:rh@'sS>`efBmPn7\P'N0ZF<sh@S[Kc63V.Qc5$<WXA[5L/q5p7q,cW'It+os
%/r05V4oGD"C7dVs9eG!D+hW>UfS9as:n6Xr<Gton\'MQ_``'n8MmV/SMX<UXmFsP!l-+V^!OC%AfX&4bSE:!(jjo=r5E\J/i:-ra
%_Wt='+EPn[I119<YPknn@D<rQ2R`9/7"q`jP1JH(kQ5l-;Ndbn`Q&o*V#H)2GNU9$'cYm5kB3jJFG,o5ZV`*Y)Y^rIC9K2WbETG]
%mU#@0TqcKUIeN%Q[?L:U14$U1jnu_NOS@&_SR_M]s(.sVR;[lIi<7@;=&S_/+<ut7,;Ck]Ka+MN0iF)J/atEGKiO8;[3LR<Ui,UX
%2o23p\G&)s@#/qk,"gs.-[8S4l=cK0BoDgEXtp-B1p]%pW@1koq1`+^KM\m,(>`CF6Ufd`]$',;CD*c6<:EZR+5:f6Kg='j)K\pq
%cFr:i?38BM%B7Dko]8o`YPRpVKoI=<Aot%?*Grf%XKHl^bUSUQAa14VQf$0c)u$D^MT:1H`n,?1Ki$fpf]a<nGT->:>34=8&):m8
%D+X9"=YCD$WH\iR#oe);#S=M@>[q6o/-KEbh+sVs>b?ah#ofJU7_i_E/Ep`mAP^8)n.2!V-cH7^"4fP8bIT<c73%)=@,?3B%lELc
%2W3Jr*^PIX(?%F4)TN-B)P'0V]bQiYT&i"ZU^j)PP5XjsZ([J`Q3i#ZrttksE@cqb4bC5k&]\lS?`,'<'+-Q^Z:Z1HkdaTJ$3tL#
%Tf.<@7P3:kb0h"K7fX'T\$Cg(+U"ElrOATDH&mme+)tGI$49jRC3H4WnjO/EGH/ge:H=mY%1n8?]Tl,QNr*g=JWuk#e(6"/lO1Ud
%hT3c\'t"=3;FAcfKpN#Ac7n6EBKZm:4q9,B6\.bro5t#2c2l%c3I:mU?H'gt5ga/s.W9i[Y,3Bh3h&9n]66u$W)(t\F<Rn0ZoHJN
%1e;\,+f%paA$o#]T'\cXAs=l,(NXgkTbKL\h9k+Mm#JsL]l#]Z'&bYK/#eR;A-S;f>l@]Y[:T0dc1^iG=j>c:ACZT(FE)tK?VU(E
%6BbHa]Q?0F#5D8-)d+OQW+k3(SVCG)`5l[`#lKX:A7VW[\?Qk<.uY]e+"`%<G?l5+3lJH.)Q,=A:%$S3kqa=V=:#Nu*Y-m$FD5Ek
%+]<c'nPC2t*jTD]3@p,8GerEcgpNO14pe/+`Z!Hsi7tQ3:h*j'OJ$Te1GsJPX]ZobTdHdHNW62kYA:O(3NftQkWc^=![k4Crr0FW
%J-1B:P)C0)+UF9VAh<EhRF.,SJ"LAU>1NM?]k\/LkY2IqNEZ3A+8p:_=08K+lhR9d>6[>gq[Y0?/5IaHq-8Ot0\=RPH)8^&)A,hr
%%<N[kNOfDEo4<>2@H<gfTMA*:F2]1,Slch(?3.;R3J^UIJFl[W)(a^k)JnYs5$Z[*$J5d6->T#Q&T35R&K+4M3b'R]0#a/(fMM"K
%fX#!p:=;V%<oD<Ue@fV'd#4O'c/,#`.N)SO7`usF\pWM2PYEW_:2?>gaD@"QE]m_%mBe2T$Bl^L:9H8?3#2i8E`D4Ljh9np6F#\&
%5G9BLC>-[,D#J`e2oXOOjDJA()qc)\d=]>tGE$e7OJ/Na]:5Kdk"K(8,i:VnVNZ<h?1r`ujC4.Y,tRCgJc;&_BiG[bMYYFOb(_U5
%B^^%umqimf65\l+ICcT--u+*75e<o`)#;LC9g0,[dn,)PAmQLITp9<I0JhBOMj'/a?hSAB.cnq&O'Sm0&DZ#oq[E%]IQSqkC;ZEJ
%;g:)]Mli1O6D`#WbM3A5+>$^Om"-"URmWE(1?Xhr)W\4tIBXh20m=&W="`(QF*\Z-a96AbRP<9Y5pAgf>XU?bf3+r4QsfAYBCT7[
%_6uRo]#)o22,S<?f`];]OD_ItpnjTSc5]jXQ1TuFL.C?I:%^KAQ0T"^8Pq#7o4:.2T:MHbFX&_BXKjCdNpNe*.XIA0;%RC1?@Elj
%b!\)_q#Tn)G`srk=:/&2Jt9qCF8/#>'aTBhRTRfi$qA]eXX)#H?/EP?bo\S(7LeID\-C0(="YRpLg6YkorL+GJOqI[r3k1oj-Q,L
%c<RosoU`5N(1t@u;PQuNhBb.S]hp/X,,Z&T?d^CGLTqiALt3l&MVWSJ+0Ook*cNjCVNiDK0&1%'3D0[-g!FRuiZK-0>sp+bcMaK9
%l5>#[mbPgK$oDP:`/IDu8'fu(4fK7n%F@XMC*CUSpYs>0F4=]D5$uhl.*`=raoZJb)ZFWPo-CjN7^GijP&2h#P^.3%-H?;I)2%>5
%<q:342[IKGOX1=^%o'PBl3UV\;CN<$\-Eg5p]<Tu59V.@Aiua5=*4',FBS?E:mo085(I#Ih+[)=P8'=P^juc`^V*D=2,9F#4W?n\
%.WqAelgMl5OiDBQGnU0VdkH\?r,29hPqh[/C4[>CdL4d/Y)8jlbP>F_A9r^F.>?1#P?fSS3-dA`N_RoL0["LbD9M3J\K:=`FFCmi
%h25i;=V`Q>hEM\eEKDa-Vb&m['9h*n$MHd)Ybb4=?3Zbh;\.dr^CNAAcr]gVUXb$p-5<TsZ@X[aK]l:M0:PVrBgOdU=`[$VkKE`#
%3[>.\NE1Ck`!'hdNUIe+6p")A`c=>]kB)A1C3Hl-l@mtdkVR4#C1;p/Bt1F7(I[m&o:I'icdkWJ>7>73(%JmV*tq`ZTa%>'0t>?t
%$eK+YXLnJEd8S)Yqoqpg]H8.%>oYdC%)j,"!+oNA;!6bAhC(g$D$uH$N5EJuqXC<MaQKZ'HqE./O><H"/6iE[9&i_e<W&`5R@)qh
%=o%"Vl)c]g<*Rl1dHQ(nXA@l!AQ+US'T:?3h,4c/9T?2%FGD.2m,Y,D'^XieAQWp,OKUh6*"UZ7J%(YU6D="\qXTB@AUN)H'cSAe
%GA$=V/Yr9(UQa!M7ajPrSYQ^_IIG<6TS^osGo"!nlP\Nk!]@4*+Yo/k3)9>A,#?PN?OEp69EhP7>Wr5Cb$;[JP$B#@'JP(=VT)NZ
%kVN<S$7a='TflZ3(EpX/4(Y'Hi7&g7:J^,m4<Y2X(MoM_c7-7mj,@kBG.>D.RcW_u\gs]Dq<LELjLUd]Dd/8./sc3Zh\;&&2_,?1
%F0e(qn,.9%T?Zd:RBr;J\YrG[EME]I#[BireT;$Cb+JA&Y,>'+B#5;*O?<5b?$D[O@Q_lSefeMGbI^qYjd,u`W!0&M.%OIi@DfiJ
%"qj!-CsX&tT<<Ka_\8;l1A\*2:^I-Ibma&#L*#=Lp!VN@]KHDK:[4m&?"(5,Ie^g'hbO%Ts6FgsK-7hWA%DoeZQV4dehQ":.$!7(
%qGE';R*=&\h'PD_(1,T5-I=J$+pLL`+`_%1K68Lp"*re/2_r\nR#ImF>9O=;[aDK'!IVJ]h[kIY$pcA9Z$*Y/=(^S'EeI`G-#^\o
%!0Ud^/ek`CbCn8c36[tsl_e/)e"a=keEdH7DGs+ef5794$"R>E;//Q-0h->qgL(u'_#AH/qjNq0d="<`=9(36r=n\8kdi#2`JUl-
%^8jpOp<4d[L=%bO4SNet2_]1W8AbmGna&t2#\t:l<WqR^0V4^+;lR!d$5L\?C't?g]q9dMf6q^tW*^[2phS'f.ciaM#krD4;K"!4
%cQ9O9RS0)HiKC08\B4Q\CAM8*<>K%a'VZ+CV?M/,Y'SNp%:#8)o880WF0qE"kg_0k&RJWu'He]eC#cZ<cJl;c*FC7KkgqEOWP#BA
%$m^(Pl2.tWAoR'_kO&e%78hKdoab@a&*`!5oAEGj79e6fa%fA_>Zp?V[9_s$D5OD/I55Fr4U-bTQ-"o0B`+s%[NIS3mYX8dAX>Le
%WiQ3C3=Ohu$$?]d"Hr5TZEgWb[E=XYCH+c(kMQj@eumaeb5Jf=AO&^f43lYsjca8K2Sr?IWc@9RK=k$R3ccN5X+@@*Hsa88Z#UE@
%IZ@;-&l$A##i0Ma(^+k^MH'X7<*s4X-nY+,>d8)9;0t+m/sJ0CS27l,fCQlaD#3CpqDq`jF/pm&371KtS><_LnlY(&He9ckMbo.k
%!9n_Jc)BcC/(;nq(2"$"D5+mBhXoUg(\q1b"0[M`P>;oYO8!o]>rS0SAFaLBd*G:hb8YD3p(*H\"G$u&<h0U*hroY9lH-d(YdYHD
%@]A6b-a*Np&FAg/Ed7Fkm_&k"n8?=r!p79]cajsh!JF'PnJ)SmZ9OR,ASTs^%[(MSrk+,X!P^HWBXhS5T=]$5.IcTUdJ:kJ>qm5a
%jtE<?Mr7U2H+HR+ogQuCn!?_@Ra>;_+%h&T2<XT/maHs\,75#FXN3e"cs<huYUFRdoutn=fofqA@<7eFEGg)-+R",gc\%kYisQR%
%aUioG@qg:#FrflMo"3$KFuddD$Xq9Q'=kGSJnJ0X'GFZu/8)=tIMF39"h!)rgWg.1q:1=_JoX[.F.gPlX90<(UmZ\]:Xclq2!,^I
%=B0b(Nf;"mDG+#o6Q]+//4L;^l6JE6;IYL<4ndWVY\,;G-:oJphi!1?2`T3][sO3RM(b`\r6=.8&tD4%W2t?!4)'?Zdd&T;lJiU?
%.)+IY7]ZB$juk?4ZEV%o6pOs_n+3H)3u(CiS@o>GY#AI&5ja>Vj!L?1J3(gC5fi7;Do9H:lXLeF<PomZBO&A/rOB_g8e"#kM6JMu
%2B?e8N+'."]=dEL+8tiAm]St=OY5VclibPh%1q=Ldn<^13a:tg[^&&AH*]Q52\4O95p6a%YplE?b($uY%8sj94Q7FM9Z(?pcJN45
%-5V"?+>LuJq*YB[D,%hGo_*Y84!ssL3h1SHX/m:ilhYKiRo<8nf?JZ7I$5-k(?Puf25lV+)mS!*XM17G+@)1No71<7oiNXRDk=@h
%T1>@rhXM"c[kl2'@n^f<pH!#(RGI#'n79`6B6u^3bJ[3m9Qj.@oXZ<_M#<X4YO!W)(BBI)kn_.@)iWRf^A$T>?clB.foJoeTLqQG
%8:3::=JpuB](_.`82j9gpWIWL9+hQK?ua/:9&-Q6$m!@t?nF2?Ro[b^>J?XdG3-(C06N?-&Tc?1'^!rVZ[7to*5a=-.LF'3k*DmH
%PWt<BM=*!J09Idg2g[VXLcO^X:KDmHPREGO1J9a,"aBZe:L04je,:P&OnV\Akq8RK7:_e8KM,lVNHSnCM79%/"i0Hb`m`mQjC>MZ
%f4`l"A?Qt&7Ar^_(^T;$Ku%q*egX:0K.T/Pa4'AN3K.GtH&#p9$5HE#_eDL69m)T+iDS"kgY9EuH43h!_"RD@BHE=nQ6Dl-"O#b3
%OF,a_SKE%?bPP/8YP^b]6Y5dP-a1(qQO*L*-LQ9rOtb[k<:sOp;7nWZjS#ZFgc\<S@A<8`/ehsskF#>X6G9%L2\gI:Fhh3^S)57$
%mINHm2T^.;M+Y+<cDks*!)Z;1QTf>r34aU$W/&"A'b@[G;Jp[4%0abOe7<Z-Kt:7ZVa.MA+Z,2'_]m3Sp_Ktl7,IhJR"X9F2XK,%
%J>]fJbsHfA24:fX,0#<H--tBU;d!)@%1YY+ZjbXZ4cbEO.b&#Uh7=#@6b\ED/-ogU:<*R<39iafWl=bk1(@#aW]<?bA_9C`[Tn-<
%qHdG2@BR6^]YrQU7qXR,.VrfjqI31DWY3oI>tL?n`P>u'PgoToAVX9^<MYahgr\W:W?dVp54t,)/-*@RE\9.c!L;[3m'I8D`)rkh
%`r+oh8[fKSNd`(@m*rr:llJ`L:q_brXa&;!7Y`K22D6)CJ-MkTMm"u\%]")4O7=]T4XIEN5?G^_g)8?Ff;r6&.m#\"9,>O`iOq=5
%f@blD+r0@-nds=,bT=R+3+B]P>TmYi,&%c],,8n"();O5l,:e>\>dU/8C/*9jjZfoi-]XT*_+b%9%i1oX/N2,]EVb(NuhGrQ1SU$
%3<"b$pT:nQC#7ZdRiUc.G^Ut?c"=pF]CdskR6#Xr:RB7PoSPFB"=q,;aVBF2O7J!mjdH!r]9@mhpc`cq[p6An/IUV7/<J^jO+i"i
%@hH$R8!?nZhi^G$9[]\1VQ2QXS"c%)#@#06*YN211tP:Ahqb.fPFKh\o2(dm@`d\@CW[i2@"04L_c?kQq!uNq4D\JNSl&;PM8Y,U
%BGE?=[M:!iin6bJ6gG,r)s)7Y-5E>_i-:lt3K4FYT1/(4-Y0]054k9;o/4+9J<K/2Sdi;4E<`.91B[QWWK3n45Nf8n>7sK7F0e<E
%,ZF?\j&3`>diRj:l-;r/C9KOU2'W*`RqK'^I"bIph+F,[a"EQU#YXi9+"c]3a`SE/U/46Eb.SYO%6(U@bPZi$^d_mf$/T1F\s?C5
%0Ds4`qrGhNo%=e:4\j5=>;2=>lFi<1T70El0SKR/A=l13F?8C.YWP-7:clGJ<nt@@#h[F6NI;RROaWb8@M%(u]<-Eb@(UdQ^N7o,
%:d\aGS+Z-OMp!SU[>uI(dk&5H`4u?2(#qXVnt1C2j3M*3p349dN6gsAr:uDgqj0Nrqr^3CpqqUWmcT*!dm&7m;tpMu]j2"\""M'5
%]M<3plNl1-9o027UM28k!q,8Hb_EbT@KW\A@GO["Hgk^8C/&.Kef?*6JKifWF&0@&AA?*<Yh1DB1Ea:mg/(4Ha<ipI`NfqO>0]Tm
%9Z`I9H=Rs`d1:"nnH`-/Zf&[Ve:<CpA8a@Q;Kh75\;i;Nfq^.Vl"n$&QYtj[^WGo6_\nS2*4nQF#'Cp1?5cd*W0ZW1(4Zjp>UNd#
%[%gB1[G'$#VYt[\ZfS%k%m,[*h.knc-<u,^#d)HZ?-4"\R)c=kLMc@d"8+PlX]F<U(-\ls`F&T>Y642R>X2R[<m&]Y"7@:'kAK3L
%l-11^3f,-A"kuFFq_CWD>',CmdF8KDldi&_?HjFd=$^4%=(pDt1lQ=HUS_Sb1JIGr#-Ttar\6=9-N5i)q&2I%9;+ZF,'?`k<jLYI
%3)dd@3-hJGImYl=eN%c#Fm.>,Qt*1g?-ed-M?s3JXD4eD`p@2G->=$0UP4b/;t$n;,+^Wue+1q#=d6T+Y3S"LR_i&*n't#riS7sY
%0")0?++5Ck9iG"+^YNY6cg7((2+W#CihNHFkB\4b1X9Aq"ZjT`]$*l=f2lCd"G:c>I82'bRXWu?J:QflW5[.7fY5\Lk$UAQaXl8D
%pB95:)//Fi$:->O*NjO8;+X)#<^ujSmb&!Uo0Kt>'nnPm>4gk:o'ceWRQcso#t8tNTDIL=JD6qIAW(/m5CmasHq!<GYA&,ad/]?!
%1P=^JU$^l$C1+HPrKtqtGYKq+%?s`jb;OPk4<3KpE:(:ij.FF+9++?N_<)Mb[-WXb@$>JIE.P3)24088[X&fMo$Q*rN_M?5KP<5q
%mSF\d;sBto(/5BJoE9.Ioqi7l:p*X)[9-=M7Mi%f.)F[*B[1"'@$-(5n=!?GLC(^B#)AT_kQt=RV/1Chk-'@:HZ3&<2bkjgJFg,G
%Fnn*6n%kQ&m@L:ap_=T<PJFB.h/n9DBJpg2Wr@R,Z4YnmjoXi$@>0)F+;pPE[!\IpYBJdiV(`4K=\;^76_-spJL#?@k5QVE?q`4e
%SlJ'-M.3C]YY:VaM=E-H3E[TI5oO=IfDpqG=j#p>gP\q&%g8nk;R!9<d7FcG&8D_c['eG5_(`hd/@9W+D2e2XX6n26D=S6+lHYT.
%QtaJ%hEEtndt?bV"T^K)E[kS"((6Rf(ef9^'"K&"Wq*Z://q=(=^q/AmRV9:=iu$neBR6!!-B4(B<55'JrUS()DShQb7!3F0lZ;<
%(0T8$7t__/B0S!"dO]R@WFBboUsVX6=W@2IakF![lKqC"]/=SC-mC):S,d$MA_/O5>RAlhL5chVd:f#k+&!h21gc'?o:)_?"+q!r
%5<3J?Y-$h`Ytr'D<I.c+3b]c)p;.reYe?0eIV"W@j$-'t%ZSNi^VSbFK-`4,(CfUC)WEML9Z!mA*?R&a[*6i0oDWJ;dGWHZ#+H_u
%C6E/c%Jhp&'i:`qDki\8!G.tZO,5`0a]+oRZ.D%'aoYkiQ0jB%gMH't@nj;I\5YO@^nFFJ8@Sa3_4j/uNGR4R%i'QBnE\+&jf9AQ
%Gh>[l\C$OR4]t`:o>.PnhHD,CVZ)[g'<S$ua&5'C=K(%$_$:8,C,bm10qlAr1o%:MCT8;2ONH_CbnB!qZ%*ZHjCR&;_b5^!,!B7q
%-JG))QC31_'VF7GX.;LOMrjoVWZn9)d`,E^H6JX!>)/.sI^';fB1,T9!!^W4JK@k1$*M@sD#JU`_-0;j@`qPI*oWQ8[<dIJ*c-Y9
%ZI0;$Z.+WQ44tU%'Sn#U6BG*RdfIQ:;HK&s:e307Cj&9XV27bEQ)[Mn0]:W=K!T5)GV&LtQ:4L66sN*N;DL03O:X.WlVei%)(Fc9
%(]^*e\to=j4504rM(I-(lm8JVAhf79o:2jI9.4k"_h2J7*M\]!-1`*-!kh8laZTQr&9;/g1%7rr>HlS7XeVZD,4@"J*2Lig%6@MX
%"Aoi`*oP"Q:-Q2?.m]V"_*m4SWFbm+[Wt6r2t=5seSEhC1]Ze;eC/$M2Jkp3"<WD2UQHZ#A!aB5lgng2I'mY*TO+0_bLA?[2A<F8
%i"C#Z-mOhmZMc3l&n(BQ2dq^19<?C?S_Pg+q/dR&!Od,.SY7jom73I+,6(uGpE9:$r_,\E)^rp<[4Di0[;'.Tfg#/g"Fe)2=#4eD
%nj\cP542tbLhALc1[#9\X)=%W,*\&7PU.A3I,n.nI];1DoS([;__j)#WG&DN_^+I$))Cf*o+)>>q%\DP!dTZUhI"2o@:0h)?pUk0
%7s-I/5^7')l)K(</#0jt-Q?=A?JKO]TUZSeM'8T0E)MKS/Ma83A#M;N2iiQ"Y!#$W]?+sr\B$QY>&h*HkYJ,m*fa/\K@-:79V=*,
%*b6PMER^,Onq@Q7l,cfd1cuN_EMQ[''<:6RFKnnbNF.QIits]^LVpnfMQjjV*1Za>Y#+IAL$ht%LkRHckR,:(;s7PAN`bAJI4s1o
%XBu$c+UhBWWLuRl07h>Y>#9sf\Qo?AD5FZ#1GLpR_fI_"Oi+Le3oiYH+S6U>&*&?s&ihPihG*2=KdS1H</-FdZB$jqbkknNNT70_
%NIYA(4>NBgNa"SC:!=;3T`LVkRV\=q=P*8q"P8WV%MbP?mDpns!$ju@J:X2T5<9j:2"9MmALd@<%h6W1*YGO""._(d`rKA-V^r/^
%:l+,(p2Uk8'm,n+V0IM<I;0HVaJ/XjV=?l^KD>$BHHNZ9B3/^khtVN%m?Xj]iC6+t?e:8[^4>L/=o$J3$\AsdGX;M@9[ma\L!Bl-
%(<EqF]`_+3V'r.l^p<1h'[CCg-<hg5I]HJDk\fNT-\mne@&N!L2fMpm@4tM8@5]K.r5;1$32%$uF'`F,?6M9?g(PYt0o?Yi:*DUi
%!lkX&Y8A@.$(Zi"q\'ki_Y,_&+(bW7`'Ko(#kJW];AWc1,>O*6fom4tQ3d;FJ>jC(MQr9D6]&%53!'S"jZ'2f%_c:<l$gT5<3r$>
%6Q97rCmLb:>FL"4FaH3PZ;qicVM5SmLBI29"*XF/c[Po=M\Pc@FEF%aIZ`cQ1?*<E4A<,3`WZ><fVDXLXG+=;b!'.O_9W^7'O&8-
%_:,K;9(K3:!+@_1,#Wln'1Nd=jjVJHAlG9Ce#)+bP(%lqF2*OVK/c%)pk'H@*X][#;WaTaBso0k?2!G0_DX=W0cp6N*c4K%7psk9
%90BnEeCI8,+G:+h?i_P4_\d]<-sEh&A-3tYGBn&$H^WS;V:4fsWTQCKna=WX@J-WI)k!YE,^^t4Fd6`J.9]I1*%R&%+14(&*TT0A
%=\gqTi0#A4[0]u6Wl&\:I>eZGN'SQLFlb,1.1P&tDpu+"T&3C<"T;f"Hb?RDb6G<R=#POu*"1t=ZP&#9%o*`C>ro#;7B_f##qkB7
%\D7',5B%?5k%>F>F'4o@M>B*KM[:@_<5#eJq)VMeh@V=n&nXpk4;B\GYW<bk5gI.2nV,h.lq+q\3[5.mFCmnL2fOgF008U2aXtKt
%;;9;>Q_F4Gh*S,m_E")Hkkpll!--EIT'JWT[]bJ&<\)T,8RD`C>@cW'UQ@Y2o)d=:Ja'!)MalYUiZLTORhkKiLr@98$SR+.o5($>
%/s-JP$C<>p.pUs;4E!lF/iWtH!'V)$<RgbjpU@=0k`JrhE-+u7=`HF3k&`jan&V](\APk(.U_4Db2FbC&4P3]&38)Y/_++ch!I!Z
%MYFG>hYlhW!H%>\ROo$-.!?N%=HWNBpuKsUPRCHk\IR!(B!qo$hLk-A8H'#J#%^A\ag#p:NVoHn3C9C<YQRZuaW_kMLbJ^P--7#.
%W"dd6(2mi>\m?EeZ*;3,K)MR4_[`(_MeUP\To*RZ)#5tb;8"IqK3>l`-ibX?aZs!__@?@p#+2ZoS."ZRCD+V35K6Hh%3=,.-n@Ld
%`Zkl?-4#UTC&9T*@(LGtY/da9VG80dZS(!!AZLr7U,mSS()gIn"%2W0(bB-&7);'Vm]\FeoO-Qt;.lF7X/[F"=O$9?jbJB5I1tg2
%Pd%hSkOFDc%S2J]ASsNqWCsc=8F--910:?PM@Fh?3k?KW:`,Bb21R$4Bq\Y<L0iQ+D1U3Y&&efMjN<3PDs/6tNcaW.^Ik1_-/7Fd
%*6NDi+Ee?S`;+s<P7ZdV_ONoZ>_nL>#kALI"*#)"bVu2?.d<+58_k[#?GU%+l=*Eu_u0Grf=L7\qkNJm!u)1K-4@,[/%_O>::%ca
%,6fZaZlZP71O9^-,/.qHW^R/nmIUZaPZ1G:qX#=84ko`*(FR&"1ZR0&LF9p=1ZS:Qq7;7k:G_S@HKq(LR6;m4I,5]s"S#V6\4`PM
%5rYPlc!%7cZ/<pHS/j]^^>iFpPHlb'B#2(W2WIW8()gN"]?M=3SAed`0"'\[E$`sVVr"eg[S4-M2EM^e(TI\+@;2rFLGFemT7_P"
%VF'Dhl^CsG,WgE5+LNgC"4U,/=o'AiMbZSEAan[Q&2=k[`rn$9J448GlaR(O<l9N@>am#=XqM"D&)Ffq/iC$t/K-qpLO;'>3Y_I&
%QYGK/V+1NG)o7J`/3-L"`<br"f$&VRYOAhUQ&W*B"sWca4KGgLi?>TJ-NLkq*c,SWqTNVLC9#.O$9F<SQqUPC7a52j@AI0K97kH]
%057m>:Ed&'!&g%gJ"X?l68-8tL22DA<C9YpKooqqJ.\Q_o:tE;^//$I8U!,H.&$J#!fKB(4a-%cJUXr^=BREG6-:NtZsYI#X9nf6
%$XkihlhM:_eSbGeb1)#J3O-9n#1dNe^ec^[h9\(dp*P[."0s>l2U)6(C5ZGpMA^5O6NGOKG>PnHWTK[d::$=`rNZ<c5TfiKO+t8,
%h"RLrG[X<QR\%SoU&/p`6Qs:-BkYFZr,iual;%h#<`@kr,4=.QA\t<'1p'gprc[R#fK=]7K9849#H+\+ABRNaJBlQBhU6)NGPM/+
%+@Y%b3sK!FnhhZ/%NHuEPd8]q':)8A"b>ZKC2a8%mt&],bp!djUj#)j>g:jUY2q_o;t.&4Q^nP4IBimRD@uh]ZiXq9l7Q`]\Fj81
%:d@^tXoY=jeI"uN;SEg_6klFAj@EP_aH<Sui5<]Ls+N#Q%2&p.02E5\nH!NsL.su4omSek=VgmO"c<-'%*WSOb2n9+@JfKDaU5L.
%@N_rO>IZ<B^/iT"D!:Up9/Ku":aPJM%s'Ish(iH@<J9qOGt)#4kF[Pd'MVf4'K0K.6'0b/Zp(j4e,WI8Fe]WQZURJpLk.Uq8mgbW
%]Fh9RE,Xe&'\ekN2I^%uVu43`*+jr`ib5MlEKQ"YWR@8*)`m8arI(kuKkAcjg]9d4#8j"rd);m+*8OF\B)sB\6Fm]i^6MfB-GA=P
%hS+<DbO\m6l;S6(gXo+%jt&?:Z&O_:c&4_#n&K\A`qqm,$*aL;ND4)P63A!l\d0",d?>,SM%H'd]*V?+&.],1UC^pmdAR="#r.\V
%I>Ms4#gis`T+E:U&"`9H$4jK<gl%67n1]h4hXHU:O7Vl!O7loD3d]s_@+3t^ao4G-b/b^=11$%Xil;p9,,j4_.?PGBA+o!;nC&(e
%iSbQEF?BOb$VYH6\fE6+.5.tA:bU7F<=;1*W2S\u-AZi^YUBpQ_GD`iGG;;iN1Z!6\.L,oajK8O.#]:f&F,0>_#QV,@E'.GN6qSY
%:Cq.Q,4n+F'0oNuBi'*Y+?VS]>14W-`U_,53IoJP;d$e)q#E<_d0G8sT+$]a>@(-_jfa!ZZFoE\K4K`QN\\2_8#YIXmC./lb<M_9
%Uc=DMk.K^O=I;_hdr&TG/kkA\8\ZrB)!)@IHr?2RMF68L8.NQ%0^oPRoIu47@c9"U%cck/&eALG0O5Kkon)O;=HaO9mtCr8@Epu-
%Y/b8O0OZ'#p0SL7KJa0([6n%4&QV`@W9k"6"@4ddbW:FQM(k.`SF?e-j:H):i4]a<Mu^d-C5bI#&AF)hPQ5S-JXI(d$,N2L^sEH'
%.?<e7]I,$^YWc$iI=m&+eN?]5P]f,07&o&nB_+4RdriI<$_<GI,r!\fn$:74$#[ue'TJ:&;5;#5H($\,C_W2K$K7^u0+&.Oh[jrR
%a6g`PB5uFQ*;:q<?-P#`OIt8[hHr*QKWQ4kgI9ni&Tr,I4WiPd<AX(sb%m_4S?QBK/F<b%JAQ?#YimDbcNsu)U5GSA1?`6Ik=-&M
%Tmb@cHM[bJM/aBR0q'&:p6)Dj(b*_Sg5M#-<ic4(,ElRZUlYaMV)_i56H`Oh=Sq1F1ZAHb9$l6u9*NC0ABm-bO>aEg6hUGpS%X5-
%FQ_>g]YCgA0d7@YE;7ZIlb/[BGh1jlmM=!nBH9Y)PpM?i?>LcPCDpF6cq8e@R*(a(SSuk1r>V'h%tX=fCb-*Go'*:`I-SfOIdkgg
%-iUrU[hb"Noac\.LM0"pESEKu/FIK,i&O+aPchd(3pIMR4&3li1,aIfil%s6._q[n]uRp-b0^Yba=,^=X3u=ohV;W>o':=W(?"p?
%T*'I-!WC1h-m3O+\`,jp/%S6D$B.<Ed(E/i@EKHI!A6HE;cFT5nBjaH?;g(7=WjDC3^:.6LongSCC0-3V^)a_<IBB)U"aR1Kn`X"
%7'5`da+!_g?N`8m;<$]WH#)T;'H[m`/1J;)k%>0u-VpT)KS[(UF'5VZA9_G_7p"Tno5`M]rY!G5$=,=.[O[CH&5-+%.BE7X\(Ug4
%ZFAEd8S#j\KkKu`M5c`U:7U;P8WTb.m1)Y6QolIdmsa=M5B?3_F8^JC59Afj*rkK7?S<FP?X<8-?_-P5ER!tHHMu2Dqpk)<mI%d_
%j1tI0r.VhohuA0Ld;_2p]#F9I>9*LDhu$7i8:UMll["&j2Z<<pr508+ro&1(lT_S&n(n!%=T3@>i;/e&Y5cF)f8k6`5K&VcJ?\,7
%nE!-@G[+i=R;sA$YVR"7rS4aZs32'>)(sMJgC?Wn7Kj2N]1GoS9q_r!@p+S#K#Ykh2?/KCldVG[9#kJE=H!1RH3.RBjib<.!0&sF
%^A2-NqS(kb`V2f2S<6;c:23<mi4`HjhgAqJC=&"7rj$YU?#C(,g#_@U==E?-6[6LDZ6`HZT,*W.LZb=C$mc*9B65_!ZK=tV[o"$r
%%Q\NlB(2po<%PJ;,a_$]i](PjFYOj;B>!GhnF+j/B&oS31g?!Xg6e?'0bqH+-MfIp(!-)[pdS;_&'m`t6LYiagX8e+T$NK.%35/]
%*'m]T*(Ne1YuW?e\WRHd\B12/"Rf+<142:W"PNTdK.rl$m%[BQq1TV:KMfA?s/SjQ#$#:LjT<e1O$aU'mr?Zb;#_/uJClRd,+(#^
%EP%_Ld)>'49jAm1fncX-;1b6jocB$(>Jf8[rUFa2j(EhOh>h!aYbhBcDYq[cHs>ff(:?dZJ[lkGgt1O`rTq*[0WVon2u;q1Ic(1G
%huEIIDr:QKG<ao$f>)>)gUBCppYUJsp5f7Eh+tf]RihY-mJm1RbI9_8pnsb!rV='T^&Fo_5Q(00T7?jh:Z$Tro0<9>s'PtZFT14-
%^]"'0qO`9/2ua\%'<en~>
%AI9_PrivateDataEnd
